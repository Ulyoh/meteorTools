{"version":3,"sources":["/tools/meteor-services/auth-client.js"],"names":[],"mappings":"AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAChC,IAAI,OAAO,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC;AACvD,IAAI,iBAAiB,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAC3D,IAAI,WAAW,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;;AAEtD,OAAO,CAAC,0BAA0B,GAAG,YAAY,EAAE,CAAC;;;;;AAKpD,OAAO,CAAC,qBAAqB,GAAG,UAAU,SAAS,EAAE;AACnD,SAAO,IAAI,iBAAiB,CAC1B,SAAS,EACT,EAAC,OAAO,EAAE,EAAC,YAAY,EAAE,WAAW,CAAC,YAAY,EAAE,EAAC;AACnD,oBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;CAC7B,CAAC;;;;;;;AAQF,OAAO,CAAC,qBAAqB,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE;AACtD,MAAI,KAAK,YAAY,OAAO,CAAC,0BAA0B,EAAE;;GAExD,MAAM,IAAI,KAAK,CAAC,SAAS,KAAK,cAAc,EAAE;AAC7C,UAAI,QAAQ,GAAG,aAAa,GAAG,KAAK,CAAC;AACrC,UAAI,KAAK,CAAC,OAAO,EAAE;AACjB,gBAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC;OAClC;AACD,aAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACxB,MAAM,IAAI,KAAK,CAAC,SAAS,KAAK,qBAAqB,EAAE;AACpD,aAAO,CAAC,IAAI,CAAC,sBAAsB,GAAG,KAAK,GAAG,IAAI,GACnC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC/B,MAAM;AACL,YAAM,KAAK,CAAC;KACb;CACF,CAAC;;;;;;;;;;;AAWF,OAAO,CAAC,kBAAkB,GAAG,UAAU,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE;;;AAG/D,MAAI,IAAI,CAAC,0BAA0B,CAAC,EAAC,qBAAqB,EAAE,IAAI,EAAC,CAAC,EAAE;;;AAGlE,UAAM,IAAI,OAAO,CAAC,0BAA0B,EAAA,CAAC;GAC9C;;AAED,MAAI,CAAE,IAAI,CAAC,UAAU,EAAE,EAAE;;AAEvB,WAAO,CAAC,KAAK,CACX,mDAAmD,EACnD,wBAAwB,EACxB,+CAA+C,CAAC,CAAC;AACnD,QAAI,CAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;GAC/C;;AAED,MAAI,IAAI,GAAG,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;AAC9C,MAAI,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;AAChE,MAAI;AACF,QAAI,CAAC,qBAAqB,CACxB,IAAI,EACJ,qBAAqB,EACrB,GAAG,EACH,MAAM,EACN,WAAW,CACZ,CAAC;GACH,CAAC,OAAO,GAAG,EAAE;AACZ,QAAI,GAAG,CAAC,OAAO,KAAK,eAAe,EAAE;;;AAGnC,aAAO,CAAC,KAAK,CACX,yCAAyC,EACzC,qEAAqE,EACrE,oDAAoD,CAAC,CAAC;AACxD,UAAI,CAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9C,UAAI,CAAC,qBAAqB,CACxB,IAAI,EACJ,qBAAqB,EACrB,GAAG,EACH,MAAM,EACN,WAAW,CACZ,CAAC;KACH,MAAM;AACL,YAAM,GAAG,CAAC;KACX;GACF;AACD,SAAO,IAAI,CAAC;CACb,CAAC","file":"tools/meteor-services/auth-client.js.map","sourcesContent":["var auth = require('./auth.js');\nvar Console = require('../console/console.js').Console;\nvar ServiceConnection = require('./service-connection.js');\nvar httpHelpers = require('../utils/http-helpers.js');\n\nexports.AlreadyPrintedMessageError = function () {};\n\n// Opens a DDP connection to a package server. Loads the packages needed for a\n// DDP connection, then calls DDP connect to the package server URL in config,\n// using a current user-agent header composed by http-helpers.js.\nexports.openServiceConnection = function (serverUrl) {\n  return new ServiceConnection(\n    serverUrl,\n    {headers: {\"User-Agent\": httpHelpers.getUserAgent()},\n     _dontPrintErrors: true});\n};\n\n\n// Handle an error thrown on attempting to connect. Print a message if it is a\n// known error type, else throw the error.\n//\n// err: error\n// label: name of the service that we are trying to use (ex: \"package server\")\nexports.handleConnectionError = function (error, label) {\n  if (error instanceof exports.AlreadyPrintedMessageError) {\n    // do nothing\n  } else if (error.errorType === 'Meteor.Error') {\n    var errorMsg = \"Error from \" + label;\n    if (error.message) {\n      errorMsg += \": \" + error.message;\n    }\n    Console.warn(errorMsg);\n  } else if (error.errorType === \"DDP.ConnectionError\") {\n    Console.warn(\"Error connecting to \" + label + \": \"\n                 + error.message);\n  } else {\n    throw error;\n  }\n};\n\n// Returns a logged-in DDP connection to the given URL, or null if\n// we cannot log in. If an error unrelated to login occurs\n// (e.g. connection to package server times out), then it will be\n// thrown.\n//\n//  url: the url of the connection (ex: config.getPackageServerUrl)\n//  domain: the domain (ex: packages.meteor.com)\n//  sessionType: the name of the connection (ex: \"package-server\")\n//\nexports.loggedInConnection = function (url, domain, sessionType) {\n  // Make sure that we are logged in with Meteor Accounts so that we can\n  // do an OAuth flow.\n  if (auth.maybePrintRegistrationLink({onlyAllowIfRegistered: true})) {\n    // Oops, we're logged in but with a deferred-registration account.\n    // Message has already been printed.\n    throw new exports.AlreadyPrintedMessageError;\n  }\n\n  if (! auth.isLoggedIn()) {\n    // XXX we should have a better account signup page.\n    Console.error(\n      \"Please log in with your Meteor developer account.\",\n      \"If you don't have one,\",\n      \"you can quickly create one at www.meteor.com.\");\n    auth.doUsernamePasswordLogin({ retry: true });\n  }\n\n  var conn = exports.openServiceConnection(url);\n  var accountsConfiguration = auth.getAccountsConfiguration(conn);\n  try {\n    auth.loginWithTokenOrOAuth(\n      conn,\n      accountsConfiguration,\n      url,\n      domain,\n      sessionType\n    );\n  } catch (err) {\n    if (err.message === \"access-denied\") {\n      // Maybe we thought we were logged in, but our token had been\n      // revoked.\n      Console.error(\n        \"It looks like you have been logged out!\",\n        \"Please log in with your Meteor developer account. If you don't have\",\n        \"one, you can quickly create one at www.meteor.com.\");\n      auth.doUsernamePasswordLogin({ retry: true });\n      auth.loginWithTokenOrOAuth(\n        conn,\n        accountsConfiguration,\n        url,\n        domain,\n        sessionType\n      );\n    } else {\n      throw err;\n    }\n  }\n  return conn;\n};\n"]}