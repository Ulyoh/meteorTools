{"version":3,"sources":["/tools/meteor-services/config.js"],"names":[],"mappings":"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","file":"tools/meteor-services/config.js.map","sourcesContent":["var url = require('url');\nvar files = require('../fs/files.js');\nvar _ = require('underscore');\nvar tropohouse = require('../packaging/tropohouse.js');\n\n// A few functions in the `meteor` tool talk to MDG servers: primarily\n// checking for updates, logging into your Meteor account, and\n// deploying apps to the MDG free hosting sandbox, publishing packages,\n// getting an ssh access to a build farm. These functions need\n// configuration.\n//\n// The idea is that eventually, the `meteor` will take only one\n// configuration parameter, the \"universe\" it is talking to, which\n// defaults to \"www.meteor.com\". In a git checkout it can be set by\n// creating a file at the root of the checkout called \"universe\" that\n// contains the name of the universe you wish to use. Then, all other\n// needed configuration is derived from the universe name.\n//\n// We're not quite there yet though:\n// - When developing locally, you may need to set DISCOVERY_PORT (see\n//   getDiscoveryPort below)\n// - DEPLOY_HOSTNAME can still be set to override classic-style\n//   deploys\n// - The update/warehouse system hasn't been touched and still has its\n//   hardcoded URLs for now (update.meteor.com and\n//   warehouse.meteor.com). Really, it's debatable whether these\n//   should (necessarily) change when you change your universe name.\n\nvar universe;\nvar getUniverse = function () {\n  if (! universe) {\n    universe = \"www.meteor.com\";\n\n    if (files.inCheckout()) {\n      var p = files.pathJoin(files.getCurrentToolsDir(), 'universe');\n      if (files.exists(p))\n        universe = files.readFile(p, 'utf8').trim();\n    }\n  }\n\n  return universe;\n};\n\nvar isLocalUniverse = function () {\n  return !! getUniverse().match(/^localhost(:([\\d]+))?$/);\n};\n\nvar localhostOffset = function (portOffset) {\n  var match = getUniverse().match(/^localhost(:([\\d]+))?$/);\n  if (! match)\n    throw new Error(\"not a local universe?\");\n  return \"localhost:\" + (parseInt(match[2] || \"80\") + portOffset);\n};\n\nvar getAuthServiceHost = function () {\n  if (! isLocalUniverse())\n    return universe;\n  else\n    // Special case for local development. Point\n    // $METEOR_CHECKOUT/universe at the place where you are running\n    // frontpage (eg, localhost:3000), and run the accounts server ten\n    // port numbers higher. Like so:\n    //   cd meteor-accounts\n    //   ROOT_URL=http://localhost:3010/auth curmeteor -p 3010\n    return localhostOffset(10);\n};\n\n// Given a hostname, add \"http://\" or \"https://\" as\n// appropriate. (localhost gets http; anything else is always https.)\nvar addScheme = function (host) {\n  if (host.match(/^localhost(:\\d+)?$/))\n    return \"http://\" + host;\n  else\n    return \"https://\" + host;\n};\n\nvar config = exports;\n_.extend(exports, {\n  // True if this the production universe (www.meteor.com)\n  isProduction: function () {\n    return getUniverse() === \"www.meteor.com\";\n  },\n\n  // The current universe name. Should be used for cosmetic purposes\n  // only (displaying to the user). If you want to programmatically\n  // derive configuration from it, add a new method to this file.\n  getUniverse: function () {\n    return getUniverse();\n  },\n\n  // Base URL for Meteor Accounts OAuth services, typically\n  // \"https://www.meteor.com/oauth2\". Endpoints include /authorize and\n  // /token.\n  getOauthUrl: function () {\n    return addScheme(getAuthServiceHost()) + \"/oauth2\";\n  },\n\n  // Base URL for Meteor Accounts API, typically\n  // \"https://www.meteor.com/api/v1\". Endpoints include '/login' and\n  // '/logoutById'.\n  getAccountsApiUrl: function () {\n    return addScheme(getAuthServiceHost()) + \"/api/v1\";\n  },\n\n  // URL for the DDP interface to Meteor Accounts, typically\n  // \"https://www.meteor.com/auth\". (Really should be a ddp:// URL --\n  // we'll get there soon enough.)\n  getAuthDDPUrl: function () {\n    return addScheme(getAuthServiceHost()) + \"/auth\";\n  },\n\n  // URL for the DDP interface to the meteor build farm, typically\n  // \"https://build.meteor.com\".\n  getBuildFarmUrl: function () {\n    if (process.env.METEOR_BUILD_FARM_URL)\n      return process.env.METEOR_BUILD_FARM_URL;\n    var host = config.getBuildFarmDomain();\n\n    return addScheme(host);\n  },\n\n  getBuildFarmDomain: function () {\n    if (process.env.METEOR_BUILD_FARM_URL) {\n      var parsed = url.parse(process.env.METEOR_BUILD_FARM_URL);\n      return parsed.host;\n    } else {\n      return getUniverse().replace(/^www\\./, 'build.');\n    }\n  },\n\n  // URL for the DDP interface to the package server, typically\n  // \"https://packages.meteor.com\". (Really should be a ddp:// URL --\n  // we'll get there soon enough.)\n  //\n  // When running everything locally, run the package server at the\n  // base universe port number (that is, the Meteor Accounts port\n  // number) plus 20.\n  getPackageServerUrl: function () {\n    if (process.env.METEOR_PACKAGE_SERVER_URL)\n      return process.env.METEOR_PACKAGE_SERVER_URL;\n    var host = config.getPackageServerDomain();\n\n    return addScheme(host);\n  },\n\n  getPackageServerDomain: function () {\n    if (isLocalUniverse()) {\n      return localhostOffset(20);\n    } else {\n      if (process.env.METEOR_PACKAGE_SERVER_URL) {\n        var parsed = url.parse(process.env.METEOR_PACKAGE_SERVER_URL);\n        return parsed.host;\n      } else {\n        return getUniverse().replace(/^www\\./, 'packages.');\n      }\n    }\n  },\n\n  getTestPackageServerUrl: function () {\n    if (isLocalUniverse()) {\n      return localhostOffset(20);\n    } else {\n      return addScheme(getUniverse().replace(/^www\\./, 'test-packages.'));\n    }\n  },\n\n  getPackageStatsServerUrl: function () {\n    if (process.env.METEOR_PACKAGE_STATS_SERVER_URL) {\n      return process.env.METEOR_PACKAGE_STATS_SERVER_URL;\n    }\n\n    var host = config.getPackageStatsServerDomain();\n    return addScheme(host);\n  },\n\n  getPackageStatsServerDomain: function () {\n    if (process.env.METEOR_PACKAGE_STATS_SERVER_URL) {\n      return url.parse(process.env.METEOR_PACKAGE_STATS_SERVER_URL).hostname;\n    }\n\n    if (isLocalUniverse()) {\n      return localhostOffset(30);\n    } else {\n      return getUniverse().replace(/^www\\./, 'activity.');\n    }\n  },\n\n  // Note: this is NOT guaranteed to return a distinct prefix for every\n  // conceivable URL.  But it sure ought to return a distinct prefix for every\n  // server we actually use.\n  getPackageServerFilePrefix: function (serverUrl) {\n    var self = this;\n    if (!serverUrl) serverUrl = self.getPackageServerUrl();\n\n    // Chop off http:// and https:// and trailing slashes.\n    serverUrl = serverUrl.replace(/^\\https:\\/\\//, '');\n    serverUrl = serverUrl.replace(/^\\http:\\/\\//, '');\n    serverUrl = serverUrl.replace(/\\/+$/, '');\n\n    // Chop off meteor.com.\n    serverUrl = serverUrl.replace(/\\.meteor\\.com$/, '');\n\n    // Replace other weird stuff with X.\n    serverUrl = serverUrl.replace(/[^a-zA-Z0-9.-]/g, 'X');\n\n    return serverUrl;\n  },\n\n  getPackagesDirectoryName: function (serverUrl) {\n    var self = this;\n\n    var prefix = config.getPackageServerFilePrefix(serverUrl);\n    if (prefix !== 'packages') {\n      prefix = files.pathJoin('packages-from-server', prefix);\n    }\n\n    return prefix;\n  },\n\n  getLocalPackageCacheFilename: function (serverUrl) {\n    var self = this;\n    var prefix = self.getPackageServerFilePrefix(serverUrl);\n\n    // Should look like 'packages.data.db' in the default case\n    // (packages.data.json before 0.9.4).\n    return prefix + \".data.db\";\n  },\n\n  getPackageStorage: function (options) {\n    var self = this;\n    options = options || {};\n    var root = options.root || tropohouse.default.root;\n    return files.pathJoin(root, \"package-metadata\", \"v2.0.1\",\n                     self.getLocalPackageCacheFilename(options.serverUrl));\n  },\n\n  getIsopacketRoot: function () {\n    if (files.inCheckout()) {\n      return files.pathJoin(files.getCurrentToolsDir(), '.meteor', 'isopackets');\n    } else {\n      return files.pathJoin(files.getCurrentToolsDir(), 'isopackets');\n    }\n  },\n\n  // Return the domain name of the current Meteor Accounts server in\n  // use. This is used as a key for storing your Meteor Accounts\n  // login token.\n  getAccountsDomain: function () {\n    return getUniverse();\n  },\n\n  getDeployHostname: function () {\n    return process.env.DEPLOY_HOSTNAME || \"meteor.com\";\n  },\n\n  getFullAppName: function(appName) {\n    var domain = process.env.DEPLOY_DOMAIN || this.getDeployHostname();\n    if (appName.indexOf(\".\") === -1) {\n      return appName + \".\" + domain;\n    }\n    return appName; \n  },\n\n  // Deploy URL for MDG free hosting, eg 'https://deploy.meteor.com'.\n  getDeployUrl: function () {\n    var host;\n\n    // Support the old DEPLOY_HOSTNAME environment variable for a\n    // while longer. Soon, let's remove this in favor of the universe\n    // scheme.\n    if (process.env.DEPLOY_HOSTNAME) {\n      host = process.env.DEPLOY_HOSTNAME;\n      if (host.match(/^http/))\n        return host; // allow it to contain a URL scheme\n    } else {\n      // Otherwise, base it on the universe.\n      if (isLocalUniverse())\n        throw new Error(\"local development of deploy server not supported\");\n      else\n        host = getUniverse().replace(/^www\\./, 'deploy.');\n    }\n\n    return addScheme(host);\n  },\n\n  // URL from which the update manifest may be fetched, eg\n  // 'https://update.meteor.com/manifest.json'\n  getUpdateManifestUrl: function () {\n    if (isLocalUniverse())\n      u = \"www.meteor.com\"; // localhost can't run the manifest server\n    var host = getUniverse().replace(/^www\\./, 'update.');\n\n    return addScheme(host) + \"/manifest.json\";\n  },\n\n  // Path to file that contains our credentials for any services that\n  // we're logged in to. Typically .meteorsession in the user's home\n  // directory.\n  getSessionFilePath: function () {\n    // METEOR_SESSION_FILE is for automated testing purposes only.\n    return process.env.METEOR_SESSION_FILE ||\n      files.pathJoin(files.getHomeDir(), '.meteorsession');\n  },\n\n  // Port to use when querying URLs for the deploy server that backs\n  // them, and for querying oauth clients for their oauth information\n  // (so we can log into them).\n  //\n  // In production this should always be 443 (we *must*\n  // cryptographically authenticate the server answering the query),\n  // but this can be inconvenient for local development since 443 is a\n  // privileged port, so you can set DISCOVERY_PORT to override. (A\n  // better solution would probably be to spin up a local VM.)\n  getDiscoveryPort: function () {\n    if (process.env.DISCOVERY_PORT)\n      return parseInt(process.env.DISCOVERY_PORT);\n    else\n      return 443;\n  },\n\n  // It's easy to forget that you're in an alternate universe (and\n  // that that is the reason you're not seeing your deploys). If not\n  // in production mode, print a quick hint about the universe you're\n  // in.\n  printUniverseBanner: function () {\n    if (! config.isProduction())\n      process.stderr.write('[Universe: ' + config.getUniverse() + ']\\n');\n  }\n});\n"]}