{"version":3,"sources":["/tools/meteor-services/stats.js"],"names":[],"mappings":"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","file":"tools/meteor-services/stats.js.map","sourcesContent":["var Fiber = require(\"fibers\");\nvar _ = require(\"underscore\");\n\nvar config = require('./config.js');\nvar files = require('../fs/files.js');\nvar auth = require('./auth.js');\nvar ServiceConnection = require('./service-connection.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar Console = require('../console/console.js').Console;\n\n// The name of the package that you add to your app to opt out of\n// sending stats.\nvar OPT_OUT_PACKAGE_NAME = \"package-stats-opt-out\";\n\n// Return a list of packages used by this app, both directly and\n// indirectly. Formatted as a list of objects with 'name', 'version'\n// and 'direct', which is how the `recordAppPackages` method on the\n// stats server expects to get this list.\nvar packageList = function (projectContext) {\n  var versions = [];\n  projectContext.packageMap.eachPackage(function (name, info) {\n    versions.push({\n      name: name,\n      version: info.version,\n      local: info.kind === 'local',\n      direct: !! projectContext.projectConstraintsFile.getConstraint(name)\n    });\n  });\n  return versions;\n};\n\n// Options:\n// - what: one of \"sdk.bundle\", \"sdk.deploy\", \"sdk.run\".\n// - projectContext: the ProjectContext. prepareProjectForBuild\n//   must have run successfully. We must extract all necessary data\n//   from this before yielding.\n// - site: If it's a deploy, the name of the site (\"foo.meteor.com\") that we're\n//   deploying to.\nvar recordPackages = function (options) {\n  // Before doing anything, look at the app's dependencies to see if the\n  // opt-out package is there; if present, we don't record any stats.\n  var packages = packageList(options.projectContext);\n  if (_.findWhere(packages, { name: OPT_OUT_PACKAGE_NAME })) {\n    // Print some output for the 'report-stats' self-test.\n    if (process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n      process.stdout.write(\"PACKAGE STATS NOT SENT\\n\");\n    }\n    return;\n  }\n\n  var appIdentifier = options.projectContext.appIdentifier;\n\n  // We do this inside a new fiber to avoid blocking anything on talking\n  // to the package stats server. If we can't connect, for example, we\n  // don't care; we'll just miss out on recording these packages.\n  // This also gives it its own buildmessage state.\n  // However, we do make sure to have already extracted the package list from\n  // projectContext, since it might mutate out from under us otherwise.\n  Fiber(function () {\n\n    var details = {\n      what: options.what,\n      userAgent: httpHelpers.getUserAgent(),\n      sessionId: auth.getSessionId(config.getAccountsDomain()),\n      site: options.site\n    };\n\n    try {\n      var conn = connectToPackagesStatsServer();\n      var accountsConfiguration = auth.getAccountsConfiguration(conn);\n\n      if (auth.isLoggedIn()) {\n        try {\n          auth.loginWithTokenOrOAuth(\n            conn,\n            accountsConfiguration,\n            config.getPackageStatsServerUrl(),\n            config.getPackageStatsServerDomain(),\n            \"package-stats-server\"\n          );\n        } catch (err) {\n          // Do nothing. If we can't log in, we should continue and report\n          // stats anonymously.\n          //\n          // We log other errors with `logErrorIfInCheckout`, but login\n          // errors can happen in normal operation when nothing is wrong\n          // (e.g. login token expired or revoked) so we don't log them.\n        }\n      }\n\n      var result = conn.call(\"recordAppPackages\",\n                             appIdentifier,\n                             packages,\n                             details);\n\n      // If the stats server sent us a new session, save it for use on\n      // subsequent requests.\n      if (result && result.newSessionId) {\n        auth.setSessionId(config.getAccountsDomain(), result.newSessionId);\n      }\n\n      if (process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n        // Print some output for the 'report-stats' self-test.\n        process.stdout.write(\"PACKAGE STATS SENT\\n\");\n      }\n    } catch (err) {\n      logErrorIfInCheckout(err);\n      // Do nothing. A failure to record package stats shouldn't be\n      // visible to the end user and shouldn't affect whatever command\n      // they are running.\n    } finally {\n      conn && conn.close();\n    }\n  }).run();\n};\n\nvar logErrorIfInCheckout = function (err) {\n  if (files.inCheckout() || process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n    Console.warn(\"Failed to record package usage.\");\n    Console.warn(\n      \"(This error is hidden when you are not running Meteor from a\",\n      \"checkout.)\");\n    var printErr = err.stack || err;\n    Console.rawWarn(printErr + \"\\n\");\n    Console.warn();\n    Console.warn();\n  }\n};\n\n// Used in a test (and can only be used against the testing packages\n// server) to fetch one package stats entry for a given application.\nvar getPackagesForAppIdInTest = function (projectContext) {\n  var conn = connectToPackagesStatsServer();\n  var result;\n  try {\n    result = conn.call(\n      \"getPackagesForAppId\",\n      projectContext.appIdentifier);\n    if (result && result.details) {\n      result.details.packages = _.sortBy(result.details.packages, \"name\");\n    }\n  } finally {\n    conn.close();\n  }\n\n  return result;\n};\n\nvar connectToPackagesStatsServer = function () {\n  return new ServiceConnection(\n    config.getPackageStatsServerUrl(),\n    {_dontPrintErrors: true}\n  );\n};\n\nexports.recordPackages = recordPackages;\nexports.packageList = packageList; // for use in the \"stats\" self-test.\nexports.getPackagesForAppIdInTest = getPackagesForAppIdInTest;\n"]}