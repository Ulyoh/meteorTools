{"version":3,"sources":["/tools/inspector.js"],"names":[],"mappings":"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","file":"tools/inspector.js.map","sourcesContent":["var assert = require(\"assert\");\nvar net = require(\"net\");\nvar inspector = require(\"node-inspector\");\nvar spawn = require(\"child_process\").spawn;\nvar _ = require(\"underscore\");\nvar chalk = require(\"chalk\");\nvar EOL = require(\"os\").EOL;\nvar Protocol = require(\"_debugger\").Protocol;\nvar debugEntries = [];\n\n// There can be only one debugger attached to a process at a time, and\n// detaching can leave the child process in a weird state for future\n// debugging, so the code that attaches to the child process must also\n// serve as a proxy for connections from actual debugger clients like\n// node-inspector.\n\n// This proxying system requires the child process to be invoked with\n// --debug-brk=<port> where <port> is not the same as debugPort, so that\n// we can proxy data between <port> and debugPort, as if the child process\n// were listening on debugPort (as it did before this commit).\n\n// The first time the server starts, the --debug-brk behavior of pausing\n// at the first line of the program is helpful so that the user can set\n// breakpoints. When the server restarts, however, that behavior is more\n// confusing than helpful, especially since the server can restart\n// multiple times in quick succession if the user edits and saves a file\n// multiple times. To avoid this confusion, we use the proxy to send a\n// continue command to resume execution automatically after restart.\n\n// Itercepting debugger requests, responses, events, etc. has the\n// additional benefit of allowing us to print helpful information to the\n// console, like notifying the developer that the debugger hit a\n// breakpoint, so that there is less confusion when the app is not\n// responding to requests.\n\nfunction start(debugPort, entryPoint) {\n  debugPort = +(debugPort || 5858);\n\n  var entry = debugEntries[debugPort];\n  if (entry instanceof DebugEntry) {\n    return entry.attach;\n  }\n\n  debugEntries[debugPort] = entry =\n    new DebugEntry(debugPort, entryPoint);\n\n  return entry.attach;\n}\n\nfunction DebugEntry(debugPort, entryPoint) {\n  assert.ok(this instanceof DebugEntry);\n\n  this.debugPort = debugPort;\n  this.entryPoint = entryPoint;\n  this.incomingSink = new BackloggedStreamWriter;\n  this.outgoingSink = new BackloggedStreamWriter;\n  this.inspectorProcess = null;\n  this.interceptServer = null;\n  this.debugConnection = null;\n  this.connectCount = 0;\n  this.attach = this.attach.bind(this);\n\n  // We create a connection to whatever port the child process says it's\n  // listening on, so this port is purely advisory.\n  this.attach.suggestedDebugBrkPort = debugPort + 101;\n}\n\nvar DEp = DebugEntry.prototype;\n\nDEp.attach = function attach(child) {\n  this.incomingSink.clear();\n  this.outgoingSink.clear();\n\n  this.startInterceptServer();\n  this.startInspector();\n  this.connectToChildProcess(child);\n};\n\n// The intercept server listens for connections and data from\n// node-inspector (on debugPort) and mediates communication between\n// node-inspector and the child process that we're debugging, so that we\n// can inject our own commands (e.g. \"continue\") and print helpful\n// information to the console when the debugger hits breakpoints. Note\n// that the intercept server survives server restarts, just like\n// node-inspector.\nDEp.startInterceptServer = function startInterceptServer() {\n  var self = this;\n  if (self.interceptServer) {\n    return;\n  }\n\n  self.interceptServer = net.createServer(function(socket) {\n    self.outgoingSink.setTarget(socket);\n    socket.on(\"data\", function(buffer) {\n      self.incomingSink.write(buffer);\n    });\n  }).on(\"error\", function(err) {\n    self.interceptServer = null;\n  }).listen(self.debugPort);\n};\n\nDEp.startInspector = function startInspector() {\n  var self = this;\n  if (self.inspectorProcess) {\n    return;\n  }\n\n  // Port 8080 is the default port that node-inspector uses for its web\n  // server, and port 5858 is the default port that node listens on when\n  // it receives the --debug or --debug-brk flags. Developers familiar\n  // with node-inspector may have http://localhost:8080/debug?port=5858\n  // saved in their browser history already, so let's stick with these\n  // conventions in the default case (unless of course the developer runs\n  // `meteor debug --debug-port <some other port>`).\n  var debugPort = self.debugPort;\n  var webPort = 8080 + debugPort - 5858;\n\n  var proc = spawn(process.execPath, [\n    require.resolve(\"node-inspector/bin/inspector\"),\n    \"--web-port\", \"\" + webPort,\n    \"--debug-port\", \"\" + debugPort\n  ]);\n\n  proc.url = inspector.buildInspectorUrl(\"localhost\", webPort, debugPort);\n\n  // Forward error output to process.stderr, but silence normal output.\n  // proc.stdout.pipe(process.stdout);\n  proc.stderr.pipe(process.stderr);\n\n  proc.on(\"exit\", function(code) {\n    // Restart the process if it died without us explicitly stopping it.\n    if (self.inspectorProcess === proc) {\n      self.inspectorProcess = null;\n      self.startInspector();\n    }\n  });\n\n  self.inspectorProcess = proc;\n};\n\nDEp.connectToChildProcess = function connectToChildProcess(child) {\n  var self = this;\n\n  // Wait for the child process to tell us it's listening on a certain\n  // port (not debugPort!), and create a connection to that port so that\n  // the child process can communicate with node-inspector.\n  child.stderr.on(\"data\", function onData(buffer) {\n    var match = /debugger listening on port (\\d+)/\n      .exec(buffer.toString(\"utf8\"));\n    if (match) {\n      child.stderr.removeListener(\"data\", onData);\n      connect(+match[1]);\n    }\n  });\n\n  function connect(port) {\n    disconnect();\n\n    self.debugConnection = net.createConnection(port);\n    self.debugConnection.setEncoding(\"utf8\");\n    self.debugConnection.on(\"data\", function(buffer) {\n      protocol.execute(buffer);\n      self.outgoingSink.write(buffer);\n    }).on(\"error\", disconnect);\n\n    var protocol = new Protocol;\n    protocol.onResponse = function onResponse(res) {\n      // Listen for break events so that we can either skip them or print\n      // information to the console about them.\n      if (res.body.type === \"event\" &&\n          res.body.event === \"break\") {\n        var scriptName = res.body.body.script.name;\n        var lineNumber = res.body.body.sourceLine + 1;\n\n        if (self.connectCount > 1 &&\n            scriptName === self.entryPoint) {\n          // If we've restarted the server at least once and the break\n          // event occurred in the entry point file (typically\n          // .meteor/local/build/main.js), send a continue command to skip\n          // this breakpoint automatically, so that the user does not have\n          // to keep manually continuing the debugger every time the\n          // server restarts.\n          sendContinue();\n\n        } else {\n          // Give some indication in the console that server execution has\n          // stopped at a breakpoint.\n          process.stdout.write(\n            \"Paused at \" + scriptName + \":\" + lineNumber + \"\\n\"\n          );\n        }\n      }\n    };\n\n    var sentContinue = false;\n    function sendContinue() {\n      if (! sentContinue) {\n        sentContinue = true;\n        self.incomingSink.write(protocol.serialize({\n          command: \"continue\"\n        }));\n      }\n    }\n\n    if (self.connectCount++ === 0) {\n      process.stdout.write(banner(self.debugPort));\n    } else {\n      // Sometimes (for no good reason) the protocol.onResponse handler\n      // never receives a break event at the very beginning of the\n      // program. This timeout races against that break event to make sure\n      // we send exactly one continue command.\n      setTimeout(sendContinue, 500);\n    }\n\n    self.incomingSink.setTarget(self.debugConnection);\n  }\n\n  function disconnect() {\n    if (self.debugConnection) {\n      self.debugConnection.end();\n      self.debugConnection = null;\n    }\n  }\n};\n\nDEp.stop = function stop() {\n  var proc = this.inspectorProcess;\n  if (proc && proc.kill) {\n    this.inspectorProcess = null;\n    proc.kill();\n  }\n\n  if (this.interceptServer) {\n    this.interceptServer.close();\n    this.interceptServer = null;\n  }\n\n  if (this.debugConnection) {\n    this.debugConnection.end();\n    this.debugConnection = null;\n  }\n};\n\n// A simple wrapper object for writable streams that keeps a backlog of\n// data written before the stream is available, and writes that data to the\n// stream when the stream becomes available.\nfunction BackloggedStreamWriter(target) {\n  assert.ok(this instanceof BackloggedStreamWriter);\n  this.backlog = [];\n  this.target = target || null;\n}\n\nvar BSWp = BackloggedStreamWriter.prototype;\n\nBSWp.write = function write(buffer) {\n  if (this.target) {\n    this.target.write(buffer);\n  } else {\n    this.backlog.push(buffer);\n  }\n};\n\nBSWp.setTarget = function setTarget(target) {\n  if (this.target &&\n      this.target !== target) {\n    this.clear();\n  }\n\n  this.target = target;\n\n  if (target) {\n    var clear = this.clear.bind(this);\n    target.on(\"close\", clear);\n    target.on(\"end\", clear);\n\n    if (this.backlog.length > 0) {\n      _.each(this.backlog.splice(0), this.write, this);\n    }\n  }\n\n  return target;\n};\n\nBSWp.clear = function clear() {\n  this.backlog.length = 0;\n  this.target = null;\n};\n\nfunction banner(debugPort) {\n  debugPort = +(debugPort || 5858);\n  var entry = debugEntries[debugPort];\n  var proc = entry && entry.inspectorProcess;\n  assert.strictEqual(typeof proc.url, \"string\");\n\n  return [\n    \"\",\n    chalk.green([\n      \"Your application is now paused and ready for debugging!\",\n      \"\",\n      \"To debug the server process using a graphical debugging interface, \",\n      \"visit this URL in your web browser:\"\n    ].join(EOL)),\n    chalk.cyan(proc.url),\n    EOL\n  ].join(EOL);\n}\n\nfunction stop(debugPort) {\n  debugPort = +(debugPort || 5858);\n  var entry = debugEntries[debugPort];\n  delete debugEntries[debugPort];\n  if (entry) {\n    entry.stop();\n  }\n}\n\nrequire('./tool-env/cleanup.js').onExit(function killAll() {\n  for (var debugPort in debugEntries) {\n    stop(debugPort);\n  }\n  debugEntries.length = 0;\n});\n\nexports.start = start;\nexports.stop = stop;\n"]}