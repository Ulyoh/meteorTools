{"version":3,"sources":["/tools/tool-testing/galaxy-utils.js"],"names":[],"mappings":"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","file":"tools/tool-testing/galaxy-utils.js.map","sourcesContent":["var _ = require('underscore');\nvar process = require('process');\nvar selftest = require('../tool-testing/selftest.js');\nvar Run = selftest.Run;\nvar testUtils = require('../tool-testing/test-utils.js');\nvar files = require('../fs/files.js');\nvar utils = require('../utils/utils.js');\nvar authClient = require('../meteor-services/auth-client.js');\nvar auth = require('../meteor-services/auth.js');\n\n// Run curl with the given specifications. Return an instance of Run.\nvar runCurl = function (/*args*/) {\n  var curl = \"/usr/bin/curl\";\n  return new Run(curl, {\n    args: _.toArray(arguments)\n  });\n};\n\n// Some constants.\nvar GALAXY_USERNAME = process.env.GALAXY_USERNAME;\nvar GALAXY_PASSWORD = process.env.GALAXY_PASSWORD;\nvar GALAXY_URL = process.env.DEPLOY_HOSTNAME;\nvar GALAXY_MOCK_MODE = process.env.GALAXY_MOCK_MODE;\n\n// Fail if the test is obviously not set up for using Galaxy.\n//\n// Make sure that we have at least set all of the variables that we need to run\n// against a Galaxy (GALAXY_URL, username & password). An extra safety\n// check to avoid strange errors, deploying/calling random methods on Mother,\n// etc.\nexports.sanityCheck = selftest.markStack(function () {\n  if (! GALAXY_URL ) {\n    selftest.fail(\"Please specify a GALAXY_URL to test against Galaxy.\\n\");\n  }\n  if (! GALAXY_USERNAME ||\n      ! GALAXY_PASSWORD) {\n    selftest.fail(\n      \"Can't use test account with Galaxy. \" +\n       \"Please specify GALAXY_USERNAME and GALAXY_PASSWORD.\\n\");\n  }\n  if (! process.env.APP_MONGO) {\n    selftest.fail(\n      \"Please provide an APP_MONGO url to use for deployed apps.\\n\");\n   }\n});\n\n// Login to Galaxy with environment-variable credentials passed in by the user.\n//\n// Unlike the normal `meteor deploy` Galaxy is not yet publically available, so\n// we don't want to use the publically-accessible test account here.\nexports.loginToGalaxy = selftest.markStack(function (sandbox) {\n  var user = GALAXY_USERNAME;\n  var pass = GALAXY_PASSWORD;\n  testUtils.login(sandbox, user, pass);\n});\n\n// Curl an app running on Galaxy. Automatically follow redirects.\n//\n// Dealing with DNS on Galaxy can be complicated. The standard way to ensure\n// that we hit the right app on the right Galaxy is to curl the galaxy origin,\n// with the host header set to our query app.\nexports.curlToGalaxy = selftest.markStack(function (url) {\n  var hostHeader = \"host: \" + url;\n  var galaxyOrigin = GALAXY_URL;\n  return runCurl(\"-vLH\", hostHeader, galaxyOrigin);\n});\n\n// String we expect to hit on 200 OK.\nexports.httpOK = \"HTTP/1.1 200 OK\";\n\n// String we expect to hit when using SSL.\nexports.httpRedirect = \"HTTP/1.1 307 Temporary Redirect\";\n\n// We expect containers to take some time to startup.\n//\n// In the future, we can use this function to poll whether the containers have\n// started and maybe our tests will be faster.\nexports.waitForContainers = selftest.markStack(function () {\n  // We are not spinning up any containers in mock mode, so don't wait too long.\n  var waitTime = GALAXY_MOCK_MODE ? 1000 : 1000 * 10 * utils.timeoutScaleFactor;\n  utils.sleepMs(waitTime);\n});\n\n// Deploy an app against a Galaxy\n//\n// When we deploy to Galaxy, we need to specify a Mongo URL and wait a little\n// longer for the app to spin up.\n//\n// Options:\n//   - settings: app settings, NOT including mandatory galaxy settings\n//     such as MONGO_URL\n//   - appName: app name to use; will be generated randomly if not\n//     provided\n//   - templateApp: the name of the template app to use. defaults to\n//    'simple-app'\n//   - useOldSettings: don't make a new settings object this app! This is a\n//     redeploy, so reuse the settings that Galaxy has saved.\n//\nexports.createAndDeployApp =  selftest.markStack(function (sandbox, options) {\n  options = options || {};\n  var settings = options.settings;\n  var appName = options.appName || testUtils.randomAppName();\n\n  // The simple app contains standart app packages and some small bits of code\n  // so that we can check that it is being served correctly. Let's use that as\n  // our default.\n  var templateApp = options.templateApp || 'simple-app';\n\n  // Create the new galaxy settings.\n  var galaxySettings = {\n    \"galaxy.meteor.com\" : {\n      env: {\n        // XXX: Right now, all the galaxy test apps use the same mongo. This is\n        // actually kind of super awkward... but generating and destroying new DBs\n        // seems like it is introducing a bit too much complexity at this stage.\n        \"MONGO_URL\": process.env.APP_MONGO\n      }\n    }\n  };\n\n  var fullAppName;\n  if (! options.useOldSettings) {\n    // Add all the settings together and write them out. Let user settings\n    // override ours.\n    var allSettings = _.extend(galaxySettings, settings);\n    var settingsFile = \"settings-\" + appName + \".json\";\n    sandbox.write(settingsFile, JSON.stringify(allSettings));\n\n    fullAppName = testUtils.createAndDeployApp(sandbox, {\n      settingsFile: \"../\" + settingsFile,\n      appName: appName,\n      templateApp: templateApp\n    });\n  } else {\n    fullAppName = testUtils.createAndDeployApp(sandbox, {\n      appName: appName,\n      templateApp: templateApp\n    });\n  }\n\n  // Galaxy might take a while to spin up an app.\n  exports.waitForContainers();\n\n  return fullAppName;\n\n});\n\n// Cleanup the app by deleting it from Galaxy.\n//\n// XXX: We should also clean out its Mongo, but we don't, since, currently, none\n// of our apps actually put any records into it.\nexports.cleanUpApp = selftest.markStack(function (sandbox, appName) {\n  testUtils.cleanUpApp(sandbox, appName);\n\n  // Galaxy might take a while to spin up an app, though it should be fairly\n  // quick.\n  exports.waitForContainers();\n});\n\n//////////////////////////////////////////////////////////////////////////////\n//  We want to test some of the server-side functionality that doesn't actually\n//  have a command-line API right now. Below functionas are going to use the\n//  tool's ability to make a DDP client and connect to the server to call\n//  methods directly.\n////////////////////////////////////////////////////////////////////////////////\n\n// Returns a logged in connection to GalaxyAPI\nexports.loggedInGalaxyAPIConnection = selftest.markStack(function () {\n  // The credentials of the user might not be the credentials of the galaxytester.\n  auth.doInteractivePasswordLogin({\n    username: GALAXY_USERNAME,\n    password: GALAXY_PASSWORD\n  });\n  var galaxyDomain = GALAXY_URL;\n  var galaxyUrl = (GALAXY_MOCK_MODE ? \"http://\" : \"https://\") + galaxyDomain;\n  return authClient.loggedInConnection(\n    galaxyUrl,\n    galaxyDomain,\n    \"galaxy-api\"\n  );\n});\n\n// If the connection has disconnected, close it and open a new one. (workaround\n// for the fact that connections in the tool do not reconnect)\nexports.renewConnection = selftest.markStack(function (conn) {\n  if (!conn.connected) {\n    conn.close();\n    conn = exports.loggedInGalaxyAPIConnection();\n  }\n  return conn;\n});\n\n// Given a connection, makes a call to Galaxy API.\nexports.callGalaxyAPI = function (conn, ...args) {\n  conn = exports.renewConnection(conn);\n  return conn.call(...args);\n};\n\n// Gets app record from Galaxy API by name.\n//\n// This method will create and manage its own connection.\nexports.getAppRecordByName = selftest.markStack(function (appName) {\n  var conn = exports.loggedInGalaxyAPIConnection();\n  var appRecord = {};\n  conn.connection.registerStore('app', {\n    update: function (msg) {\n      if (msg.msg === 'added' && msg.fields &&\n          msg.fields.hostname === appName) {\n        appRecord = _.extend({ _id: msg.id }, msg.fields);\n      }\n    }\n  });\n  conn.subscribeAndWait(\"/app\", appName);\n  // If we can't find the app, fail the test right now.\n  if (_.isEmpty(appRecord)) {\n    selftest.fail(\"Cannot find app: \", appName);\n  }\n  conn.close();\n  return appRecord;\n});\n\n\n// Get container statuses for the given app ID.\n//\n// This method will create and manage its own connection.\nexports.getAppContainerStatuses = selftest.markStack(function (appId, appName) {\n  var conn = exports.loggedInGalaxyAPIConnection();\n\n  var containers = [];\n  var statuses = \"/app/containerStatuses\";\n  conn.connection.registerStore(statuses, {\n    update: function (msg) {\n      if (msg.msg === 'added' && msg.fields &&\n          msg.fields.appId === appId) {\n        containers.push(_.extend({ _id: msg.id }, msg.fields));\n      }\n    }\n  });\n  conn.subscribeAndWait(statuses, appName);\n  conn.close();\n  return containers;\n});\n\n// Close and logout.\nexports.closeGalaxyConnection = selftest.markStack(function (conn) {\n  auth.logoutCommand();\n  conn.close();\n});\n\n\n// Ignore HTTP checks in mock mode\nexports.ignoreHttpChecks = selftest.markStack(function () {\n  return !! GALAXY_MOCK_MODE;\n});\n"]}