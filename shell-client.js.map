{"version":3,"sources":["/tools/shell-client.js"],"names":[],"mappings":"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","file":"tools/shell-client.js.map","sourcesContent":["var assert = require(\"assert\");\nvar fs = require(\"fs\");\nvar net = require(\"net\");\nvar eachline = require(\"eachline\");\nvar chalk = require(\"chalk\");\nvar EOL = require(\"os\").EOL;\nvar server = require('./static-assets/server/shell-server.js');\nvar EXITING_MESSAGE = server.EXITING_MESSAGE;\nvar getInfoFile = server.getInfoFile;\n\n// Invoked by the process running `meteor shell` to attempt to connect to\n// the server via the socket file.\nexports.connect = function connect(shellDir) {\n  new Client(shellDir).connect();\n};\n\nfunction Client(shellDir) {\n  var self = this;\n  assert.ok(self instanceof Client);\n\n  self.shellDir = shellDir;\n  self.exitOnClose = false;\n  self.firstTimeConnecting = true;\n  self.connected = false;\n  self.reconnectCount = 0;\n}\n\nvar Cp = Client.prototype;\n\nCp.reconnect = function reconnect(delay) {\n  var self = this;\n\n  // Display the \"Server unavailable\" warning only on the third attempt\n  // to reconnect, so it doesn't get shown for successful reconnects.\n  if (++self.reconnectCount === 3) {\n    console.error(chalk.yellow(\n      \"Server unavailable (waiting to reconnect)\"\n    ));\n  }\n\n  if (!self.reconnectTimer) {\n    self.reconnectTimer = setTimeout(function() {\n      delete self.reconnectTimer;\n      self.connect();\n    }, delay || 100);\n  }\n};\n\nCp.connect = function connect() {\n  var self = this;\n  var infoFile = getInfoFile(self.shellDir);\n\n  fs.readFile(infoFile, \"utf8\", function(err, json) {\n    if (err) {\n      return self.reconnect();\n    }\n\n    try {\n      var info = JSON.parse(json);\n    } catch (err) {\n      return self.reconnect();\n    }\n\n    if (info.status !== \"enabled\") {\n      if (self.firstTimeConnecting) {\n        return self.reconnect();\n      }\n\n      if (info.reason) {\n        console.error(info.reason);\n      }\n\n      console.error(EXITING_MESSAGE);\n      process.exit(0);\n    }\n\n    self.setUpSocket(\n      net.connect(info.port, \"127.0.0.1\"),\n      info.key\n    );\n  });\n};\n\nCp.setUpSocket = function setUpSocket(sock, key) {\n  var self = this;\n  self.sock = sock;\n\n  // Put STDIN into \"flowing mode\":\n  // http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\n  process.stdin.resume();\n\n  function onConnect() {\n    self.firstTimeConnecting = false;\n    self.reconnectCount = 0;\n    self.connected = true;\n\n    // Sending a JSON-stringified options object (even just an empty\n    // object) over the socket is required to start the REPL session.\n    sock.write(JSON.stringify({\n      terminal: ! process.env.EMACS,\n      key: key\n    }));\n\n    process.stderr.write(shellBanner());\n    process.stdin.pipe(sock);\n    if (process.stdin.setRawMode) { // https://github.com/joyent/node/issues/8204\n      process.stdin.setRawMode(true);\n    }\n  }\n\n  function onClose() {\n    tearDown();\n\n    // If we received the special EXITING_MESSAGE just before the socket\n    // closed, then exit the shell instead of reconnecting.\n    if (self.exitOnClose) {\n      process.exit(0);\n    } else {\n      self.reconnect();\n    }\n  }\n\n  function onError(err) {\n    tearDown();\n    self.reconnect();\n  }\n\n  function tearDown() {\n    self.connected = false;\n    if (process.stdin.setRawMode) { // https://github.com/joyent/node/issues/8204\n      process.stdin.setRawMode(false);\n    }\n    process.stdin.unpipe(sock);\n    sock.unpipe(process.stdout);\n    sock.removeListener(\"connect\", onConnect);\n    sock.removeListener(\"close\", onClose);\n    sock.removeListener(\"error\", onError);\n    sock.end();\n  }\n\n  sock.pipe(process.stdout);\n\n  eachline(sock, \"utf8\", function(line) {\n    self.exitOnClose = line.indexOf(EXITING_MESSAGE) >= 0;\n  });\n\n  sock.on(\"connect\", onConnect);\n  sock.on(\"close\", onClose);\n  sock.on(\"error\", onError);\n};\n\nfunction shellBanner() {\n  var bannerLines = [\n    \"\",\n    \"Welcome to the server-side interactive shell!\"\n  ];\n\n  if (! process.env.EMACS) {\n    // Tab completion sadly does not work in Emacs.\n    bannerLines.push(\n      \"\",\n      \"Tab completion is enabled for global variables.\"\n    );\n  }\n\n  bannerLines.push(\n    \"\",\n    \"Type .reload to restart the server and the shell.\",\n    \"Type .exit to disconnect from the server and leave the shell.\",\n    \"Type .help for additional help.\",\n    EOL\n  );\n\n  return chalk.green(bannerLines.join(EOL));\n}\n"]}