{"version":3,"sources":["/tools/packaging/updater.js"],"names":[],"mappings":"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","file":"tools/packaging/updater.js.map","sourcesContent":["var _ = require('underscore');\n\nvar runLog = require('../runners/run-log.js');\nvar catalog = require('./catalog/catalog.js');\nvar archinfo = require('../utils/archinfo.js');\nvar isopack = require('../isobuild/isopack.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar Console = require('../console/console.js').Console;\nvar auth = require('../meteor-services/auth.js');\nvar files = require('../fs/files.js');\n\nvar tropohouse = require('./tropohouse.js');\nvar release = require('./release.js');\nvar packageMapModule = require('./package-map.js');\n\n/**\n * Check to see if an update is available. If so, download and install\n * it before returning.\n *\n * options: showBanner\n */\nvar checkInProgress = false;\nexports.tryToDownloadUpdate = function (options) {\n  options = options || {};\n  // Don't run more than one check simultaneously. It should be\n  // harmless but having two downloads happening simultaneously (and\n  // two sets of messages being printed) would be confusing.\n  if (checkInProgress)\n    return;\n  checkInProgress = true;\n  checkForUpdate(!! options.showBanner, !! options.printErrors);\n  checkInProgress = false;\n};\n\nvar firstCheck = true;\n\nvar checkForUpdate = function (showBanner, printErrors) {\n  // While we're doing background stuff, try to revoke any old tokens in our\n  // session file.\n  auth.tryRevokeOldTokens({ timeout: 15 * 1000 });\n\n  if (firstCheck) {\n    // We want to avoid a potential race condition here, because we run an\n    // update almost immediately at run.  We don't want to drop the resolver\n    // cache; that would be slow.  \"meteor run\" itself should have run a refresh\n    // anyway.  So, the first time, we just skip the remote catalog sync.  But\n    // we do want to do the out-of-date release checks, so we can't just delay\n    // the first update cycle.\n    firstCheck = false;\n  } else {\n    try {\n      catalog.official.refresh();\n    } catch (err) {\n      Console.debug(\"Failed to refresh catalog, ignoring error\", err);\n      return;\n    }\n  }\n\n  if (!release.current.isProperRelease())\n    return;\n\n  updateMeteorToolSymlink(printErrors);\n\n  maybeShowBanners();\n};\n\nvar lastShowTimes = {};\n\nvar shouldShow = function (key, maxAge) {\n  var now = +(new Date);\n\n  if (maxAge === undefined) {\n    maxAge = 12 * 60 * 60 * 1000;\n  }\n\n  var lastShow = lastShowTimes[key];\n  if (lastShow !== undefined) {\n    var age = now - lastShow;\n    if (age < maxAge) {\n      return false;\n    }\n  }\n\n  lastShowTimes[key] = now;\n  return true;\n};\n\nvar maybeShowBanners = function () {\n  var releaseData = release.current.getCatalogReleaseData();\n\n  var banner = releaseData.banner;\n  if (banner) {\n    var bannerDate =\n          banner.lastUpdated ? new Date(banner.lastUpdated) : new Date;\n    if (catalog.official.shouldShowBanner(release.current.name, bannerDate)) {\n      // This banner is new; print it!\n      runLog.log(\"\");\n      runLog.log(banner.text);\n      runLog.log(\"\");\n      catalog.official.setBannerShownDate(release.current.name, bannerDate);\n      return;\n    }\n  }\n\n  // We now consider printing some simpler banners, if this isn't the latest\n  // release. But if the user specified a release manually with --release, we\n  // don't bother: we only want to tell users about ways to update *their app*.\n  if (release.forced)\n    return;\n\n  const catalogUtils = require('./catalog/catalog-utils.js');\n\n  // Didn't print a banner? Maybe we have a patch release to recommend.\n  var track = release.current.getReleaseTrack();\n  var patchReleaseVersion = releaseData.patchReleaseVersion;\n  if (patchReleaseVersion) {\n    var patchRelease = catalog.official.getReleaseVersion(\n      track, patchReleaseVersion);\n    if (patchRelease && patchRelease.recommended) {\n      var patchKey = \"patchrelease-\" + track + \"-\" + patchReleaseVersion;\n      if (shouldShow(patchKey)) {\n        runLog.log(\n          \"=> A patch (\" +\n          catalogUtils.displayRelease(track, patchReleaseVersion) +\n          \") for your current release is available!\");\n        runLog.log(\"   Update this project now with 'meteor update --patch'.\");\n      }\n      return;\n    }\n  }\n\n  // There's no patch (so no urgent exclamation!) but there may be something\n  // worth mentioning.\n  // XXX maybe run constraint solver to change the message depending on whether\n  //     or not it will actually work?\n  var currentReleaseOrderKey = releaseData.orderKey || null;\n  var futureReleases = catalog.official.getSortedRecommendedReleaseVersions(\n    track, currentReleaseOrderKey);\n  if (futureReleases.length) {\n    var futureReleaseKey = \"futurerelease-\" + track + \"-\" + futureReleases[0];\n    if (shouldShow(futureReleaseKey)) {\n      runLog.log(\n        \"=> \" + catalogUtils.displayRelease(track, futureReleases[0]) +\n        \" is available. Update this project with 'meteor update'.\");\n    }\n    return;\n  }\n};\n\n// Update ~/.meteor/meteor to point to the tool binary from the tools of the\n// latest recommended release on the default release track.\nvar updateMeteorToolSymlink = function (printErrors) {\n  // Get the latest release version of METEOR. (*Always* of the default\n  // track, not of whatever we happen to be running: we always want the tool\n  // symlink to go to the default track.)\n  var latestReleaseVersion = catalog.official.getDefaultReleaseVersion();\n  // Maybe you're on some random track with nothing recommended. That's OK.\n  if (!latestReleaseVersion)\n    return;\n\n  var latestRelease = catalog.official.getReleaseVersion(\n    latestReleaseVersion.track, latestReleaseVersion.version);\n  if (!latestRelease)\n    throw Error(\"latest release doesn't exist?\");\n  if (!latestRelease.tool)\n    throw Error(\"latest release doesn't have a tool?\");\n\n  var latestReleaseToolParts = latestRelease.tool.split('@');\n  var latestReleaseToolPackage = latestReleaseToolParts[0];\n  var latestReleaseToolVersion = latestReleaseToolParts[1];\n  var relativeToolPath = tropohouse.default.packagePath(\n    latestReleaseToolPackage, latestReleaseToolVersion, true);\n\n  var localLatestReleaseLink = tropohouse.default.latestMeteorSymlink();\n\n  if (! localLatestReleaseLink.startsWith(relativeToolPath + files.pathSep)) {\n    // The latest release from the catalog is not where the ~/.meteor/meteor\n    // symlink points to. Let's make sure we have that release on disk,\n    // and then update the symlink.\n    var packageMap =\n          packageMapModule.PackageMap.fromReleaseVersion(latestRelease);\n    var messages = buildmessage.capture(function () {\n      tropohouse.default.downloadPackagesMissingFromMap(packageMap);\n    });\n    if (messages.hasMessages()) {\n      // Ignore errors because we are running in the background, uness we\n      // specifically requested to print errors because we are testing this\n      // feature.\n      if (printErrors) {\n        Console.printMessages(messages);\n      }\n      return;\n    }\n\n    var toolIsopack = new isopack.Isopack;\n    toolIsopack.initFromPath(\n      latestReleaseToolPackage,\n      tropohouse.default.packagePath(latestReleaseToolPackage,\n                                     latestReleaseToolVersion));\n    var toolRecord = _.findWhere(toolIsopack.toolsOnDisk,\n                                 {arch: archinfo.host()});\n\n    // XXX maybe we shouldn't throw from this background thing\n    // counter: this is super weird and should never ever happen.\n    if (!toolRecord)\n      throw Error(\"latest release has no tool?\");\n\n    tropohouse.default.linkToLatestMeteor(files.pathJoin(\n      relativeToolPath, toolRecord.path, 'meteor'));\n  }\n};\n"]}