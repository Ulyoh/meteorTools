{"version":3,"sources":["/tools/packaging/warehouse.js"],"names":[],"mappings":"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","file":"tools/packaging/warehouse.js.map","sourcesContent":["// This file is used to access the \"warehouse\" of pre-0.9.0 releases. This code\n// is now legacy, but we keep it around so that you can still use the same\n// `meteor` entry point to run pre-0.9.0 and post-0.9.0 releases, for now. All\n// it knows how to do is download old releases and explain to main.js how to\n// exec them.\n//\n// Because of this, we do have to be careful that the files used by this code\n// and the files used by tropohouse.js (the modern version of the warehouse)\n// don't overlap. tropohouse does not use tools or releases directorys, and\n// while they both have packages directories with similar structures, the\n// version names should not overlap: warehouse versions are SHAs and tropohouse\n// versions are semvers.  Additionally, while they do both use the 'meteor'\n// symlink at the top level, there's no actual code in this file to write that\n// symlink (it was just created by the bootstrap tarball release process).\n\n\n/// We store a \"warehouse\" of tools, releases and packages on\n/// disk. This warehouse is populated from our servers, as needed.\n///\n/// Directory structure:\n///\n///     meteor (relative path symlink to tools/latest/bin/meteor)\n///     tools/ (not in checkout, since we run against checked-out code)\n///       latest/ (relative path symlink to latest VERSION/ tools directory)\n///       VERSION/\n///     releases/\n///       latest (relative path symlink to latest x.y.z.release.json)\n///       x.y.z.release.json\n///       x.y.z.notices.json\n///     packages/\n///       foo/\n///         VERSION/\n///\n/// The warehouse is not used at all when running from a\n/// checkout. Only local packages will be loaded (from\n/// CHECKOUT/packages or within a directory in the PACKAGE_DIRS\n/// environment variable). The setup of that is handled by release.js.\n\nvar os = require(\"os\");\nvar Future = require(\"fibers/future\");\nvar _ = require(\"underscore\");\n\nvar files = require('../fs/files.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\n\nvar WAREHOUSE_URLBASE = 'https://warehouse.meteor.com';\n\nvar warehouse = exports;\n_.extend(warehouse, {\n  // An exception meaning that you asked for a release that doesn't\n  // exist.\n  NoSuchReleaseError: function () {\n  },\n\n  // Return our loaded collection of tools, releases and\n  // packages. If we're running an installed version, found at\n  // $HOME/.meteor.\n  getWarehouseDir: function () {\n    // a hook for tests, or i guess for users.\n    if (process.env.METEOR_WAREHOUSE_DIR)\n      return files.convertToStandardPath(process.env.METEOR_WAREHOUSE_DIR);\n\n    // This function should never be called unless we have a warehouse\n    // (an installed version, or with process.env.METEOR_WAREHOUSE_DIR\n    // set)\n    if (!files.usesWarehouse())\n      throw new Error(\"There's no warehouse in a git checkout\");\n\n    return files.pathJoin(files.getHomeDir(), '.meteor');\n  },\n\n  getToolsDir: function (version) {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'tools', version);\n  },\n\n  getToolsFreshFile: function (version) {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'tools', version, '.fresh');\n  },\n\n  _latestReleaseSymlinkPath: function () {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'releases', 'latest');\n  },\n\n  _latestToolsSymlinkPath: function () {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'tools', 'latest');\n  },\n\n  // Ensure the passed release version is stored in the local\n  // warehouse and return its parsed manifest.\n  //\n  // If 'quiet' is true, don't print anything as we do it.\n  //\n  // Throws:\n  // - files.OfflineError if the release isn't cached locally and we\n  //   are offline.\n  // - warehouse.NoSuchReleaseError if we talked to the server and it\n  //   told us that no release named 'release' exists.\n  ensureReleaseExistsAndReturnManifest: function (release, quiet) {\n    if (!files.usesWarehouse())\n      throw new Error(\"Not in a warehouse but requesting a manifest!\");\n\n    return warehouse._populateWarehouseForRelease(release, !quiet);\n  },\n\n  packageExistsInWarehouse: function (name, version) {\n    // A package exists if its directory exists. (We used to look for a\n    // particular file name (\"package.js\") inside the directory, but since we\n    // always install packages by untarring to a temporary directory and\n    // renaming atomically, we shouldn't worry about partial packages.)\n    return files.exists(\n      files.pathJoin(warehouse.getWarehouseDir(), 'packages', name, version));\n  },\n\n  getPackageFreshFile: function (name, version) {\n    return files.pathJoin(\n      warehouse.getWarehouseDir(),\n      'packages', name, version, '.fresh');\n  },\n\n  toolsExistsInWarehouse: function (version) {\n    return files.exists(warehouse.getToolsDir(version));\n  },\n\n  // Returns true if we already have the release file on disk, and it's not a\n  // fake \"red pill\" release --- we should never springboard to those!\n  realReleaseExistsInWarehouse: function (version) {\n    var releasesDir = files.pathJoin(warehouse.getWarehouseDir(), 'releases');\n    var releaseManifestPath = files.pathJoin(releasesDir,\n                                        version + '.release.json');\n    try {\n      var manifest = JSON.parse(files.readFile(releaseManifestPath, 'utf8'));\n      return !manifest.redPill;\n    } catch (e) {\n      return false;\n    }\n  },\n\n  _calculateNewPiecesForRelease: function (releaseManifest) {\n    // newPieces.tools and newPieces.packages[PACKAGE] are either falsey (if\n    // nothing is new), or an object with keys \"version\" and bool\n    // \"needsDownload\". \"needsDownload\" is true if the piece is not in the\n    // warehouse, and is false if it's in the warehouse but has never been used.\n    var newPieces = {\n      tools: null,\n      packages: {}\n    };\n\n    // populate warehouse with tools version for this release\n    var toolsVersion = releaseManifest.tools;\n    if (!warehouse.toolsExistsInWarehouse(toolsVersion)) {\n      newPieces.tools = {version: toolsVersion, needsDownload: true};\n    } else if (files.exists(warehouse.getToolsFreshFile(toolsVersion))) {\n      newPieces.tools = {version: toolsVersion, needsDownload: false};\n    }\n\n    _.each(releaseManifest.packages, function (version, name) {\n      if (!warehouse.packageExistsInWarehouse(name, version)) {\n        newPieces.packages[name] = {version: version, needsDownload: true};\n      } else if (files.exists(warehouse.getPackageFreshFile(name, version))) {\n        newPieces.packages[name] = {version: version, needsDownload: false};\n      }\n    });\n    if (newPieces.tools || !_.isEmpty(newPieces.packages))\n      return newPieces;\n    return null;\n  },\n\n  _packageUpdatesMessage: function (packageNames) {\n    var lines = [];\n    var width = 80;  // see utils.printPackageList for why we hardcode this\n    var currentLine = ' * Package updates:';\n    _.each(packageNames, function (name) {\n      if (currentLine.length + 1 + name.length <= width) {\n        currentLine += ' ' + name;\n      } else {\n        lines.push(currentLine);\n        currentLine = '   ' + name;\n      }\n    });\n    lines.push(currentLine);\n    return lines.join('\\n');\n  },\n\n  // fetches the manifest file for the given release version. also fetches\n  // all of the missing versioned packages referenced from the release manifest\n  // @param releaseVersion {String} eg \"0.1\"\n  _populateWarehouseForRelease: function (releaseVersion, showInstalling) {\n    var future = new Future;\n    var releasesDir = files.pathJoin(warehouse.getWarehouseDir(), 'releases');\n    files.mkdir_p(releasesDir, 0o755);\n    var releaseManifestPath = files.pathJoin(releasesDir,\n                                             releaseVersion + '.release.json');\n\n    // If the release already exists, we don't have to do anything, except maybe\n    // print a message if this release has never been used before (and we only\n    // have it due to a background download).\n    var releaseAlreadyExists = true;\n    try {\n      var releaseManifestText = files.readFile(releaseManifestPath);\n    } catch (e) {\n      releaseAlreadyExists = false;\n    }\n\n    // Now get release manifest if we don't already have it, but only write it\n    // after we're done writing packages\n    if (!releaseAlreadyExists) {\n\n      // For automated self-test. If METEOR_TEST_FAIL_RELEASE_DOWNLOAD\n      // is 'offline' or 'not-found', make release downloads fail.\n      if (process.env.METEOR_TEST_FAIL_RELEASE_DOWNLOAD === \"offline\")\n        throw new files.OfflineError(new Error(\"scripted failure for tests\"));\n      if (process.env.METEOR_TEST_FAIL_RELEASE_DOWNLOAD === \"not-found\")\n        throw new warehouse.NoSuchReleaseError;\n\n      try {\n        var result = httpHelpers.request(\n          WAREHOUSE_URLBASE + \"/releases/\" + releaseVersion + \".release.json\");\n      } catch (e) {\n        throw new files.OfflineError(e);\n      }\n\n      if (result.response.statusCode !== 200)\n        // We actually got some response, so we're probably online and we\n        // just can't find the release.\n        throw new warehouse.NoSuchReleaseError;\n\n      releaseManifestText = result.body;\n    }\n\n    var releaseManifest = JSON.parse(releaseManifestText);\n\n    var newPieces = warehouse._calculateNewPiecesForRelease(releaseManifest);\n\n    if (releaseAlreadyExists && !newPieces)\n      return releaseManifest;\n\n    if (newPieces && showInstalling) {\n      console.log(\"Installing Meteor %s:\", releaseVersion);\n      if (newPieces.tools) {\n        console.log(\" * 'meteor' build tool (version %s)\",\n                    newPieces.tools.version);\n      }\n      if (!_.isEmpty(newPieces.packages)) {\n        console.log(warehouse._packageUpdatesMessage(\n          _.keys(newPieces.packages).sort()));\n      }\n      console.log();\n    }\n\n    if (!releaseAlreadyExists) {\n      if (newPieces && newPieces.tools && newPieces.tools.needsDownload) {\n        try {\n          warehouse.downloadToolsToWarehouse(\n            newPieces.tools.version,\n            warehouse._platform(),\n            warehouse.getWarehouseDir());\n        } catch (e) {\n          if (showInstalling)\n            console.error(\"Failed to load tools for release \" + releaseVersion);\n          throw e;\n        }\n\n        // If the 'tools/latest' symlink doesn't exist, this must be the first\n        // legacy tools we've downloaded into this warehouse. Add the symlink,\n        // so that the tools doesn't get confused when it tries to readlink it.\n        if (!files.exists(warehouse._latestToolsSymlinkPath())) {\n          files.symlink(newPieces.tools.version,\n                         warehouse._latestToolsSymlinkPath());\n        }\n      }\n\n      var packagesToDownload = {};\n      _.each(newPieces && newPieces.packages, function (packageInfo, name) {\n        if (packageInfo.needsDownload)\n          packagesToDownload[name] = packageInfo.version;\n      });\n      if (!_.isEmpty(packagesToDownload)) {\n        try {\n          warehouse.downloadPackagesToWarehouse(packagesToDownload,\n                                                warehouse._platform(),\n                                                warehouse.getWarehouseDir());\n        } catch (e) {\n          if (showInstalling)\n            console.error(\"Failed to load packages for release \" +\n                          releaseVersion);\n          throw e;\n        }\n      }\n\n      // try getting the releases's notices. only blessed releases have one, so\n      // if we can't find it just proceed.\n      try {\n        var notices = httpHelpers.getUrl(\n          WAREHOUSE_URLBASE + \"/releases/\" + releaseVersion + \".notices.json\");\n\n        // Real notices are valid JSON.\n        JSON.parse(notices);\n\n        files.writeFile(\n          files.pathJoin(releasesDir, releaseVersion + '.notices.json'),\n          notices);\n      } catch (e) {\n        // no notices, proceed\n      }\n\n      // Now that we have written all packages, it's safe to write the\n      // release manifest.\n      files.writeFile(releaseManifestPath, releaseManifestText);\n\n      // If the 'releases/latest' symlink doesn't exist, this must be the first\n      // legacy release manifest we've downloaded into this warehouse. Add the\n      // symlink, so that the tools doesn't get confused when it tries to\n      // readlink it.\n      if (!files.exists(warehouse._latestReleaseSymlinkPath())) {\n        files.symlink(releaseVersion + '.release.json',\n                       warehouse._latestReleaseSymlinkPath());\n      }\n    }\n\n    // Finally, clear the \"fresh\" files for all the things we just printed\n    // (whether or not we just downloaded them). (Don't do this if we didn't\n    // print the installing message!)\n    if (newPieces && showInstalling) {\n      var unlinkIfExists = function (file) {\n        try {\n          files.unlink(file);\n        } catch (e) {\n          // If two processes populate the warehouse in parallel, the other\n          // process may have deleted the fresh file. That's OK!\n          if (e.code === \"ENOENT\")\n            return;\n          throw e;\n        }\n      };\n\n      if (newPieces.tools) {\n        unlinkIfExists(warehouse.getToolsFreshFile(newPieces.tools.version));\n      }\n      _.each(newPieces.packages, function (packageInfo, name) {\n        unlinkIfExists(\n          warehouse.getPackageFreshFile(name, packageInfo.version));\n      });\n    }\n\n    return releaseManifest;\n  },\n\n  // this function is also used by bless-release.js\n  downloadToolsToWarehouse: function (\n      toolsVersion, platform, warehouseDirectory, dontWriteFreshFile) {\n    // XXX this sucks. We store all the tarballs in memory. This is huge.\n    // We should instead stream packages in parallel. Since the node stream\n    // API is in flux, we should probably wait a bit.\n    // http://blog.nodejs.org/2012/12/20/streams2/\n\n    var toolsTarballFilename =\n          \"meteor-tools-\" + toolsVersion + \"-\" + platform + \".tar.gz\";\n    var toolsTarballPath = \"/tools/\" + toolsVersion + \"/\"\n          + toolsTarballFilename;\n    var toolsTarball = httpHelpers.getUrl({\n      url: WAREHOUSE_URLBASE + toolsTarballPath,\n      encoding: null\n    });\n    files.extractTarGz(\n      toolsTarball, files.pathJoin(warehouseDirectory, 'tools', toolsVersion));\n    if (!dontWriteFreshFile)\n      files.writeFile(warehouse.getToolsFreshFile(toolsVersion), '');\n  },\n\n  // this function is also used by bless-release.js\n  downloadPackagesToWarehouse: function (packagesToDownload,\n                                         platform,\n                                         warehouseDirectory,\n                                         dontWriteFreshFile) {\n    fiberHelpers.parallelEach(\n      packagesToDownload, function (version, name) {\n        var packageDir = files.pathJoin(\n          warehouseDirectory, 'packages', name, version);\n        var packageUrl = WAREHOUSE_URLBASE + \"/packages/\" + name +\n              \"/\" + version +\n              \"/\" + name + '-' + version + \"-\" + platform + \".tar.gz\";\n\n        var tarball = httpHelpers.getUrl({url: packageUrl, encoding: null});\n        files.extractTarGz(tarball, packageDir);\n        if (!dontWriteFreshFile)\n          files.writeFile(warehouse.getPackageFreshFile(name, version), '');\n      });\n  },\n\n  _platform: function () {\n    // Normalize from Node \"os.arch()\" to \"uname -m\".\n    var arch = os.arch();\n    if (arch === \"ia32\")\n      arch = \"i686\";\n    else if (arch === \"x64\")\n      arch = \"x86_64\";\n    else\n      throw new Error(\"Unsupported architecture \" + arch);\n    return os.type() + \"_\" + arch;\n  }\n});\n"]}