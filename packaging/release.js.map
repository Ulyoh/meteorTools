{"version":3,"sources":["/tools/packaging/release.js"],"names":[],"mappings":"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","file":"tools/packaging/release.js.map","sourcesContent":["var _ = require('underscore');\n\nvar files = require('../fs/files.js');\nvar catalog = require('./catalog/catalog.js');\n\nvar release = exports;\n\nvar Release = function (options) {\n  var self = this;\n\n  // If an actual, proper, \"released\" release, the name of the\n  // release, eg, \"METEOR@1.0\". If not a proper release, null.\n  self.name = options.name;\n\n  if (self.name === null) {\n    // Running from checkout.\n    self._manifest = null;\n  } else {\n    // Running a proper release\n    self._manifest = options.manifest;\n  }\n};\n\n_.extend(Release.prototype, {\n  // True if an actual, proper, \"released\" release. If so, this.name\n  // will have the name of the release, eg, \"1.0\".\n  isProperRelease: function () {\n    return this.name !== null;\n  },\n\n  // True if this \"release\" is actually a checkout on disk. It is\n  // defined by the packages in the checkout rather than by a\n  // manifest. this.name will be null.\n  isCheckout: function () {\n    return this.name === null;\n  },\n\n  isRecommended: function () {\n    return this._manifest.recommended;\n  },\n\n  getReleaseTrack: function () {\n    var self = this;\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    return self.name.split('@')[0];\n  },\n\n  getReleaseVersion: function () {\n    var self = this;\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    return self.name.split('@')[1];\n  },\n\n  // Return the package name for the command-line tools that this release\n  // uses. Valid only for proper releases.\n  getToolsPackage: function () {\n    var self = this;\n\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    // XXX validate\n    return self._manifest.tool.split('@')[0];\n  },\n\n  // Return the version of the command-line tools that this release\n  // uses. Valid only for proper releases.\n  getToolsVersion: function () {\n    var self = this;\n\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    // XXX validate\n    return self._manifest.tool.split('@')[1];\n  },\n\n  // Return the package name and version of the command-line tools that this\n  // release uses. Valid only for proper releases.\n  getToolsPackageAtVersion: function () {\n    var self = this;\n\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    return self._manifest.tool;\n  },\n\n  // Return the tool that we are using. If this is a proper release, return the\n  // tool package listed in the manifest, otherwise return the version of the\n  // meteor-tool package in checkout.\n  getCurrentToolsVersion: function () {\n    var self = this;\n\n    if (release.current.name) {\n      return self._manifest.tool;\n    } else {\n      return \"meteor-tool@CHECKOUT\";\n    }\n  },\n\n  // Return a list of the upgraders (project migrations) for this\n  // release, an (ordered!) array of strings. Valid only for proper\n  // releases.\n  getUpgraders: function () {\n    var self = this;\n\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    return self._manifest.upgraders || [];\n  },\n\n  getPackages: function () {\n    var self = this;\n\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    return self._manifest.packages;\n  },\n\n  getCatalogReleaseData: function () {\n    var self = this;\n    if (! self.isProperRelease())\n      throw new Error(\"not a proper release?\");\n    return self._manifest;\n  },\n\n  getDisplayName: function (options) {\n    var self = this;\n    const catalogUtils = require('./catalog/catalog-utils.js');\n    return catalogUtils.displayRelease(\n      self.getReleaseTrack(),\n      self.getReleaseVersion(),\n      options);\n  }\n});\n\n// The current release. Once set, this does not change for the\n// lifetime of the process.\n//\n// It is possible that we don't have a release. Currently this only\n// comes up in one case: an app was created with a checkout version of\n// Meteor, and then run with a release version of Meteor. In this case\n// release.current will be null. (It will also be null during startup,\n// until setRelease has been called.)\n//\n// (If you want to change the current release, you have to\n// springboard, the same as if you want to change the current tools\n// version. Besides being simpler to reason about, this helps to\n// prepare us for a future where the 'meteor' tool itself is a Meteor\n// app, running against a particular Meteor release.)\nrelease.current = null;\n\n// True if we are using release.current because we were forced to do that by the\n// '--release' command line option or via throwing SpringboardToLatestRelease,\n// else false. (It is true anytime --release was passed, even if it's the same\n// release we would have used anyway. It is false anytime the current release is\n// a checkin.) null if release.current is null.\nrelease.forced = null;\n\n// True if the release was explicitly specified by the user with the --release\n// flag. Unlike release.forced, this is false when the release is overridden via\n// SpringboardToLatestRelease.\nrelease.explicit = null;\n\n// True if release.current is the release we'd use if we wanted to run the app\n// in the current project. (taking into account release.forced and whether we're\n// currently running from a checkout).\nrelease.usingRightReleaseForApp = function (projectContext) {\n  if (release.current === null)\n    throw new Error(\"no release?\");\n\n  if (! files.usesWarehouse() || release.forced)\n    return true;\n\n  return release.current.name === projectContext.releaseFile.fullReleaseName;\n};\n\n// Return the name of the latest release that is downloaded and ready\n// for use. May not be called when running from a checkout.\n// 'track' is optional (it defaults to the default track).\nrelease.latestKnown = function (track) {\n  if (! files.usesWarehouse())\n    throw new Error(\"called from checkout?\");\n  // For self-test only.\n  if (process.env.METEOR_TEST_LATEST_RELEASE)\n    return process.env.METEOR_TEST_LATEST_RELEASE;\n\n\n  var defaultRelease = catalog.official.getDefaultReleaseVersion(track);\n\n  if (!defaultRelease) {\n    return null;\n  }\n  return defaultRelease.track + '@' + defaultRelease.version;\n};\n\n// Load a release and return it as a Release object without setting\n// release.current to that release. Unlike release.setCurrent(), this\n// may be called as many times as you like.\n//\n// This will fetch the release from the server if it isn't cached\n// locally. If that happens it will print progress messages.\n//\n// Arguments:\n// - name: release name to use. Or pass 'null' to use a checkout\n// - options:\n//   - quiet: if the release has to be downloaded, don't print\n//     progress messages.\n//\n// Throws:\n// - files.OfflineError if it was not possible to load the\n//   release because it's not locally cached and we're not online.\n// - warehouse.NoSuchReleaseError if no release called 'name' exists\n//   in the world (confirmed with server).\nrelease.load = function (name, options) {\n  options = options || {};\n\n  if (! name) {\n    return new Release({ name: null });\n  }\n\n  var parts = name.split('@');\n  if (parts.length > 2) {\n    // XXX #Pre090 better error handling\n    throw Error(\"too many @s in release name\");\n  }\n  var track, version;\n  if (parts.length == 2) {\n    track = parts[0];\n    version = parts[1];\n  } else {\n    track = catalog.DEFAULT_TRACK;\n    version = parts[0];\n    name = track + '@' + version;\n  }\n\n  var releaseVersion = catalog.official.getReleaseVersion(track, version);\n  if (releaseVersion === null) {\n    throw new release.NoSuchReleaseError;\n  }\n\n  return new Release({\n    name: name,\n    manifest: releaseVersion  // XXX rename from manifest?\n  });\n};\n\n// Called by the startup code to set release.current. May only be\n// called once.\n//\n// - releaseObject: a Release as returned from release.load()\n// - forced: true if the chosen release was forced from the command\n//   line (by the user or by the update springboard).\n// - explicit: true if the release was specifically requested by the user.\nrelease.setCurrent = function (releaseObject, forced, explicit) {\n  if (release.current)\n    throw new Error(\"release set twice?\");\n\n  release.current = releaseObject;\n  release.forced = !! forced;\n  release.explicit = !! explicit;\n};\n\n// An exception meaning that you asked for a release that doesn't exist in the\n// new packaging world.  (It may still exist in the pre-0.9.0 packaging world.)\nrelease.NoSuchReleaseError = function () {\n};\n"]}