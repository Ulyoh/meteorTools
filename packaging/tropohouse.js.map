{"version":3,"sources":["/tools/packaging/tropohouse.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC9B,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACtC,IAAI,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACzC,IAAI,WAAW,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AACtD,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC/C,IAAI,OAAO,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC9C,IAAI,OAAO,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,OAAO,CAAC;AACxD,IAAI,MAAM,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACrD,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AACvD,IAAI,OAAO,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC;AACvD,IAAI,cAAc,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;;AAE5D,OAAO,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;AAC5C,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,MAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC;CACtD,CAAC;;;;;AAKF,IAAI,mBAAmB,GAAG,YAAY;;AAEpC,MAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAClC,OAAO,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;;AAE1C,MAAI,aAAa,GAAG,KAAK,CAAC,UAAU,EAAE,GACjC,KAAK,CAAC,kBAAkB,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;;;;AAIrD,SAAO,KAAK,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;CACjD,CAAC;;;;AAIF,OAAO,WAAQ,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;;;;;;;;AAQhE,OAAO,CAAC,kBAAkB,GAAG,UAAU,cAAc,EAAE,YAAY,EAAE;AACnE,MAAI,eAAe,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;AACtC,OAAK,CAAC,YAAY,CAAC,cAAc,EAAE,eAAe,EAAE;AAClD,gBAAY,EAAE,YAAY;GAC3B,CAAC,CAAC;;AAEH,MAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,IAAI,YAAY,EAAE;;;;;;;;;;;;;;;6CAe1C,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC;;QADnD,QAAQ,sCAAR,QAAQ;QAAE,eAAe,sCAAf,eAAe;;;;;AAM9B,QAAI,eAAe,KAAK,iBAAiB,IACrC,eAAe,KAAK,WAAW,EAAE;AACnC,UAAI,iBAAiB,GAAG,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;;;;AAIhE,UAAI,eAAe,GAAG,EAAE,CAAC;AACzB,qBAAe,CAAC,WAAW,CAAC,GAAG,iBAAiB,CAAC;;AAEjD,UAAI,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;;AAEtE,UAAI,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;AACjC,aAAK,CAAC,KAAK,CAAC,eAAe,EAAE,GAAK,CAAC,CAAC;OACrC;;AAED,WAAK,CAAC,SAAS,CACb,eAAe,EACf,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAC5D,EAAC,IAAI,EAAE,GAAK,EAAC,CAAC,CAAC;;;AAGjB,WAAK,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC,CAAC;;;;;;AAMjE,OAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,UAAU,YAAY,EAAE;AACvD,YAAI,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,EACf,YAAY,CAAC,IAAI,CAAC,CAAC;AACzD,YAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;;AAEhE,YAAI,YAAY,CAAC,MAAM,KAAK,0BAA0B,EAAE;AACtD,gBAAM,IAAI,KAAK,CAAC,uCAAuC,GACvC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;SACtD;;AAED,YAAI,iBAAiB,GAAG,cAAc,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;;AAErE,aAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,GAAK,CAAC,CAAC;AACrC,aAAK,CAAC,SAAS,CACb,gBAAgB,EAChB,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAC9D,EAAC,IAAI,EAAE,GAAK,EAAC,CAAC,CAAC;;;OAGlB,CAAC,CAAC;;;AAGH,OAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,UAAU,UAAU,EAAE;AACtD,YAAI,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;AACvE,YAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;;AAE9D,YAAI,WAAW,CAAC,MAAM,KAAK,uBAAuB,EAAE;AAClD,gBAAM,IAAI,KAAK,CAAC,6BAA6B,GAC7B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;SACrD;;AAED,YAAI,eAAe,GAAG,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;;AAEjE,aAAK,CAAC,KAAK,CAAC,eAAe,EAAE,GAAK,CAAC,CAAC;AACpC,aAAK,CAAC,SAAS,CACb,eAAe,EACf,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAC5D,EAAC,IAAI,EAAE,GAAK,EAAC,CAAC,CAAC;;;OAGlB,CAAC,CAAC;KACJ;GACF;;AAED,SAAO,eAAe,CAAC;CACxB,CAAC;;AAEF,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE;;;;;;AAMrC,aAAW,EAAE,UAAU,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE;AACrD,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,CAAE,KAAK,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE;AAC3C,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,CAC/B,MAAM,CAAC,wBAAwB,EAAE,EACjC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,EACnC,OAAO,CAAC,CAAC;;AAEX,WAAO,QAAQ,GAAG,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;GAC1E;;;;AAID,iBAAe,EAAE,YAAY;AAC3B,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;AAC9D,QAAI,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;AACtE,QAAI,eAAe,CAAC;;AAEpB,QAAI;;;AAGF,qBAAe,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KACjD,CAAC,OAAO,CAAC,EAAE;;AAEV,UAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EACrB,OAAO;AACT,YAAM,CAAC,CAAC;KACT;;;;AAID,QAAI,wBAAwB,GAAG,IAAI,CAAC;AACpC,QAAI,iBAAiB,GAAG,IAAI,CAAC;AAC7B,QAAI,yBAAyB,GAAG,IAAI,CAAC;AACrC,QAAI,kBAAkB,GAAG,IAAI,CAAC;;;AAG9B,QAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;;;;AAIvB,UAAI,QAAQ,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;;AAE1C,+BAAyB,GACvB,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;AAGrE,UAAI,cAAc,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAErE,UAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;AAChC,YAAI,8BAA8B,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,YAAI,MAAM,GAAG,8BAA8B,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvD,cAAM,CAAC,KAAK,EAAE,CAAC;AACf,cAAM,CAAC,GAAG,EAAE,CAAC;AACb,0BAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;OACvC,MAAM;AACL,0BAAkB,GAAG,cAAc,CAAC;OACrC;;AAED,UAAI,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;AACrD,UAAI,mBAAmB,CAAC,UAAU,CAAC,qBAAqB,GACrB,KAAK,CAAC,OAAO,CAAC,EAAE;AACjD,YAAI,IAAI,GAAG,mBAAmB,CAAC,MAAM,CACnC,qBAAqB,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;AAEvD,cAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACnC,gCAAwB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACrC,yBAAiB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;OAC/B;KACF;;AAED,KAAC,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,cAAc,EAAE;AAChD,UAAI,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;AAChE,UAAI,QAAQ,CAAC;;AAEb,UAAI;AACF,gBAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;OACtC,CAAC,OAAO,CAAC,EAAE;;AAEV,YAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAC7C,OAAO;AACT,cAAM,CAAC,CAAC;OACT;AACD,OAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,OAAO,EAAE;;AAElC,YAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EAChC,OAAO;;;;;AAKT,YAAI,cAAc,KAAK,wBAAwB,KAC1C,OAAO,KAAK,iBAAiB,IAC7B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,iBAAiB,GAAG,GAAG,CAAC,CAAA,AAAC,EAAE;AACvD,iBAAO;SACR;;;;AAID,YAAI,cAAc,KAAK,yBAAyB,KAC3C,OAAO,KAAK,kBAAkB,IAC9B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,kBAAkB,GAAG,GAAG,CAAC,CAAA,AAAC,EAAE;AACxD,iBAAO;SACR;;AAED,aAAK,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;OACzD,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ;;;;;;;AAOD,WAAS,EAAE,UAAU,OAAO,EAAE;AAC5B,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,CAAC,OAAO,CAAC,WAAW,EACtB,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACxD,QAAI,CAAC,OAAO,CAAC,OAAO,EAClB,MAAM,KAAK,CAAC,oCAAoC,CAAC,CAAC;AACpD,QAAI,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;;AAE/D,QAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC;AACvC,iBAAW,EAAE,OAAO,CAAC,WAAW;AAChC,aAAO,EAAE,OAAO,CAAC,OAAO;KACzB,CAAC,CAAC;;AAEH,WAAO,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE,UAAU,YAAY,EAAE;AACpD,aAAO,QAAQ,CAAC,iBAAiB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;KAC7D,CAAC,CAAC;GACJ;;;;;;AAMD,yBAAuB,EAAE,UAAU,WAAW,EAAE,WAAW,EAAE;AAC3D,QAAI,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;;;;;;AAMhC,QAAI,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;AACtC,SAAG,EAAE,GAAG;AACR,cAAQ,EAAE,IAAI;AACd,cAAQ,EAAE,YAAY,CAAC,yBAAyB,EAAE;AAClD,UAAI,EAAE,KAAK;KACZ,CAAC,CAAC;;AAEH,WAAO,OAAO,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;GACnD;;;;;;;AAOD,oBAAkB,EAAE,UAAU,OAAO,EAAE;AACrC,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AACtC,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC9B,QAAI,CAAC,OAAO,CAAC,WAAW,EACtB,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACxD,QAAI,CAAC,OAAO,CAAC,OAAO,EAClB,MAAM,KAAK,CAAC,oCAAoC,CAAC,CAAC;;;;AAKpD,QAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AACzD,QAAI,gBAAgB,GAAG,EAAE,CAAC;;;;8CAIpB,OAAO,CAAC,yBAAyB,CAAC,WAAW,CAAC;;QADrC,eAAe,uCAAzB,QAAQ;;;AAIb,QAAI,eAAe,EAAE;AACnB,sBAAgB,GAAG,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC5D;;AAED,WAAO,gBAAgB,CAAC;GACzB;;AAED,cAAY,EAAE,UAAU,OAAO,EAAE,WAAW,EAAE;;;;AAI5C,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE;AAC7B,aAAO,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE;AACjE,+CAAuC,EAAE,IAAI;OAC9C,CAAC,CAAC;KACJ,MAAM;;;;;;;AAOL,UAAI,oBAAoB,GAAG,GAAG,GAAG,OAAO,CAAC,OAAO,GAAG,GAAG,GACpD,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,kBAAkB,EAAE,CAAC;;AAE5D,UAAI,iBAAiB,GAAG,IAAI,CAAC,WAAW,CACtC,WAAW,EAAE,oBAAoB,CAAC,CAAC;;AAErC,aAAO,CAAC,UAAU,CAAC,iBAAiB,EAAE;AACpC,+CAAuC,EAAE,IAAI;OAC9C,CAAC,CAAC;;AAEH,WAAK,CAAC,eAAe,CAAC,oBAAoB,EACxC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;KACnD;GACF;;;;;;;;;;;;;AAaD,iBAAe,EAAE,UAAU,OAAO,EAAE;AAClC,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,gBAAY,CAAC,WAAW,EAAE,CAAC;;AAE3B,QAAI,CAAC,OAAO,CAAC,WAAW,EACtB,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACxD,QAAI,CAAC,OAAO,CAAC,OAAO,EAClB,MAAM,KAAK,CAAC,oCAAoC,CAAC,CAAC;AACpD,QAAI,CAAC,OAAO,CAAC,aAAa,EACxB,MAAM,KAAK,CAAC,0CAA0C,CAAC,CAAC;;AAE1D,QAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AACtC,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;;;AAG9B,QAAI,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC;AAC7C,iBAAW,EAAE,WAAW;AACxB,aAAO,EAAE,OAAO;KACjB,CAAC,CAAC;;AAEH,QAAI,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,YAAY,EAAE;AAC7E,aAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;KACpE,CAAC,CAAC;;;AAGH,QAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;AAC5B,aAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,WAAW,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;AACnF,aAAO,IAAI,CAAC;KACb;;;;;;AAMD,QAAI,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CACxD,WAAW,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;AAC1C,QAAI,CAAE,gBAAgB,EAAE;AACtB,kBAAY,CAAC,KAAK,CAChB,qDAAqD,GACrD,wDAAwD,GACxD,oBAAoB,EAAE,EAAC,IAAI,EAAE,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,CAAC,CAAC;AAC5D,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AACzD,QAAI,QAAQ,GAAG,SAAS,QAAQ,GAAI;AAClC,kBAAY,CAAC,eAAe,EAAE,CAAC;;AAE/B,aAAO,CAAC,KAAK,CAAC,+CAA+C,EAC/C,WAAW,GAAG,GAAG,GAAG,OAAO,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;;AAElE,kBAAY,CAAC,QAAQ,CAAC;AACpB,aAAK,EAAE,cAAc,GAAG,WAAW,GAAG,GAAG,GAAG,OAAO,GAAG,KAAK;OAC5D,EAAE,YAAW;AACZ,YAAI,cAAc,GAAG,EAAE,CAAC;AACxB,YAAI,aAAa,GAAG,EAAE,CAAC;AACvB,YAAI,iBAAiB,GAAG,IAAI,CAAC;;;AAG7B,YAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE;;;AAG7B,cAAI,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;AAC7B,0BAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;WAClC;SACF,MAAM;;;AAGL,cAAI;AACF,6BAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;WACjD,CAAC,OAAO,CAAC,EAAE;;;;;;;AAOV,gBAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EACrB,MAAM,CAAC,CAAC;WACX;;;AAGD,cAAI,iBAAiB,EAAE;AACrB,0BAAc,CAAC,IAAI,CACjB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,EAC9B,iBAAiB,CAAC,CAAC,CAAC;WACzC;SACF;;;;;AAKD,SAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,UAAU,KAAK,EAAE;AACxC,sBAAY,CAAC,QAAQ,CAAC;AACpB,iBAAK,EAAE,cAAc,GAAG,WAAW,GAAG,GAAG,GAAG,OAAO,GAAG,KAAK;WAC5D,EAAE,YAAW;AACZ,gBAAI;AACF,kBAAI,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAC7C,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;aAC1D,CAAC,OAAO,CAAC,EAAE;AACV,kBAAI,EAAE,CAAC,YAAY,KAAK,CAAC,YAAY,CAAA,AAAC,EACpC,MAAM,CAAC,CAAC;AACV,0BAAY,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACrC;AACD,0BAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAClC,yBAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;WAClC,CAAC,CAAC;SACJ,CAAC,CAAC;AACH,YAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;;AAGT,YAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;AAC5B,SAAC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,YAAY,EAAE,CAAC,EAAE;AAChD,iBAAO,CAAC,sBAAsB,CAC5B,WAAW,EACX,YAAY,EACZ,EAAC,YAAY,EAAE,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC;SAC5B,CAAC,CAAC;;AAEH,YAAI,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;;;AAGjD,SAAC,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,YAAY,EAAE;AAC5C,eAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CAAC;;;AAGH,YAAI,iBAAiB,EAAE;AACrB,eAAK,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC,CAAC;SACtE;OACF,CAAC,CAAC;KACJ,CAAC;;AAEF,WAAO;AACL,iBAAW,EAAE,WAAW;AACxB,aAAO,EAAE,OAAO;AAChB,cAAQ,EAAE,QAAQ;KACnB,CAAC;GACH;;;;;;AAOD,gCAA8B,EAAE,UAAU,UAAU,EAAE,OAAO,EAAE;AAC7D,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,gBAAY,CAAC,eAAe,EAAE,CAAC;AAC/B,WAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,QAAI,WAAW,GAAG,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;;AAEnE,QAAI,UAAU,CAAC;AACf,QAAI,WAAW,GAAG,EAAE,CAAC;AACrB,cAAU,CAAC,WAAW,CAAC,UAAU,WAAW,EAAE,IAAI,EAAE;AAClD,UAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAC3B,OAAO;AACT,kBAAY,CAAC,QAAQ,CACnB,eAAe,GAAG,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,EAClD,YAAY;AACV,kBAAU,GAAG,IAAI,CAAC,eAAe,CAAC;AAChC,qBAAW,EAAE,WAAW;AACxB,iBAAO,EAAE,IAAI,CAAC,OAAO;AACrB,uBAAa,EAAE,WAAW;SAC3B,CAAC,CAAC;AACH,YAAI,YAAY,CAAC,cAAc,EAAE,EAAE;AACjC,qBAAW,GAAG,IAAI,CAAC;AACnB,iBAAO;SACR;AACD,YAAI,UAAU,IAAI,WAAW,EAC3B,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;OAChC,CACF,CAAC;KACH,CAAC,CAAC;;;AAGH,QAAI,CAAE,WAAW,EACf,OAAO;;;AAGT,QAAI,CAAE,WAAW,CAAC,MAAM,EACtB,OAAO;;;AAGT,QAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,gBAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5B,kBAAY,CAAC,QAAQ,CACnB,cAAc,GAAG,UAAU,CAAC,WAAW,GAAG,GAAG,GAAG,UAAU,CAAC,OAAO,EAClE,YAAY;AACV,kBAAU,CAAC,QAAQ,EAAE,CAAC;OACvB,CACF,CAAC;AACF,aAAO;KACR;;;;;AAKD,gBAAY,CAAC,QAAQ,CAAC;AACpB,WAAK,EAAE,cAAc,GAAG,WAAW,CAAC,MAAM,GAAG,WAAW;AACxD,cAAQ,EAAE,IAAI;KACf,EAAE,WAAW,EAAE,UAAU,UAAU,EAAE;AACpC,gBAAU,CAAC,QAAQ,EAAE,CAAC;KACvB,CAAC,CAAC;GACJ;;AAED,qBAAmB,EAAE,YAAY;AAC/B,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACnD,WAAO,KAAK,CAAC,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC9D;;AAED,oBAAkB,EAAE,UAAU,cAAc,EAAE;AAC5C,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACnD,SAAK,CAAC,kBAAkB,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;GACnE;;AAED,cAAY,EAAE,YAAY;AACxB,WAAO,IAAI,CAAC,QAAQ,CAAC;GACtB;CACF,CAAC,CAAC","file":"tools/packaging/tropohouse.js.map","sourcesContent":["var _ = require(\"underscore\");\nvar files = require('../fs/files.js');\nvar utils = require('../utils/utils.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar archinfo = require('../utils/archinfo.js');\nvar catalog = require('./catalog/catalog.js');\nvar Isopack = require('../isobuild/isopack.js').Isopack;\nvar config = require('../meteor-services/config.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar Console = require('../console/console.js').Console;\nvar colonConverter = require('../utils/colon-converter.js');\n\nexports.Tropohouse = function (root, options) {\n  var self = this;\n  options = options || {};\n\n  self.root = root;\n  self.platform = options.platform || process.platform;\n};\n\n// Return the directory containing our loaded collection of tools, releases and\n// packages. If we're running an installed version, found at $HOME/.meteor, if\n// we are running form a checkout, probably at $CHECKOUT_DIR/.meteor.\nvar defaultWarehouseDir = function () {\n  // a hook for tests, or i guess for users.\n  if (process.env.METEOR_WAREHOUSE_DIR)\n    return process.env.METEOR_WAREHOUSE_DIR;\n\n  var warehouseBase = files.inCheckout()\n     ? files.getCurrentToolsDir() : files.getHomeDir();\n  // XXX This will be `.meteor` soon, once we've written the code to make the\n  // tropohouse and warehouse live together in harmony (eg, allowing tropohouse\n  // tools to springboard to warehouse tools).\n  return files.pathJoin(warehouseBase, \".meteor\");\n};\n\n// The default tropohouse is on disk at defaultWarehouseDir(); you can make your\n// own Tropohouse to override these things.\nexports.default = new exports.Tropohouse(defaultWarehouseDir());\n\n/**\n * Extract a package tarball, and on Windows convert file paths and metadata\n * @param  {String} packageTarball path to tarball\n * @param {Boolean} forceConvert Convert paths even on unix, for testing\n * @return {String}                Temporary directory with contents of package\n */\nexports._extractAndConvert = function (packageTarball, forceConvert) {\n  var targetDirectory = files.mkdtemp();\n  files.extractTarGz(packageTarball, targetDirectory, {\n    forceConvert: forceConvert\n  });\n\n  if (process.platform === \"win32\" || forceConvert) {\n    // Packages published before the Windows release might have colons or\n    // other unsavory characters in path names. In hopes of making most of\n    // these packages work on Windows, we will try to automatically convert\n    // them.\n    //\n    // At this location in the code, the metadata inside the isopack is\n    // inconsistent with the actual file paths, since we convert some file\n    // paths inside extractTarGz. Now we need to convert the metadata to match\n    // the files.\n\n    // Step 1. Load the metadata from isopack.json and convert colons in the\n    // file paths. We have already converted the colons in the actual files\n    // while untarring.\n    var {metadata, originalVersion} =\n          Isopack.readMetadataFromDirectory(targetDirectory);\n\n    // By the time that isopack-2 came out (around Meteor 1.2) nobody should be\n    // making colon packages anyway, so let's not waste effort converting (and\n    // moreover, not bother to make sure the code below works for isopack-2).\n    if (originalVersion === 'unipackage-pre2' ||\n        originalVersion === 'isopack-1') {\n      var convertedMetadata = colonConverter.convertIsopack(metadata);\n\n      // Step 2. Write the isopack.json file.  Keep it as isopack-1;\n      // _saveIsopack later will upgrade to isopack-2.\n      var isopackFileData = {};\n      isopackFileData['isopack-1'] = convertedMetadata;\n\n      var isopackJsonPath = files.pathJoin(targetDirectory, \"isopack.json\");\n\n      if (files.exists(isopackJsonPath)) {\n        files.chmod(isopackJsonPath, 0o777);\n      }\n\n      files.writeFile(\n        isopackJsonPath,\n        new Buffer(JSON.stringify(isopackFileData, null, 2), 'utf8'),\n        {mode: 0o444});\n\n      // Step 3. Clean up old unipackage.json file if it exists\n      files.unlink(files.pathJoin(targetDirectory, \"unipackage.json\"));\n\n      // Result: Now we are in a state where the isopack.json file paths are\n      // consistent with the paths in the downloaded tarball.\n\n      // Now, we have to convert the unibuild files in the same way.\n      _.each(convertedMetadata.builds, function (unibuildMeta) {\n        var unibuildJsonPath = files.pathJoin(targetDirectory,\n                                              unibuildMeta.path);\n        var unibuildJson = JSON.parse(files.readFile(unibuildJsonPath));\n\n        if (unibuildJson.format !== \"unipackage-unibuild-pre1\") {\n          throw new Error(\"Unsupported isopack unibuild format: \" +\n                          JSON.stringify(unibuildJson.format));\n        }\n\n        var convertedUnibuild = colonConverter.convertUnibuild(unibuildJson);\n\n        files.chmod(unibuildJsonPath, 0o777);\n        files.writeFile(\n          unibuildJsonPath,\n          new Buffer(JSON.stringify(convertedUnibuild, null, 2), 'utf8'),\n          {mode: 0o444});\n        // Result: Now we are in a state where the unibuild file paths are\n        // consistent with the paths in the downloaded tarball.\n      });\n\n      // Lastly, convert the build plugins, which are in the JSImage format\n      _.each(convertedMetadata.plugins, function (pluginMeta) {\n        var programJsonPath = files.pathJoin(targetDirectory, pluginMeta.path);\n        var programJson = JSON.parse(files.readFile(programJsonPath));\n\n        if (programJson.format !== \"javascript-image-pre1\") {\n          throw new Error(\"Unsupported plugin format: \" +\n                          JSON.stringify(programJson.format));\n        }\n\n        var convertedPlugin = colonConverter.convertJSImage(programJson);\n\n        files.chmod(programJsonPath, 0o777);\n        files.writeFile(\n          programJsonPath,\n          new Buffer(JSON.stringify(convertedPlugin, null, 2), 'utf8'),\n          {mode: 0o444});\n        // Result: Now we are in a state where the build plugin file paths are\n        // consistent with the paths in the downloaded tarball.\n      });\n    }\n  }\n\n  return targetDirectory;\n};\n\n_.extend(exports.Tropohouse.prototype, {\n  // Returns the load path where one can expect to find the package, at a given\n  // version, if we have already downloaded from the package server. Does not\n  // check for contents.\n  //\n  // Returns null if the package name is lexographically invalid.\n  packagePath: function (packageName, version, relative) {\n    var self = this;\n    if (! utils.isValidPackageName(packageName)) {\n      return null;\n    }\n\n    var relativePath = files.pathJoin(\n      config.getPackagesDirectoryName(),\n      colonConverter.convert(packageName),\n      version);\n\n    return relative ? relativePath : files.pathJoin(self.root, relativePath);\n  },\n\n  // Pretty extreme! We call this when we learn that something has changed on\n  // the server in a way that our sync protocol doesn't understand well.\n  wipeAllPackages: function () {\n    var self = this;\n    var packagesDirectoryName = config.getPackagesDirectoryName();\n    var packageRootDir = files.pathJoin(self.root, packagesDirectoryName);\n    var escapedPackages;\n\n    try {\n      // XXX this variable actually can't be accessed from outside this\n      // line, this is definitely a bug\n      escapedPackages = files.readdir(packageRootDir);\n    } catch (e) {\n      // No packages at all? We're done.\n      if (e.code === 'ENOENT')\n        return;\n      throw e;\n    }\n\n    // We want to be careful not to break the 'meteor' symlink inside the\n    // tropohouse. Hopefully nobody deleted/modified that package!\n    var latestToolPackageEscaped = null;\n    var latestToolVersion = null;\n    var currentToolPackageEscaped = null;\n    var currentToolVersion = null;\n    // Warning: we can't examine release.current here, because we might be\n    // currently processing release.load!\n    if (!files.inCheckout()) {\n      // toolsDir is something like:\n      // /home/user/.meteor/packages/meteor-tool/.1.0.17.ut200e++os.osx.x86_64+web.browser+web.cordova/meteor-tool-os.osx.x86_64\n      // or /C/Users/user/AppData/Local/Temp/mt-17618kk/tropohouse/packages/meteor-tool/33.0.1/mt-os.windows.x86_32 on Windows\n      var toolsDir = files.getCurrentToolsDir();\n      // eg, 'meteor-tool'\n      currentToolPackageEscaped =\n        files.pathBasename(files.pathDirname(files.pathDirname(toolsDir)));\n      // eg, '.1.0.17-xyz1.2.ut200e++os.osx.x86_64+web.browser+web.cordova' on Unix\n      // or '33.0.1' on Windows\n      var toolVersionDir = files.pathBasename(files.pathDirname(toolsDir));\n\n      if (process.platform !== 'win32') {\n        var toolVersionWithDotAndRandomBit = toolVersionDir.split('++')[0];\n        var pieces = toolVersionWithDotAndRandomBit.split('.');\n        pieces.shift();\n        pieces.pop();\n        currentToolVersion = pieces.join('.');\n      } else {\n        currentToolVersion = toolVersionDir;\n      }\n\n      var latestMeteorSymlink = self.latestMeteorSymlink();\n      if (latestMeteorSymlink.startsWith(packagesDirectoryName +\n                                         files.pathSep)) {\n        var rest = latestMeteorSymlink.substr(\n          packagesDirectoryName.length + files.pathSep.length);\n\n        pieces = rest.split(files.pathSep);\n        latestToolPackageEscaped = pieces[0];\n        latestToolVersion = pieces[1];\n      }\n    }\n\n    _.each(escapedPackages, function (packageEscaped) {\n      var packageDir = files.pathJoin(packageRootDir, packageEscaped);\n      var versions;\n\n      try {\n        versions = files.readdir(packageDir);\n      } catch (e) {\n        // Somebody put a file in here or something? Whatever, ignore.\n        if (e.code === 'ENOENT' || e.code === 'ENOTDIR')\n          return;\n        throw e;\n      }\n      _.each(versions, function (version) {\n        // Is this a pre-0.9.0 \"warehouse\" version with a hash name?\n        if (/^[a-f0-9]{3,}$/.test(version))\n          return;\n\n        // Skip the currently-latest tool (ie, don't break top-level meteor\n        // symlink). This includes both the symlink with its name and the thing\n        // it points to.\n        if (packageEscaped === latestToolPackageEscaped &&\n            (version === latestToolVersion ||\n             version.startsWith('.' + latestToolVersion + '.'))) {\n          return;\n        }\n\n        // Skip the currently-executing tool (ie, don't break the current\n        // operation).\n        if (packageEscaped === currentToolPackageEscaped &&\n            (version === currentToolVersion ||\n             version.startsWith('.' + currentToolVersion + '.'))) {\n          return;\n        }\n\n        files.rm_recursive(files.pathJoin(packageDir, version));\n      });\n    });\n  },\n  // Returns true if the given package at the given version exists on disk, or\n  // false otherwise. Takes in the following:\n  //  - packageName: name of the package\n  //  - version: version\n  //  - architectures: (optional) array of architectures. Defaults to\n  //    archinfo.host().\n  installed: function (options) {\n    var self = this;\n    if (!options.packageName)\n      throw Error(\"Missing required argument: packageName\");\n    if (!options.version)\n      throw Error(\"Missing required argument: version\");\n    var architectures = options.architectures || [archinfo.host()];\n\n    var downloaded = self._alreadyDownloaded({\n      packageName: options.packageName,\n      version: options.version\n    });\n\n    return _.every(architectures, function (requiredArch) {\n      return archinfo.mostSpecificMatch(requiredArch, downloaded);\n    });\n  },\n\n  // Contacts the package server, downloads and extracts a tarball for a given\n  // buildRecord into a temporary directory, whose path is returned.\n  //\n  // XXX: Error handling.\n  _downloadBuildToTempDir: function (versionInfo, buildRecord) {\n    var url = buildRecord.build.url;\n\n    // XXX: We use one progress for download & untar; this isn't ideal:\n    // it relies on extractTarGz being fast and not reporting any progress.\n    // Really, we should create two subtasks\n    // (and, we should stream the download to the tar extractor)\n    var packageTarball = httpHelpers.getUrl({\n      url: url,\n      encoding: null,\n      progress: buildmessage.getCurrentProgressTracker(),\n      wait: false\n    });\n\n    return exports._extractAndConvert(packageTarball);\n  },\n\n  // Given a package name and version, returns the architectures for\n  // which we have downloaded this package\n  //\n  // Throws if the symlink cannot be read for any reason other than\n  // ENOENT/\n  _alreadyDownloaded: function (options) {\n    var self = this;\n    var packageName = options.packageName;\n    var version = options.version;\n    if (!options.packageName)\n      throw Error(\"Missing required argument: packageName\");\n    if (!options.version)\n      throw Error(\"Missing required argument: version\");\n\n\n    // Figure out what arches (if any) we have loaded for this package version\n    // already.\n    var packagePath = self.packagePath(packageName, version);\n    var downloadedArches = [];\n\n    // Find out which arches we have by reading the isopack metadata\n    var {metadata: packageMetadata} =\n          Isopack.readMetadataFromDirectory(packagePath);\n\n    // packageMetadata is null if there is no package at packagePath\n    if (packageMetadata) {\n      downloadedArches = _.pluck(packageMetadata.builds, \"arch\");\n    }\n\n    return downloadedArches;\n  },\n\n  _saveIsopack: function (isopack, packageName) {\n    // XXX does this actually need the name as an argument or can we just get\n    // it from isopack?\n\n    var self = this;\n\n    if (self.platform === \"win32\") {\n      isopack.saveToPath(self.packagePath(packageName, isopack.version), {\n        includePreCompilerPluginIsopackVersions: true\n      });\n    } else {\n      // Note: wipeAllPackages depends on this filename structure\n      // On Mac and Linux, we used to use a filename structure that used the\n      // names of symlinks to determine which builds we have downloaded. We no\n      // longer need this because we now parse package metadata, but we still\n      // need to write the symlinks correctly so that old meteor tools can\n      // still read newly downloaded packages.\n      var newPackageLinkTarget = '.' + isopack.version + '.' +\n        utils.randomToken() + '++' + isopack.buildArchitectures();\n\n      var combinedDirectory = self.packagePath(\n        packageName, newPackageLinkTarget);\n\n      isopack.saveToPath(combinedDirectory, {\n        includePreCompilerPluginIsopackVersions: true\n      });\n\n      files.symlinkOverSync(newPackageLinkTarget,\n        self.packagePath(packageName, isopack.version));\n    }\n  },\n\n  // Given a package name, version, and required architectures, checks to make\n  // sure that we have the package downloaded at the requested arch. If we do,\n  // returns null.\n  //\n  // Otherwise, if the catalog has no information about appropriate builds,\n  // registers a buildmessage error and returns null.\n  //\n  // Otherwise, returns a 'downloader' object with keys packageName, version,\n  // and download; download is a method which should be called in a buildmessage\n  // capture which actually downloads the package (registering any errors with\n  // buildmessage).\n  _makeDownloader: function (options) {\n    var self = this;\n    buildmessage.assertInJob();\n\n    if (!options.packageName)\n      throw Error(\"Missing required argument: packageName\");\n    if (!options.version)\n      throw Error(\"Missing required argument: version\");\n    if (!options.architectures)\n      throw Error(\"Missing required argument: architectures\");\n\n    var packageName = options.packageName;\n    var version = options.version;\n\n    // Look up which arches we have already downloaded\n    var downloadedArches = self._alreadyDownloaded({\n      packageName: packageName,\n      version: version\n    });\n\n    var archesToDownload = _.filter(options.architectures, function (requiredArch) {\n      return !archinfo.mostSpecificMatch(requiredArch, downloadedArches);\n    });\n\n    // Have everything we need? Great.\n    if (!archesToDownload.length) {\n      Console.debug(\"Local package version is up-to-date:\", packageName + \"@\" + version);\n      return null;\n    }\n\n    // Since we are downloading from the server (and we've already done the\n    // local package check), we can use the official catalog here. (This is\n    // important, since springboarding calls this function before the complete\n    // catalog is ready!)\n    var buildsToDownload = catalog.official.getBuildsForArches(\n      packageName, version, archesToDownload);\n    if (! buildsToDownload) {\n      buildmessage.error(\n        \"No compatible binary build found for this package. \" +\n        \"Contact the package author and ask them to publish it \" +\n        \"for your platform.\", {tags: { refreshCouldHelp: true }});\n      return null;\n    }\n\n    var packagePath = self.packagePath(packageName, version);\n    var download = function download () {\n      buildmessage.assertInCapture();\n\n      Console.debug(\"Downloading missing local versions of package\",\n                    packageName + \"@\" + version, \":\", archesToDownload);\n\n      buildmessage.enterJob({\n        title: \"downloading \" + packageName + \"@\" + version + \"...\"\n      }, function() {\n        var buildInputDirs = [];\n        var buildTempDirs = [];\n        var packageLinkTarget = null;\n\n        // Find the previous actual directory of the package\n        if (self.platform === \"win32\") {\n          // On Windows, we don't use symlinks.\n          // If there's already a package in the tropohouse, start with it.\n          if (files.exists(packagePath)) {\n            buildInputDirs.push(packagePath);\n          }\n        } else {\n          // On posix, we have a symlink structure. Get the target of the\n          // symlink so that we can delete it later.\n          try {\n            packageLinkTarget = files.readlink(packagePath);\n          } catch (e) {\n            // Complain about anything other than \"we don't have it at all\".\n            // This includes \"not a symlink\": The main reason this would not be\n            // a symlink is if it's a directory containing a pre-0.9.0 package\n            // (ie, this is a warehouse package not a tropohouse package). But\n            // the versions should not overlap: warehouse versions are truncated\n            // SHAs whereas tropohouse versions should be semver-like.\n            if (e.code !== 'ENOENT')\n              throw e;\n          }\n\n          // If there's already a package in the tropohouse, start with it.\n          if (packageLinkTarget) {\n            buildInputDirs.push(\n              files.pathResolve(files.pathDirname(packagePath),\n                                packageLinkTarget));\n          }\n        }\n\n        // XXX how does concurrency work here?  we could just get errors if we\n        // try to rename over the other thing?  but that's the same as in\n        // warehouse?\n        _.each(buildsToDownload, function (build) {\n          buildmessage.enterJob({\n            title: \"downloading \" + packageName + \"@\" + version + \"...\"\n          }, function() {\n            try {\n              var buildTempDir = self._downloadBuildToTempDir(\n                { packageName: packageName, version: version }, build);\n            } catch (e) {\n              if (!(e instanceof files.OfflineError))\n                throw e;\n              buildmessage.error(e.error.message);\n            }\n            buildInputDirs.push(buildTempDir);\n            buildTempDirs.push(buildTempDir);\n          });\n        });\n        if (buildmessage.jobHasMessages())\n          return;\n\n        // We need to turn our builds into a single isopack.\n        var isopack = new Isopack();\n        _.each(buildInputDirs, function (buildTempDir, i) {\n          isopack._loadUnibuildsFromPath(\n            packageName,\n            buildTempDir,\n            {firstIsopack: i === 0});\n        });\n\n        self._saveIsopack(isopack, packageName, version);\n\n        // Delete temp directories now (asynchronously).\n        _.each(buildTempDirs, function (buildTempDir) {\n          files.freeTempDir(buildTempDir);\n        });\n\n        // Clean up old version.\n        if (packageLinkTarget) {\n          files.rm_recursive(self.packagePath(packageName, packageLinkTarget));\n        }\n      });\n    };\n\n    return {\n      packageName: packageName,\n      version: version,\n      download: download\n    };\n  },\n\n\n  // Takes in a PackageMap object. Downloads any versioned packages we don't\n  // already have.\n  //\n  // Reports errors via buildmessage.\n  downloadPackagesMissingFromMap: function (packageMap, options) {\n    var self = this;\n    buildmessage.assertInCapture();\n    options = options || {};\n    var serverArchs = options.serverArchitectures || [archinfo.host()];\n\n    var downloader;\n    var downloaders = [];\n    packageMap.eachPackage(function (packageName, info) {\n      if (info.kind !== 'versioned')\n        return;\n      buildmessage.enterJob(\n        \"checking for \" + packageName + \"@\" + info.version,\n        function () {\n          downloader = self._makeDownloader({\n            packageName: packageName,\n            version: info.version,\n            architectures: serverArchs\n          });\n          if (buildmessage.jobHasMessages()) {\n            downloaders = null;\n            return;\n          }\n          if (downloader && downloaders)\n            downloaders.push(downloader);\n        }\n      );\n    });\n\n    // Did anything fail? Don't download anything.\n    if (! downloaders)\n      return;\n\n    // Nothing to download? Great.\n    if (! downloaders.length)\n      return;\n\n    // Just one package to download? Use a good message.\n    if (downloaders.length === 1) {\n      downloader = downloaders[0];\n      buildmessage.enterJob(\n        \"downloading \" + downloader.packageName + \"@\" + downloader.version,\n        function () {\n          downloader.download();\n        }\n      );\n      return;\n    }\n\n    // Download multiple packages in parallel.\n    // XXX use a better progress bar that shows how many you've\n    // finished downloading.\n    buildmessage.forkJoin({\n      title: 'downloading ' + downloaders.length + ' packages',\n      parallel: true\n    }, downloaders, function (downloader) {\n      downloader.download();\n    });\n  },\n\n  latestMeteorSymlink: function () {\n    var self = this;\n    var linkPath = files.pathJoin(self.root, 'meteor');\n    return files.readLinkToMeteorScript(linkPath, self.platform);\n  },\n\n  linkToLatestMeteor: function (scriptLocation) {\n    var self = this;\n    var linkPath = files.pathJoin(self.root, 'meteor');\n    files.linkToMeteorScript(scriptLocation, linkPath, self.platform);\n  },\n\n  _getPlatform: function () {\n    return this.platform;\n  }\n});\n"]}