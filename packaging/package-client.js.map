{"version":3,"sources":["/tools/packaging/package-client.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACtC,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAE9B,IAAI,MAAM,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACrD,IAAI,WAAW,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AACtD,IAAI,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACtC,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACtC,IAAI,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACzC,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AACvD,IAAI,QAAQ,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAClD,IAAI,UAAU,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAC9D,IAAI,OAAO,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC9C,IAAI,oBAAoB,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAC5D,IAAI,cAAc,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;;;;;AAK5D,IAAI,2BAA2B,GAAG,UAAU,gBAAgB,EAAE;AAC5D,MAAI,SAAS,GAAG,gBAAgB,IAAI,MAAM,CAAC,mBAAmB,EAAE,CAAC;AACjE,SAAO,UAAU,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;CACpD,CAAC;;;;;;;;;AASF,IAAI,mBAAmB,GAAG,YAAY;AACpC,SAAO;AACL,YAAQ,EAAE,EAAE;AACZ,WAAO,EAAE,EAAE;AACX,QAAI,EAAE,KAAK,CAAC,SAAS;GACtB,CAAC;CACH,CAAC;;;AAGF,IAAI,eAAe,GAAG,UAAU,UAAU,EAAE;AAC1C,MAAI,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5C,MAAI,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AAC5D,OAAK,CAAC,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC3D,SAAO,UAAU,CAAC;CACnB,CAAC;;;;;AAKF,OAAO,CAAC,iBAAiB,GAAG,UAAU,IAAI,EAAW;;;;;AAGnD,MAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACnB,QAAI,CAAC,KAAK,EAAE,CAAC;AACb,QAAI,GAAG,OAAO,CAAC,0BAA0B,EAAE,CAAC;GAC7C;;oCAN4C,IAAI;AAAJ,QAAI;;;AAOjD,SAAO,SAAA,IAAI,EAAC,IAAI,MAAA,QAAI,IAAI,CAAC,CAAC;CAC3B,CAAC;;AAEF,IAAI,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,GAAG,YAAmB;AACzE,cAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,MAAI;uCAF+D,IAAI;AAAJ,UAAI;;;AAGrE,WAAO,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GACpD,CAAC,OAAO,CAAC,EAAE;AACV,gBAAY,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;AAC1C,WAAO,IAAI,CAAC;GACb;CACF,CAAC;;;;;;;;;;;;;;;;;AAiBF,IAAI,qBAAqB,GAAG,UAAU,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE;AAC9D,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;;;;AAKxB,MAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACnB,QAAI,CAAC,KAAK,EAAE,CAAC;AACb,QAAI,GAAI,2BAA2B,EAAE,CAAC;GACvC;;AAED,MAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,MAAI,OAAO,IAAI,OAAO,CAAC,aAAa,EAAE;AACpC,YAAQ,CAAC,iBAAiB,GAAG,OAAO,CAAC,aAAa,CAAC;GACpD;AACD,MAAI,OAAO,IAAI,OAAO,CAAC,mBAAmB,EAAE;AAC1C,YAAQ,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;GAC5D;AACD,SAAO,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;CAC7D,CAAC;;;;;;;;;;;;;;;;;;;;;AAqBF,OAAO,CAAC,uBAAuB,GAAG,UAAU,SAAS,EAAE,OAAO,EAAE;AAC9D,SAAO,YAAY,CAAC,QAAQ,CAAC,0BAA0B,EAAE,YAAY;AACnE,WAAO,wBAAwB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;GACrD,CAAC,CAAC;CACJ,CAAC;;AAEF,IAAI,wBAAwB,GAAG,UAAU,SAAS,EAAE,OAAO,EAAE;AAC3D,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,MAAI,SAAS,KAAK,IAAI,EACpB,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;;AAErC,MAAI,IAAI,GAAG,KAAK,CAAC;AACjB,MAAI,GAAG,GAAG,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;;;AAG7B,MAAI,cAAc,GAAG,KAAK,CAAC;;AAE3B,MAAI,KAAK,GAAG,SAAS,CAAC;;AAEtB,MAAI,KAAK,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;AAC5D,gBAAc,IAAI,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;;AAErD,MAAI,IAAI,GAAG,2BAA2B,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;;;;AAIjE,OAAK,CAAC,OAAO,GAAG,CAAC,CAAC;AAClB,gBAAc,IAAI,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;;AAErD,MAAI,WAAW,GAAG,YAAY;AAC5B,QAAI,SAAS,GAAG,SAAS,CAAC,YAAY,EAAE,IAAI,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC;;AAE5D,QAAI,CAAC,KAAK,EAAE;AACV,WAAK,GAAG,EAAE,CAAC;AACX,WAAK,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AAChC,WAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;AACpC,WAAK,CAAC,GAAG,GAAG,AAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,MAAM,IAAK,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAA,AAAC,CAAC;KACzE;;AAED,SAAK,CAAC,OAAO,GACX,AAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,IAC/B,SAAS,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAA,AAAC,CAAC;AACxC,kBAAc,IAAI,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;;AAErD,QAAI,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC;;;AAG1D,QAAI,UAAU,GAAG,qBAAqB,CAAC,IAAI,EAAE,SAAS,EAAE;AACtD,mBAAa,EAAE,OAAO,CAAC,aAAa;AACpC,yBAAmB,EAAE,QAAQ;KAC9B,CAAC,CAAC;;;;AAIH,QAAI,UAAU,CAAC,SAAS,EAAE;AACxB,eAAS,CAAC,KAAK,EAAE,CAAC;;;AAGlB,SAAG,CAAC,SAAS,GAAG,IAAI,CAAC;KACtB;;AAED,QAAI,UAAU,CAAC,qBAAqB,EAAE;AACpC,UAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,UAAI,iBAAiB,GAAG,IAAI,MAAM,CAChC,UAAU,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;AAC9C,UAAI,GAAG,GAAG,IAAI,MAAM,EAAA,CAAC;AACrB,UAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC/C,UAAI,QAAQ,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;AAC1B,gBAAU,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC9C,aAAO,UAAU,CAAC,qBAAqB,CAAC;KACzC;;;;AAID,QAAI,YAAY,GACV,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC;AACnE,aAAS,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;;;;AAI/C,QAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE;AAClE,UAAI,GAAG,IAAI,CAAC;AACZ,aAAO;KACR;;AAED,QAAI,UAAU,CAAC,QAAQ,EAAE;AACvB,UAAI,GAAG,IAAI,CAAC;KACb;GACF,CAAC;;AAEF,MAAI;AACF,WAAO,CAAC,IAAI,EAAE;AACZ,iBAAW,EAAE,CAAC;KACf;GACF,SAAS;AACR,QAAI,CAAC,KAAK,EAAE,CAAC;GACd;;AAED,SAAO,GAAG,CAAC;CACZ,CAAC;;;;;;AAMF,OAAO,CAAC,0BAA0B,GAAG,YAAY;AAC/C,SAAO,UAAU,CAAC,kBAAkB,CAClC,MAAM,CAAC,mBAAmB,EAAE,EAC5B,MAAM,CAAC,sBAAsB,EAAE,EAC/B,gBAAgB,CACjB,CAAC;CACH,CAAC;;;;;AAKF,IAAI,YAAY,GAAG,UAAU,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE;AAChE,cAAY,CAAC,WAAW,EAAE,CAAC;;AAE3B,MAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;;AAExB,MAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;AACrD,MAAI,cAAc,GAAG,IAAI,GAAG,GAAG,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;AAC9D,MAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAC7C,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;;;;AAI1C,MAAI,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9E,MAAI,CAAE,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;AACrC,gBAAY,CAAC,KAAK,CAAC,+CAA+C,GAC/C,gBAAgB,CAAC,CAAC;AACrC,WAAO,IAAI,CAAC;GACb;;;;;;;AAOD,GAAC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE;AAClC,SAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,EAC7B,KAAK,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;GACrD,CAAC,CAAC;;;;;;;;;;AAUH,MAAI,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;AACvE,MAAI,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAClC,MAAM,KAAK,CAAC,iCAAiC,GAAG,kBAAkB,CAAC,CAAC;AACtE,MAAI,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;AAChE,MAAI,CAAE,wBAAwB,EAC5B,MAAM,KAAK,CAAC,yCAAyC,CAAC,CAAC;AACzD,MAAI,cAAc,GAAG,IAAI,oBAAoB,CAAC,cAAc,CAAC;AAC3D,YAAQ,EAAE,kBAAkB;GAC7B,CAAC,CAAC;AACH,gBAAc,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;;;;;;AAM/C,MAAI,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,cAAc,GAAG,MAAM,CAAC,CAAC;AACrE,OAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;;AAE7C,MAAI,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;AAChD,MAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;;AAExC,SAAO;AACL,iBAAa,EAAE,aAAa;AAC5B,eAAW,EAAE,WAAW;AACxB,YAAQ,EAAE,QAAQ;GACnB,CAAC;CACH,CAAC;;;;;AAKF,IAAI,UAAU,GAAG,UAAU,MAAM,EAAE,QAAQ,EAAE;AAC3C,cAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,MAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;AACrC,MAAI,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAC1C,MAAI;;AAEF,eAAW,CAAC,MAAM,CAAC;AACjB,YAAM,EAAE,KAAK;AACb,SAAG,EAAE,MAAM;AACX,aAAO,EAAE;AACP,wBAAgB,EAAE,IAAI;AACtB,sBAAc,EAAE,0BAA0B;AAC1C,mBAAW,EAAE,aAAa;OAC3B;AACD,gBAAU,EAAE,EAAE;AACd,sBAAgB,EAAE,IAAI;KACvB,CAAC,CAAC;GACJ,CAAC,OAAO,GAAG,EAAE;;AAEZ,gBAAY,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzE,WAAO,KAAK,CAAC;GACd,SAAS;AACR,MAAE,CAAC,KAAK,EAAE,CAAC;GACZ;AACD,SAAO,IAAI,CAAC;CACb,CAAC;;AAEF,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC;;AAEhC,IAAI,WAAW,GAAG,UAAU,OAAO,EAAE;AACnC,cAAY,CAAC,WAAW,EAAE,CAAC;;AAE3B,MAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACnC,MAAI,cAAc,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;AAC3C,MAAI,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;;;;;;AAM1D,SAAO,CAAC,UAAU,CAAC,WAAW,EAAE;;;AAG9B,2CAAuC,EAAE,IAAI;GAC9C,CAAC,CAAC;;AAEH,MAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,cAAc,GAAG,MAAM,CAAC,CAAC;;AAEpE,OAAK,CAAC,aAAa,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;;AAE/C,MAAI,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AAC/C,MAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE;;;;;;AAMzC,UAAM,EAAE,UAAU,YAAY,EAAE;AAC9B,UAAI,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC/C,aAAO,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,cAAc,IACpD,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KAChC;GACF,CAAC,CAAC;;AAEH,SAAO;AACL,gBAAY,EAAE,YAAY;AAC1B,eAAW,EAAE,WAAW;AACxB,YAAQ,EAAE,QAAQ;GACnB,CAAC;CACH,CAAC;;AAEF,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;;AAElC,IAAI,kBAAkB,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;AAChD,cAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,MAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;;;;AAIxB,MAAI,YAAY,CAAC;AACjB,cAAY,CAAC,QAAQ,CAAC,qBAAqB,GAAG,IAAI,EAAE,YAAY;AAC9D,gBAAY,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;GACrC,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,SAAO,YAAY,CAAC;CACrB,CAAC;;AAEF,IAAI,mBAAmB,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE;AAC/D,cAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,MAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;;AAExB,MAAI,UAAU,CAAC;AACf,cAAY,CAAC,QAAQ,CAAC,6BAA6B,GAAG,IAAI,EAAE,YAAY;AACtE,cAAU,GAAG,mBAAmB,CAAC,IAAI,EAAE,oBAAoB,EAAE;AAC3D,iBAAW,EAAE,OAAO,CAAC,IAAI;AACzB,aAAO,EAAE,OAAO,CAAC,OAAO;AACxB,wBAAkB,EAAE,OAAO,CAAC,kBAAkB,EAAE;KACjD,CAAC,CAAC;GACJ,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,cAAY,CAAC,QAAQ,CAAC,iBAAiB,EAAE,YAAY;AACnD,cAAU,CAAC,UAAU,CAAC,SAAS,EACpB,YAAY,CAAC,YAAY,CAAC,CAAC;GACvC,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,cAAY,CAAC,QAAQ,CAAC,+BAA+B,GAAG,IAAI,EAAE,YAAY;AACxE,uBAAmB,CAAC,IAAI,EAAE,qBAAqB,EAC3B,UAAU,CAAC,WAAW,EACtB,YAAY,CAAC,WAAW,EACxB,YAAY,CAAC,QAAQ,CAAC,CAAC;GAC5C,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;CACV,CAAC;;AAEF,IAAI,4BAA4B,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;AAC1D,qBAAmB,CAAC,IAAI,EAAE,OAAO,EAAE,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;CACvE,CAAC;;AAEF,OAAO,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;;;AAGpE,OAAO,CAAC,kCAAkC,GAAG,UAAU,KAAK,EAAE;AAC5D,YAAU,CAAC,qBAAqB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;CAC3D,CAAC;;;;;;;;;;;;AAaF,OAAO,CAAC,qBAAqB,GAAG,UAAU,OAAO,EAAE;AACjD,cAAY,CAAC,WAAW,EAAE,CAAC;;AAE3B,MAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;AAC9B,MAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;;AAEpC,MAAI,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;AAC9B,MAAI,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;;AAEpC,MAAI,CAAE,OAAO,EAAE;AACb,gBAAY,CAAC,KAAK,CAChB,6DAA6D,CAAC,CAAC;AACjE,WAAO;GACR;;;;AAID,MAAI,CAAE,UAAU,EAAE;AAChB,cAAU,GAAG,mBAAmB,EAAE,CAAC;GACpC;;AAED,MAAI,YAAY,GAAG;AACjB,OAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,EAAE;AACrC,eAAW,EAAE,aAAa,CAAC,QAAQ,CAAC,OAAO;AAC3C,mBAAe,EAAE,UAAU,CAAC,OAAO;GACpC,CAAC;;;;AAIF,MAAI,CAAE,YAAY,CAAC,aAAa,CAAC,EAAE;AACjC,gBAAY,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;AACnF,WAAO;GACR;;AAED,MAAI,YAAY,CAAC,aAAa,CAAC,IAC3B,YAAY,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,GAAG,EAAE;AAC5C,gBAAY,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;AACvD,WAAO;GACR;;AAED,MAAI,YAAY,CAAC,iBAAiB,CAAC,CAAC,MAAM,GAAG,IAAI,EAAE;AACjD,gBAAY,CAAC,KAAK,CAChB,uEAAuE,GACvE,+DAA+D,GAC/D,gEAAgE,CAAC,CAAC;AACpE,WAAO;GACR;;;AAGD,MAAI,iBAAiB,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AAChE,cAAY,CAAC,QAAQ,CAAC,mBAAmB,EAAE,YAAY;AACrD,uBAAmB,CACjB,IAAI,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;GACnE,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAAE,OAAO;;;AAG1C,cAAY,CAAC,QAAQ,CAAC,yBAAyB,EAAE,YAAY;AAC3D,QAAI,UAAU,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;AAC7C,QAAI,UAAU,GACR,mBAAmB,CAAC,IAAI,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAAC;AACnE,QAAI,CAAE,UAAU,EAAE,OAAO;AACzB,QAAI,CAAE,UAAU,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE,OAAO;AACrD,uBAAmB,CACjB,IAAI,EAAE,eAAe,EAAE,UAAU,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;GAC7E,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAAE,OAAO;CAG3C,CAAC;;;;;;;;;;;;;;;;;;;AAmBF,OAAO,CAAC,cAAc,GAAG,UAAU,OAAO,EAAE;AAC1C,cAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,MAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;AAC9B,MAAI,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;;AAE5C,MAAI,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;AAC9B,MAAI,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;;AAEpC,MAAI,OAAO,OAAI,IAAI,OAAO,CAAC,eAAe,EACxC,MAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC;;;AAG/C,OAAK,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3D,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;;AAGT,MAAI,CAAE,OAAO,EAAE;AACb,gBAAY,CAAC,KAAK,CAChB,+DAA+D,CAAC,CAAC;AACnE,WAAO;GACR;;;;;AAKD,MAAI,CAAE,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE;AACpC,gBAAY,CAAC,KAAK,CAChB,wDAAwD,GACtD,oCAAoC,CAAC,CAAC;AAC1C,WAAO;GACR;;AAED,MAAI,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE;AAC/C,gBAAY,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;AACvD,WAAO;GACR;;;AAGD,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACnB,QAAI,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACnD,QAAI,CAAE,UAAU,EAAE;AAChB,kBAAY,CAAC,KAAK,CAChB,4BAA4B,GAAG,IAAI,GACjC,6DAA6D,CAAC,CAAC;AACnE,aAAO;KACR;;AAED,QAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE;AAC7C,kBAAY,CAAC,KAAK,CAChB,0CAA0C,GAAG,IAAI,GAAG,UAAU,GAC5D,kDAAkD,CAAC,CAAC;KACzD;GACF;;;;AAID,MAAI,UAAU,GAAG,YAAY,CAAC,QAAQ,CACpC,0BAA0B,EAC1B,YAAY;AACV,WAAO,aAAa,CAAC,aAAa,EAAE,CAAC;GACxC,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;AACT,MAAI,UAAU,IAAK,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,SAAS,AAAC,EAAE;AACvD,gBAAY,CAAC,KAAK,CAChB,uEAAuE,GACvE,sDAAsD,GACtD,oDAAoD,CAAC,CAAC;AACxD,WAAO;GACR;;AAED,MAAI,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,EAAE;AAClD,gBAAY,CAAC,KAAK,CAChB,uEAAuE,GACvE,+DAA+D,GAC/D,gEAAgE,CAAC,CAAC;AACpE,WAAO;GACR;;;;;;AAMD,MAAI,CAAE,UAAU,EAAE;AAChB,cAAU,GAAG,mBAAmB,EAAE,CAAC;GACpC;AACD,MAAI,UAAU,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;;AAE7C,MAAI,WAAW,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;;;AAGxD,GAAC,CAAC,IAAI,CAAC,WAAW,EAAE,UAAS,IAAI,EAAE,KAAK,EAAE;AACxC,QAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;AAC3B,UAAI,aAAa,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,EAAE,IAC1C,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;;;;;AAKjD,YAAI,aAAa,GACX,cAAc,CAAC,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;;AAElE,YAAI,CAAC,UAAU,GAAG,aAAa,CAAC;OACjC,MAAM,IAAI,KAAK,KAAK,QAAQ,EAAE;;;;;;;;;;;OAW9B,MAAM;AACL,sBAAY,CAAC,KAAK,CAChB,oDAAoD,GAAG,KAAK,CAAC,CAAC;SACjE;KACF;GACF,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,MAAI,OAAO,GAAG,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC3D,MAAI,CAAE,OAAO,EACX,MAAM,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;;;;;AAKpC,MAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAC5B,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,oBAAoB,CAAC,EAAE;AAChD,eAAW,CAAC,oBAAoB,CAAC,GAAG;AAClC,gBAAU,EAAE,OAAO;;;;AAInB,gBAAU,EAAE,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;KAC3B,CAAC;GACH;;AAED,MAAI,WAAW,GAAG,OAAO,CAAC,6BAA6B,CACrD,aAAa,CAAC,UAAU,CAAC,CAAC;AAC5B,MAAI,CAAE,WAAW,EACf,MAAM,KAAK,CAAC,iDAAiD,CAAC,CAAC;;;;AAIjE,MAAI,aAAa,CAAC,QAAQ,EAAE;AAC1B,QAAI,WAAW,GAAG,cAAc,CAAC,YAAY,CAAC,UAAU,CACtD,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC1B,QAAI,CAAE,WAAW,EACf,MAAM,KAAK,CAAC,iBAAiB,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC1D,QAAI,eAAe,GAAG,WAAW,CAAC,6BAA6B,CAC7D,aAAa,CAAC,UAAU,CAAC,CAAC;AAC5B,QAAI,CAAE,eAAe,EACnB,MAAM,KAAK,CAAC,sDAAsD,CAAC,CAAC;AACtE,eAAW,GAAG,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;GACrD;;AAED,MAAI,kBAAkB,CAAC;AACvB,cAAY,CAAC,QAAQ,CAAC,sBAAsB,GAAG,IAAI,EAAE,YAAY;AAC/D,sBAAkB,GAAG,YAAY,CAC/B,OAAO,EAAE,WAAW,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;GACnD,CAAC,CAAC;AACH,MAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;;AAGT,MAAI,OAAO,OAAI,EAAE;AACf,gBAAY,CAAC,QAAQ,CAAC,mBAAmB,GAAG,IAAI,EAAE,YAAY;AAC5D,yBAAmB,CAAC,IAAI,EAAE,eAAe,EAAE;AACzC,YAAI,EAAE,aAAa,CAAC,IAAI;OACzB,CAAC,CAAC;KACJ,CAAC,CAAC;AACH,QAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;GACV;;AAED,MAAI,OAAO,CAAC,eAAe,EAAE;AAC3B,QAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAChE,QAAI,CAAE,cAAc,EAAE;AACpB,kBAAY,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;AAC9C,aAAO;KACR;AACD,QAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,KAAK,kBAAkB,CAAC,QAAQ,EAAE;AAClE,kBAAY,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACxE,aAAO;KACR;;AAED,QAAI,CAAE,OAAO,CAAC,iBAAiB,EAAE;AAC/B,kCAA4B,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5C,UAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;KACV;;;GAGF,MAAM;AACL,UAAI,UAAU,CAAC;AACf,kBAAY,CAAC,QAAQ,CAAC,yBAAyB,GAAG,IAAI,EAAE,YAAY;AAClE,YAAI,SAAS,GAAG;AACd,qBAAW,EAAE,aAAa,CAAC,IAAI;AAC/B,iBAAO,EAAE,OAAO;AAChB,qBAAW,EAAE,aAAa,CAAC,QAAQ,CAAC,OAAO;AAC3C,yBAAe,EAAE,UAAU,CAAC,OAAO;AACnC,aAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,GAAG;AAC/B,yBAAe,EAAE,QAAQ,CAAC,QAAQ;AAClC,yBAAe,EAAE,aAAa,CAAC,eAAe,EAAE;AAChD,mBAAS,EAAE,aAAa,CAAC,SAAS;AAClC,kBAAQ,EAAE,aAAa,CAAC,QAAQ;AAChC,iBAAO,EAAE,aAAa,CAAC,UAAU,EAAE;AACnC,qBAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI;AACjC,sBAAY,EAAE,WAAW;SAC1B,CAAC;AACF,kBAAU,GAAG,mBAAmB,CAAC,IAAI,EAAE,sBAAsB,EAAE,SAAS,CAAC,CAAC;OAC3E,CAAC,CAAC;AACH,UAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;;;;;;;AAQT,kBAAY,CAAC,QAAQ,CAAC,yBAAyB,EAAE,YAAY;AAC3D,kBAAU,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;OAC9C,CAAC,CAAC;AACH,UAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,kBAAY,CAAC,QAAQ,CAAC,kBAAkB,EAAE,YAAY;AACpD,kBAAU,CAAC,UAAU,CAAC,SAAS,EAAE,kBAAkB,CAAC,aAAa,CAAC,CAAC;OACpE,CAAC,CAAC;AACH,UAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,UAAI,CAAE,OAAO,CAAC,iBAAiB,EAAE;AAC/B,YAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACrD,YAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;OACV;;AAED,UAAI,MAAM,GAAG;AACX,mBAAW,EAAE,kBAAkB,CAAC,WAAW;AAC3C,gBAAQ,EAAE,kBAAkB,CAAC,QAAQ;AACrC,kBAAU,EAAE,UAAU,CAAC,IAAI;OAC5B,CAAC;AACF,kBAAY,CAAC,QAAQ,CAAC,4BAA4B,EAAE,YAAY;AAC9D,2BAAmB,CACjB,IAAI,EAAE,uBAAuB,EAAE,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;OAClE,CAAC,CAAC;AACH,UAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;;AAET,UAAI,CAAE,OAAO,CAAC,iBAAiB,EAAE;AAC/B,2BAAmB,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;AACjD,YAAI,YAAY,CAAC,cAAc,EAAE,EAC/B,OAAO;OACV;KACF;;AAED,SAAO;CACR,CAAC;;;;;;;;;AASF,OAAO,CAAC,aAAa,GAAG,UAAU,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;AACvD,MAAI,UAAU,GAAG,eAAe,IAC7B,SAAS,GAAG,SAAS,GAAG,SAAS,CAAA,AAAC,CAAC;;AAEtC,MAAI;AACF,WAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;GACnD,CAAC,OAAO,GAAG,EAAE;AACZ,QAAI,GAAG,CAAC,KAAK,KAAK,GAAG,EAAE;AACrB,aAAO,KAAK,CAAC;KACd;;;;;AAKD,WAAO,IAAI,CAAC;GACb;AACD,SAAO,IAAI,CAAC;CACb,CAAC","file":"tools/packaging/package-client.js.map","sourcesContent":["var Future = require('fibers/future');\nvar _ = require('underscore');\n\nvar config = require('../meteor-services/config.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar release = require('./release.js');\nvar files = require('../fs/files.js');\nvar utils = require('../utils/utils.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar compiler = require('../isobuild/compiler.js');\nvar authClient = require('../meteor-services/auth-client.js');\nvar catalog = require('./catalog/catalog.js');\nvar projectContextModule = require('../project-context.js');\nvar colonConverter = require('../utils/colon-converter.js');\n\n// Opens a DDP connection to a package server. Loads the packages needed for a\n// DDP connection, then calls DDP connect to the package server URL in config,\n// using a current user-agent header composed by http-helpers.js.\nvar openPackageServerConnection = function (packageServerUrl) {\n  var serverUrl = packageServerUrl || config.getPackageServerUrl();\n  return authClient.openServiceConnection(serverUrl);\n};\n\n// We don't let the user upload a blank README for UX reasons, but we would\n// prefer that the server move to a world with 'readme' files for everything in\n// the future. As a way to breach these interfaces, for now, we are going to\n// upload blank documentation files when null docs are requested.\n//\n// This function generates a Readme object for a blank readme file, as well as\n// the file itself.\nvar generateBlankReadme = function () {\n  return {\n    contents: \"\",\n    excerpt: \"\",\n    hash: files.blankHash\n  };\n};\n\n// Save a readme file to a temporary path.\nvar saveReadmeToTmp = function (readmeInfo) {\n  var tempReadmeDir = files.mkdtemp('readme');\n  var readmePath = files.pathJoin(tempReadmeDir, \"Readme.md\");\n  files.writeFileAtomically(readmePath, readmeInfo.contents);\n  return readmePath;\n};\n\n// Given a connection, makes a call to the package server.  (Checks to see if\n// the connection is connected, and reconnects if needed -- a workaround for\n// the fact that connections in the tool do not reconnect)\nexports.callPackageServer = function (conn, ...args) {\n  // XXX This is broken since it doesn't actually replace the conn in the\n  // caller, so it'll happen on every subsequent call\n  if (!conn.connected) {\n    conn.close();\n    conn = exports.loggedInPackagesConnection();\n  }\n  return conn.call(...args);\n};\n\nvar callPackageServerBM = exports.callPackageServerBM = function (...args) {\n  buildmessage.assertInJob();\n  try {\n    return exports.callPackageServer.apply(null, args);\n  } catch (e) {\n    buildmessage.error(e.reason || e.message);\n    return null;\n  }\n};\n\n// Requests and returns one page of new package data that we haven't cached on\n// disk. We assume that data is cached chronologically, so essentially, we are\n// asking for a diff from the last time that we did this.\n// Takes in:\n// - conn: the connection to use (does not have to be logged in)\n// - syncToken: a syncToken object to be sent to the server that\n//   represents the last time that we talked to the server.\n// - options:\n//    - useShortPages (Boolean). Ask the server for pages of ~3 records\n//      instead of ~100, for testing pagination.\n//\n// Returns an object, containing the following fields:\n//  - syncToken: a new syncToken object, that we can pass to the server in the future.\n//  - collections: an object keyed by the name of server collections, with the\n//    records as an array of javascript objects.\nvar loadRemotePackageData = function (conn, syncToken, options) {\n  options = options || {};\n\n  // Did we get disconnected between retries somehow? Then we should open a new\n  // connection. We shouldn't use the callPackageServer method here though,\n  // since we don't need to authenticate.\n  if (!conn.connected) {\n    conn.close();\n    conn =  openPackageServerConnection();\n  }\n\n  var syncOpts = {};\n  if (options && options.useShortPages) {\n    syncOpts.shortPagesForTest = options.useShortPages;\n  }\n  if (options && options.compressCollections) {\n    syncOpts.compressCollections = options.compressCollections;\n  }\n  return conn.call('syncNewPackageData', syncToken, syncOpts);\n};\n\n// Contacts the package server to get the latest diff and writes changes to\n// disk.\n//\n// Takes in the dataStore, which is an example of the remote catalog. Contacts\n// the package server and updates the sql database with the most recent\n// information.\n//\n// Returns null if contacting the server times out, or an object with the\n// following keys:\n//     resetData : true if we should reset the database, otherwise false.\n//     connectionFailed: true if we failed to connect to the server.\n//\n// options can include:\n//  - packageStorageFile: String. The file to write the data to (overrides\n//    `config.getPackageStorage()`)\n//  - packageServerUrl: String. The package server (overrides\n//    `config.getPackageServerUrl()`)\n//  - useShortPages: Boolean. Request short pages of ~3 records from the\n//    server, instead of ~100 that it would send otherwise\nexports.updateServerPackageData = function (dataStore, options) {\n  return buildmessage.enterJob('updating package catalog', function () {\n    return _updateServerPackageData(dataStore, options);\n  });\n};\n\nvar _updateServerPackageData = function (dataStore, options) {\n  var self = this;\n  options = options || {};\n  if (dataStore === null)\n    throw Error(\"Data store expected\");\n\n  var done = false;\n  var ret = {resetData: false};\n\n  // For now, we don't have a great progress metric, so just use a spinner\n  var useProgressbar = false;\n\n  var start = undefined;\n  // Guess that we're about an hour behind, as an opening guess\n  var state = { current: 0, end: 60 * 60 * 1000, done: false};\n  useProgressbar && buildmessage.reportProgress(state);\n\n  var conn = openPackageServerConnection(options.packageServerUrl);\n\n  // Provide some progress indication for connection\n  // XXX though it is just a hack\n  state.current = 1;\n  useProgressbar && buildmessage.reportProgress(state);\n\n  var getSomeData = function () {\n    var syncToken = dataStore.getSyncToken() || {format: \"1.1\"};\n\n    if (!start) {\n      start = {};\n      start.builds = syncToken.builds;\n      start.versions = syncToken.versions;\n      state.end = (Date.now() - start.builds) + (Date.now() - start.versions);\n    }\n    // XXX: This is a hack... syncToken should have a % done\n    state.current =\n      (syncToken.builds - start.builds) +\n      (syncToken.versions - start.versions);\n    useProgressbar && buildmessage.reportProgress(state);\n\n    var compress = !!process.env.METEOR_CATALOG_COMPRESS_RPCS;\n\n    // (loadRemotePackageData may throw)\n    var remoteData = loadRemotePackageData(conn, syncToken, {\n      useShortPages: options.useShortPages,\n      compressCollections: compress\n    });\n\n    // Is the remote server telling us to ignore everything we've heard before?\n    // OK, we can do that.\n    if (remoteData.resetData) {\n      dataStore.reset();\n      // The caller may want to take this as a cue to delete packages from the\n      // tropohouse.\n      ret.resetData = true;\n    }\n\n    if (remoteData.collectionsCompressed) {\n      var zlib = require('zlib');\n      var colsGzippedBuffer = new Buffer(\n        remoteData.collectionsCompressed, 'base64');\n      var fut = new Future;\n      zlib.gunzip(colsGzippedBuffer, fut.resolver());\n      var colsJSON = fut.wait();\n      remoteData.collections = JSON.parse(colsJSON);\n      delete remoteData.collectionsCompressed;\n    }\n\n    // We always write to the data store; the fact there is no data is itself\n    // data!  e.g. the last-refresh timestamp\n    var syncComplete =\n          _.isEqual(remoteData.collections, {}) || remoteData.upToDate;\n    dataStore.insertData(remoteData, syncComplete);\n\n    // If there is no new data from the server, don't bother writing things to\n    // disk (unless we were just told to reset everything).\n    if (!remoteData.resetData && _.isEqual(remoteData.collections, {})) {\n      done = true;\n      return;\n    }\n\n    if (remoteData.upToDate) {\n      done = true;\n    }\n  };\n\n  try {\n    while (!done) {\n      getSomeData();\n    }\n  } finally {\n    conn.close();\n  }\n\n  return ret;\n};\n\n// Returns a logged-in DDP connection to the package server, or null if\n// we cannot log in. If an error unrelated to login occurs\n// (e.g. connection to package server times out), then it will be\n// thrown.\nexports.loggedInPackagesConnection = function () {\n  return authClient.loggedInConnection(\n    config.getPackageServerUrl(),\n    config.getPackageServerDomain(),\n    \"package-server\"\n  );\n};\n\n// XXX this is missing a few things. In retrospect a better approach here might\n//     be to actually make \"save source somewhere else\" or perhaps \"add source\n//     to tarball\" be part of the package build itself...\nvar bundleSource = function (isopack, includeSources, packageDir) {\n  buildmessage.assertInJob();\n\n  var name = isopack.name;\n\n  var tempDir = files.mkdtemp('build-source-package-');\n  var packageTarName = name + '-' + isopack.version + '-source';\n  var dirToTar = files.pathJoin(tempDir, 'source',\n    colonConverter.convert(packageTarName));\n  // XXX name probably needs to be escaped for windows?\n  // XXX note that publish-for-arch thinks it knows how this tarball is laid\n  //     out, which is a bit of a shame\n  var sourcePackageDir = files.pathJoin(dirToTar, colonConverter.convert(name));\n  if (! files.mkdir_p(sourcePackageDir)) {\n    buildmessage.error('Failed to create temporary source directory: ' +\n                       sourcePackageDir);\n    return null;\n  }\n\n  // We copy source files into a temp directory and then tar up the temp\n  // directory. It would be great if we could avoid the copy, but as far\n  // as we can tell, this is the only way to get a tarball with the\n  // directory structure that we want (<package name>-<version-source/\n  // at the top level).\n  _.each(includeSources, function (f) {\n    files.copyFile(files.pathJoin(packageDir, f),\n                   files.pathJoin(sourcePackageDir, f));\n  });\n\n  // Write a package map to `.versions` inside the source tarball.  Note that\n  // this differs in two ways from the `.versions` file that is maintained\n  // inside standalone packages by 'meteor publish':\n  //  (a) It only contains the direct, directly implied, and linked-into-plugin\n  //      dependencies of the package, not all transitive dependencies.\n  //  (b) It is ALWAYS put into the source tarball, even if the package came\n  //      from inside an app, whereas the package-source-tree .versions file\n  //      is only used for standalone packages\n  var packageMapFilename = files.pathJoin(sourcePackageDir, '.versions');\n  if (files.exists(packageMapFilename))\n    throw Error(\".versions file already exists? \" + packageMapFilename);\n  var pluginProviderPackageMap = isopack.pluginProviderPackageMap;\n  if (! pluginProviderPackageMap)\n    throw Error(\"no pluginProviderPackageMap on isopack?\");\n  var packageMapFile = new projectContextModule.PackageMapFile({\n    filename: packageMapFilename\n  });\n  packageMapFile.write(pluginProviderPackageMap);\n\n  // We put this inside the temp dir because mkdtemp makes sure that the\n  // temp dir gets cleaned up on process exit, so we don't have to worry\n  // about cleaning up our tarball (or our copied source files)\n  // ourselves.\n  var sourceTarball = files.pathJoin(tempDir, packageTarName + '.tgz');\n  files.createTarball(dirToTar, sourceTarball);\n\n  var tarballHash = files.fileHash(sourceTarball);\n  var treeHash = files.treeHash(dirToTar);\n\n  return {\n    sourceTarball: sourceTarball,\n    tarballHash: tarballHash,\n    treeHash: treeHash\n  };\n};\n\n// Uploads a file at a filepath to the HTTP put URL.\n//\n// Returns true on success and false on failure.\nvar uploadFile = function (putUrl, filepath) {\n  buildmessage.assertInJob();\n  var size = files.stat(filepath).size;\n  var rs = files.createReadStream(filepath);\n  try {\n    // Use getUrl instead of request, to throw on 4xx/5xx.\n    httpHelpers.getUrl({\n      method: 'PUT',\n      url: putUrl,\n      headers: {\n        'content-length': size,\n        'content-type': 'application/octet-stream',\n        'x-amz-acl': 'public-read'\n      },\n      bodyStream: rs,\n      bodyStreamLength: size\n    });\n  } catch (err) {\n    // XXX: getUrl's error handling is terrible and we should fix it there.\n    buildmessage.error(typeof err === \"string\" ? err : err.error.toString());\n    return false;\n  } finally {\n    rs.close();\n  }\n  return true;\n};\n\nexports.uploadFile = uploadFile;\n\nvar bundleBuild = function (isopack) {\n  buildmessage.assertInJob();\n\n  var tempDir = files.mkdtemp('bp-');\n  var packageTarName = isopack.tarballName();\n  var tarInputDir = files.pathJoin(tempDir, packageTarName);\n\n  // Note that we do need to do this even though we already have the isopack on\n  // disk in an IsopackCache, because we don't want to include\n  // isopack-buildinfo.json. (We don't include it because we're not passing\n  // includeIsopackBuildInfo to saveToPath here.)\n  isopack.saveToPath(tarInputDir, {\n    // When publishing packages that don't use new registerCompiler plugins,\n    // make sure that old Meteors can use it too\n    includePreCompilerPluginIsopackVersions: true\n  });\n\n  var buildTarball = files.pathJoin(tempDir, packageTarName + '.tgz');\n\n  files.createTarball(tarInputDir, buildTarball);\n\n  var tarballHash = files.fileHash(buildTarball);\n  var treeHash = files.treeHash(tarInputDir, {\n    // We don't include any package.json from an npm module in the tree hash,\n    // because npm isn't super consistent about what it puts in there (eg, does\n    // it include the \"readme\" field)? This ends up leading to spurious\n    // differences. The tree hash will still notice any actual CODE changes in\n    // the npm packages.\n    ignore: function (relativePath) {\n      var pieces = relativePath.split(files.pathSep);\n      return pieces.length && _.last(pieces) === 'package.json'\n        && _.contains(pieces, 'npm');\n    }\n  });\n\n  return {\n    buildTarball: buildTarball,\n    tarballHash: tarballHash,\n    treeHash: treeHash\n  };\n};\n\nexports.bundleBuild = bundleBuild;\n\nvar createBuiltPackage = function (conn, isopack) {\n  buildmessage.assertInJob();\n  var name = isopack.name;\n\n  // Note: we really want to do this before createPackageBuild, because the URL\n  // we get from createPackageBuild will expire!\n  var bundleResult;\n  buildmessage.enterJob(\"bundling build for \" + name, function () {\n    bundleResult = bundleBuild(isopack);\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n\n  return bundleResult;\n};\n\nvar publishBuiltPackage = function (conn, isopack, bundleResult) {\n  buildmessage.assertInJob();\n  var name = isopack.name;\n\n  var uploadInfo;\n  buildmessage.enterJob('creating package build for ' + name, function () {\n    uploadInfo = callPackageServerBM(conn, 'createPackageBuild', {\n      packageName: isopack.name,\n      version: isopack.version,\n      buildArchitectures: isopack.buildArchitectures()\n    });\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n\n  buildmessage.enterJob(\"uploading build\", function () {\n    uploadFile(uploadInfo.uploadUrl,\n               bundleResult.buildTarball);\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n\n  buildmessage.enterJob('publishing package build for ' + name, function () {\n    callPackageServerBM(conn, 'publishPackageBuild',\n                        uploadInfo.uploadToken,\n                        bundleResult.tarballHash,\n                        bundleResult.treeHash);\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n};\n\nvar createAndPublishBuiltPackage = function (conn, isopack) {\n  publishBuiltPackage(conn, isopack, createBuiltPackage(conn, isopack));\n};\n\nexports.createAndPublishBuiltPackage = createAndPublishBuiltPackage;\n\n// Handle an error thrown on trying to connect to the package server.\nexports.handlePackageServerConnectionError = function (error) {\n  authClient.handleConnectionError(error, \"package server\");\n};\n\n\n// Update the package metdata in the server catalog. Chane the docs,\n// descriptions and the Git URL to new values.\n//\n// options:\n// - packageSource: the packageSource for this package.\n// - readmeInfo: null, or an object containing docs information for this package.\n// - connection: the open, logged-in connection over which we should talk to the\n//   package server. DO NOT CLOSE this connection here.\n//\n// Return true on success and an error code otherwise.\nexports.updatePackageMetadata = function (options) {\n  buildmessage.assertInJob();\n\n  var packageSource = options.packageSource;\n  var conn = options.connection;\n  var readmeInfo = options.readmeInfo;\n\n  var name = packageSource.name;\n  var version = packageSource.version;\n\n  if (! version) {\n    buildmessage.error(\n      \"Package cannot be updated because it doesn't have a version\");\n    return;\n  }\n\n  // For now, documentation is optional on the client, so we have to give people\n  // a way to remove it with 'documentation: null'.\n  if (! readmeInfo) {\n    readmeInfo = generateBlankReadme();\n  }\n\n  var dataToUpdate = {\n    git: packageSource.metadata.git || \"\",\n    description: packageSource.metadata.summary,\n    longDescription: readmeInfo.excerpt\n  };\n\n  // Check that the metadata fits under the established limits, and give helpful\n  // feedback.\n  if (! dataToUpdate[\"description\"]) {\n    buildmessage.error(\"Please provide a short description to use in 'meteor search'\");\n    return;\n  }\n\n  if (dataToUpdate[\"description\"] &&\n      dataToUpdate[\"description\"].length > 100) {\n    buildmessage.error(\"Summary must be under 100 chars.\");\n    return;\n  }\n\n  if (dataToUpdate[\"longDescription\"].length > 1500) {\n    buildmessage.error(\n      \"Longform package description is too long. Meteor uses the section of \" +\n      \"the Markdown documentation file between the first and second \" +\n      \"headings. That section must be less than 1500 characters long.\");\n    return;\n  }\n\n  // Update the general metadata.\n  var versionIdentifier = { packageName: name, version: version };\n  buildmessage.enterJob('updating metadata', function () {\n    callPackageServerBM(\n      conn, \"changeVersionMetadata\", versionIdentifier, dataToUpdate);\n  });\n  if (buildmessage.jobHasMessages()) return;\n\n  // Upload the new Readme.\n  buildmessage.enterJob('uploading documentation', function () {\n    var readmePath = saveReadmeToTmp(readmeInfo);\n    var uploadInfo =\n          callPackageServerBM(conn, \"createReadme\", versionIdentifier);\n    if (! uploadInfo) return;\n    if (! uploadFile(uploadInfo.url, readmePath)) return;\n    callPackageServerBM(\n      conn, \"publishReadme\", uploadInfo.uploadToken, { hash: readmeInfo.hash });\n  });\n  if (buildmessage.jobHasMessages()) return;\n\n\n};\n\n// Publish the package information into the server catalog. Create new records\n// for the package (if needed), the version and the build; upload source and\n// isopack.\n//\n// options:\n// - packageSource: the packageSource for this package.\n// - connection: the open, logged-in connection over which we should talk to the\n//   package server. DO NOT CLOSE this connection here.\n// - projectContext: the (probably temporary) ProjectContext to use. Must have\\\n//   already built local packages\n// - new: this package is new, we should call createPackage to create a new\n//   package record.\n// - existingVersion: we expect the version to exist already, and for us\n//   to merely be providing a new build of the same source\n// - doNotPublishBuild: do not publish the build of this package.\n//\n// Return true on success and an error code otherwise.\nexports.publishPackage = function (options) {\n  buildmessage.assertInJob();\n  var packageSource = options.packageSource;\n  var conn = options.connection;\n  var projectContext = options.projectContext;\n\n  var name = packageSource.name;\n  var version = packageSource.version;\n\n  if (options.new && options.existingVersion)\n    throw Error(\"is it new or does it exist?!?\");\n\n  // Check that the package name is valid.\n  utils.validatePackageName(name, { useBuildmessage: true });\n  if (buildmessage.jobHasMessages())\n    return;\n\n  // Check that we have a version.\n  if (! version) {\n    buildmessage.error(\n      \"Package cannot be published because it doesn't have a version\");\n    return;\n  }\n\n  // Check that the version description is under the character limit. (We check\n  // all string limits on the server, but this is the one that is mostly likely\n  // to be wrong)\n  if (! packageSource.metadata.summary) {\n    buildmessage.error(\n      \"Please describe what your package does. Set a summary \" +\n        \"in Package.describe in package.js.\");\n    return;\n  }\n\n  if (packageSource.metadata.summary.length > 100) {\n    buildmessage.error(\"Summary must be under 100 chars.\");\n    return;\n  }\n\n  // Check that we are an authorized maintainer of this package.\n  if (!options['new']) {\n    var packRecord = catalog.official.getPackage(name);\n    if (! packRecord) {\n      buildmessage.error(\n        'There is no package named ' + name +\n          '. If you are creating a new package, use the --create flag.');\n      return;\n    }\n\n    if (!exports.amIAuthorized(name, conn, false)) {\n      buildmessage.error(\n        'You are not an authorized maintainer of ' + name + '.  Only ' +\n          'authorized maintainers may publish new versions.');\n    }\n  }\n\n  // Check that our documentation exists (or we know that it doesn't) and has\n  // been filled out.\n  var readmeInfo = buildmessage.enterJob(\n    \"processing documentation\",\n    function () {\n      return packageSource.processReadme();\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n  if (readmeInfo && (readmeInfo.hash === files.blankHash)) {\n    buildmessage.error(\n      \"Your documentation file is blank, so users may have trouble figuring \" +\n      \"out how to use your package. Please fill it out, or \" +\n      \"set 'documentation: null' in your Package.describe\");\n    return;\n  }\n\n  if (readmeInfo && readmeInfo.excerpt.length > 1500) {\n    buildmessage.error(\n      \"Longform package description is too long. Meteor uses the section of \" +\n      \"the Markdown documentation file between the first and second \" +\n      \"headings. That section must be less than 1500 characters long.\");\n    return;\n  }\n\n  // We don't let the user upload a blank README for UX reasons, but we would\n  // prefer that the server move to a world with 'readme' files for everything\n  // in the future. This helps unite these interfaces, and makes our code easier\n  // to reason about in the future.\n  if (! readmeInfo) {\n    readmeInfo = generateBlankReadme();\n  }\n  var readmePath = saveReadmeToTmp(readmeInfo);\n\n  var packageDeps = packageSource.getDependencyMetadata();\n\n  // Check that the package does not have any unconstrained references.\n  _.each(packageDeps, function(refs, label) {\n    if (refs.constraint == null) {\n      if (packageSource.isCore && files.inCheckout() &&\n          projectContext.localCatalog.getPackage(label)) {\n        // Core package is using or implying another core package,\n        // without a version number.  We fill in the version number.\n        // (Well, we're assuming that the other package is core and\n        // not some other sort of local package.)\n        var versionString =\n              projectContext.localCatalog.getLatestVersion(label).version;\n        // modify the constraint on this dep that will be sent to troposphere\n        refs.constraint = versionString;\n      } else if (label === \"meteor\") {\n        // HACK: We are willing to publish a package with a \"null\"\n        // constraint on the \"meteor\" package to troposphere.  This\n        // happens for non-core packages when not running from a\n        // checkout, because all packages implicitly depend on the\n        // \"meteor\" package, but do not necessarily specify an\n        // explicit version for it, and we don't have a great way to\n        // choose one here.\n        // XXX come back to this, especially if we are incrementing the\n        // major version of \"meteor\".  hopefully we will have more data\n        // about the package system by then.\n      } else {\n        buildmessage.error(\n          \"You must specify a version constraint for package \" + label);\n      }\n    }\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n\n  var isopack = projectContext.isopackCache.getIsopack(name);\n  if (! isopack)\n    throw Error(\"no isopack \" + name);\n\n  // If we aren't able to include legacy builds in this version, make sure that\n  // it has a fake dependency on isobuild:isopack-2 so that old versions of\n  // Isobuild won't accidentally use it.\n  if (!isopack.canWriteLegacyBuilds()\n      && !_.has(packageDeps, 'isobuild:isopack-2')) {\n    packageDeps['isobuild:isopack-2'] = {\n      constraint: '1.0.0',\n      // Arbitrary arch here; nothing other than meteor show really pays\n      // attention to reference arch anymore, because we no longer pay attention\n      // to the arch with the constraint in Version Solver.\n      references: [{arch: 'os'}],\n    };\n  }\n\n  var sourceFiles = isopack.getSourceFilesUnderSourceRoot(\n    packageSource.sourceRoot);\n  if (! sourceFiles)\n    throw Error(\"isopack doesn't know what its source files are?\");\n\n  // We need to have built the test package to get all of its sources, even\n  // though we're not publishing a BUILD for the test package.\n  if (packageSource.testName) {\n    var testIsopack = projectContext.isopackCache.getIsopack(\n      packageSource.testName);\n    if (! testIsopack)\n      throw Error(\"no testIsopack \" + packageSource.testName);\n    var testSourceFiles = testIsopack.getSourceFilesUnderSourceRoot(\n      packageSource.sourceRoot);\n    if (! testSourceFiles)\n      throw Error(\"test isopack doesn't know what its source files are?\");\n    sourceFiles = _.union(sourceFiles, testSourceFiles);\n  }\n\n  var sourceBundleResult;\n  buildmessage.enterJob(\"bundling source for \" + name, function () {\n    sourceBundleResult = bundleSource(\n      isopack, sourceFiles, packageSource.sourceRoot);\n  });\n  if (buildmessage.jobHasMessages())\n    return;\n\n  // Create the package. Check that the metadata exists.\n  if (options.new) {\n    buildmessage.enterJob(\"creating package \" + name, function () {\n      callPackageServerBM(conn, 'createPackage', {\n        name: packageSource.name\n      });\n    });\n    if (buildmessage.jobHasMessages())\n      return;\n  }\n\n  if (options.existingVersion) {\n    var existingRecord = catalog.official.getVersion(name, version);\n    if (! existingRecord) {\n      buildmessage.error(\"Version does not exist.\");\n      return;\n    }\n    if (existingRecord.source.treeHash !== sourceBundleResult.treeHash) {\n      buildmessage.error(\"Package source differs from the existing version.\");\n      return;\n    }\n\n    if (! options.doNotPublishBuild) {\n      createAndPublishBuiltPackage(conn, isopack);\n      if (buildmessage.jobHasMessages())\n        return;\n    }\n\n    // XXX check that we're actually providing something new?\n  } else {\n    var uploadInfo;\n    buildmessage.enterJob(\"pre-publishing package \" + name, function () {\n      var uploadRec = {\n        packageName: packageSource.name,\n        version: version,\n        description: packageSource.metadata.summary,\n        longDescription: readmeInfo.excerpt,\n        git: packageSource.metadata.git,\n        compilerVersion: compiler.BUILT_BY,\n        containsPlugins: packageSource.containsPlugins(),\n        debugOnly: packageSource.debugOnly,\n        prodOnly: packageSource.prodOnly,\n        exports: packageSource.getExports(),\n        releaseName: release.current.name,\n        dependencies: packageDeps\n      };\n      uploadInfo = callPackageServerBM(conn, 'createPackageVersion', uploadRec);\n    });\n    if (buildmessage.jobHasMessages())\n      return;\n\n    // XXX If package version already exists, print a nice error message\n    // telling them to try 'meteor publish-for-arch' if they want to\n    // publish a new build.\n\n    // Documentation is smaller than the source. Upload it first, to minimize\n    // the chances of PUT URLs expiring. (XXX: in the far future, parallelize this)\n    buildmessage.enterJob(\"uploading documentation\", function () {\n      uploadFile(uploadInfo.readmeUrl, readmePath);\n    });\n    if (buildmessage.jobHasMessages())\n      return;\n\n    buildmessage.enterJob(\"uploading source\", function () {\n      uploadFile(uploadInfo.uploadUrl, sourceBundleResult.sourceTarball);\n    });\n    if (buildmessage.jobHasMessages())\n      return;\n\n    if (! options.doNotPublishBuild) {\n      var bundleResult = createBuiltPackage(conn, isopack);\n      if (buildmessage.jobHasMessages())\n        return;\n    }\n\n    var hashes = {\n      tarballHash: sourceBundleResult.tarballHash,\n      treeHash: sourceBundleResult.treeHash,\n      readmeHash: readmeInfo.hash\n    };\n    buildmessage.enterJob(\"publishing package version\", function () {\n      callPackageServerBM(\n        conn, 'publishPackageVersion', uploadInfo.uploadToken, hashes);\n    });\n    if (buildmessage.jobHasMessages())\n      return;\n\n    if (! options.doNotPublishBuild) {\n      publishBuiltPackage(conn, isopack, bundleResult);\n      if (buildmessage.jobHasMessages())\n        return;\n    }\n  }\n\n  return;\n};\n\n  // Call the server to ask if we are authorized to update this release or\n// package. This is a way to save time before sending data to the server. It\n// will mostly ignore most errors (just in case we have a flaky network connection or\n// something) and let the method deal with those.\n//\n// If this returns FALSE, then we are NOT authorized.\n// Otherwise, return true.\nexports.amIAuthorized = function (name, conn, isRelease) {\n  var methodName = \"amIAuthorized\" +\n    (isRelease ? \"Release\" : \"Package\");\n\n  try {\n    exports.callPackageServer(conn, methodName, name);\n  } catch (err) {\n    if (err.error === 401) {\n      return false;\n    }\n\n    // We don't know what this error is. Probably we can't contact the server,\n    // or the like. It would be a pity to fail all operations with the server\n    // just because a preliminary check fails, so return true for now.\n    return true;\n  }\n  return true;\n};\n"]}