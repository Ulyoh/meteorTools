{"version":3,"sources":["/tools/isobuild/compiler.js"],"names":[],"mappings":"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","file":"tools/isobuild/compiler.js.map","sourcesContent":["var _ = require('underscore');\n\nvar archinfo = require('../utils/archinfo.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar bundler = require('./bundler.js');\nvar isopack = require('./isopack.js');\nvar meteorNpm = require('./meteor-npm.js');\nvar watch = require('../fs/watch.js');\nvar Console = require('../console/console.js').Console;\nvar files = require('../fs/files.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar linterPluginModule = require('./linter-plugin.js');\nvar compileStepModule = require('./compiler-deprecated-compile-step.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nimport { SourceProcessorSet } from './build-plugin.js';\n\nvar compiler = exports;\n\n// Whenever you change anything about the code that generates isopacks, bump\n// this version number. The idea is that the \"format\" field of the isopack\n// JSON file only changes when the actual specified structure of the\n// isopack/unibuild changes, but this version (which is build-tool-specific)\n// can change when the the contents (not structure) of the built output\n// changes. So eg, if we improve the linker's static analysis, this should be\n// bumped.\n//\n// You should also update this whenever you update any of the packages used\n// directly by the isopack creation process since they do not end up as watched\n// dependencies. (At least for now, packages only used in target creation (eg\n// minifiers) don't require you to update BUILT_BY, though you will need to quit\n// and rerun \"meteor run\".)\ncompiler.BUILT_BY = 'meteor/17';\n\n// This is a list of all possible architectures that a build can target. (Client\n// is expanded into 'web.browser' and 'web.cordova')\ncompiler.ALL_ARCHES = [ \"os\", \"web.browser\", \"web.cordova\" ];\n\ncompiler.compile = Profile(function (packageSource, options) {\n  return `compiler.compile(${ packageSource.name || 'the app' })`;\n}, function (packageSource, options) {\n  buildmessage.assertInCapture();\n\n  var packageMap = options.packageMap;\n  var isopackCache = options.isopackCache;\n  var includeCordovaUnibuild = options.includeCordovaUnibuild;\n\n  var pluginWatchSet = packageSource.pluginWatchSet.clone();\n  var plugins = {};\n\n  var pluginProviderPackageNames = {};\n\n  // Build plugins\n  _.each(packageSource.pluginInfo, function (info) {\n    buildmessage.enterJob({\n      title: \"building plugin `\" + info.name +\n        \"` in package `\" + packageSource.name + \"`\",\n      rootPath: packageSource.sourceRoot\n    }, function () {\n      // XXX we should probably also pass options.noLineNumbers into\n      //     buildJsImage so it can pass it back to its call to\n      //     compiler.compile\n      var buildResult = bundler.buildJsImage({\n        name: info.name,\n        packageMap: packageMap,\n        isopackCache: isopackCache,\n        use: info.use,\n        sourceRoot: packageSource.sourceRoot,\n        sources: info.sources,\n        // While we're not actually \"serving\" the file, the serveRoot is used to\n        // calculate file names in source maps.\n        serveRoot: 'packages/' + packageSource.name,\n        npmDependencies: info.npmDependencies,\n        // Plugins have their own npm dependencies separate from the\n        // rest of the package, so they need their own separate npm\n        // shrinkwrap and cache state.\n        npmDir: files.pathResolve(\n          files.pathJoin(packageSource.sourceRoot, '.npm', 'plugin', info.name))\n      });\n      // Add this plugin's dependencies to our \"plugin dependency\"\n      // WatchSet. buildResult.watchSet will end up being the merged\n      // watchSets of all of the unibuilds of the plugin -- plugins have\n      // only one unibuild and this should end up essentially being just\n      // the source files of the plugin.\n      //\n      // Note that we do this even on error, so that you can fix the error\n      // and have the runner restart.\n      pluginWatchSet.merge(buildResult.watchSet);\n\n      if (buildmessage.jobHasMessages())\n        return;\n\n      _.each(buildResult.usedPackageNames, function (packageName) {\n        pluginProviderPackageNames[packageName] = true;\n      });\n\n      // Register the built plugin's code.\n      if (!_.has(plugins, info.name))\n        plugins[info.name] = {};\n      plugins[info.name][buildResult.image.arch] = buildResult.image;\n    });\n  });\n\n  // Grab any npm dependencies. Keep them in a cache in the package\n  // source directory so we don't have to do this from scratch on\n  // every build.\n  //\n  // Go through a specialized npm dependencies update process,\n  // ensuring we don't get new versions of any (sub)dependencies. This\n  // process also runs mostly safely multiple times in parallel (which\n  // could happen if you have two apps running locally using the same\n  // package).\n  //\n  // We run this even if we have no dependencies, because we might\n  // need to delete dependencies we used to have.\n  var isPortable = true;\n  var nodeModulesPath = null;\n  if (packageSource.npmCacheDirectory) {\n    if (meteorNpm.updateDependencies(packageSource.name,\n                                     packageSource.npmCacheDirectory,\n                                     packageSource.npmDependencies)) {\n      nodeModulesPath = files.pathJoin(packageSource.npmCacheDirectory,\n                                  'node_modules');\n      if (! process.env.METEOR_FORCE_PORTABLE &&\n          ! meteorNpm.dependenciesArePortable(packageSource.npmCacheDirectory)) {\n        isPortable = false;\n      }\n    }\n  }\n\n  // Find all the isobuild:* pseudo-packages that this package depends on. Why\n  // do we need to do this? Well, we actually load the plugins in this package\n  // before we've fully compiled the package --- plugins are loaded before the\n  // compiler builds the unibuilds in this package (because plugins are allowed\n  // to act on the package itself). But when we load plugins, we need to know if\n  // the package depends on (eg) isobuild:compiler-plugin, to know if the plugin\n  // is allowed to call Plugin.registerCompiler. At this point, the Isopack\n  // object doesn't yet have any unibuilds... but isopack.js doesn't have access\n  // to the PackageSource either (because it needs to work with both\n  // compiled-from-source and loaded-from-disk packages). So we need to make\n  // sure here that the Isopack has *some* reference to the isobuild features\n  // which the unibuilds depend on, so we do it here (and also in\n  // Isopack#initFromPath).\n  var isobuildFeatures = [];\n  packageSource.architectures.forEach((sourceArch) => {\n    sourceArch.uses.forEach((use) => {\n      if (!use.weak && isIsobuildFeaturePackage(use.package) &&\n          isobuildFeatures.indexOf(use.package) === -1) {\n        isobuildFeatures.push(use.package);\n      }\n    });\n  });\n  isobuildFeatures = _.uniq(isobuildFeatures);\n\n  var isopk = new isopack.Isopack;\n  isopk.initFromOptions({\n    name: packageSource.name,\n    metadata: packageSource.metadata,\n    version: packageSource.version,\n    isTest: packageSource.isTest,\n    plugins: plugins,\n    pluginWatchSet: pluginWatchSet,\n    cordovaDependencies: packageSource.cordovaDependencies,\n    npmDiscards: packageSource.npmDiscards,\n    includeTool: packageSource.includeTool,\n    debugOnly: packageSource.debugOnly,\n    prodOnly: packageSource.prodOnly,\n    pluginCacheDir: options.pluginCacheDir,\n    isobuildFeatures\n  });\n\n  _.each(packageSource.architectures, function (architecture) {\n    if (architecture.arch === 'web.cordova' && ! includeCordovaUnibuild)\n      return;\n\n    var unibuildResult = compileUnibuild({\n      isopack: isopk,\n      sourceArch: architecture,\n      isopackCache: isopackCache,\n      nodeModulesPath: nodeModulesPath,\n      isPortable: isPortable,\n      noLineNumbers: options.noLineNumbers\n    });\n    _.extend(pluginProviderPackageNames,\n             unibuildResult.pluginProviderPackageNames);\n  });\n\n  if (options.includePluginProviderPackageMap) {\n    isopk.setPluginProviderPackageMap(\n      packageMap.makeSubsetMap(_.keys(pluginProviderPackageNames)));\n  }\n\n  return isopk;\n});\n\n// options:\n// - isopack\n// - isopackCache\n// - includeCordovaUnibuild\ncompiler.lint = function (packageSource, options) {\n  // Note: the buildmessage context of compiler.lint and lintUnibuild is a\n  // normal error message context (eg, there might be errors from initializing\n  // plugins in getLinterSourceProcessorSet).  We return the linter warnings as\n  // our return value.\n  buildmessage.assertInJob();\n\n  const warnings = new buildmessage._MessageSet;\n  let linted = false;\n  _.each(packageSource.architectures, function (architecture) {\n    // skip Cordova if not required\n    if (! options.includeCordovaUnibuild\n        && architecture.arch === 'web.cordova') {\n      return;\n    }\n\n    const unibuildWarnings = lintUnibuild({\n      isopack: options.isopack,\n      isopackCache: options.isopackCache,\n      sourceArch: architecture\n    });\n    if (unibuildWarnings) {\n      linted = true;\n      warnings.merge(unibuildWarnings);\n    }\n  });\n  return {warnings, linted};\n};\n\ncompiler.getMinifiers = function (packageSource, options) {\n  buildmessage.assertInJob();\n\n  var minifiers = [];\n  _.each(packageSource.architectures, function (architecture) {\n    var activePluginPackages = getActivePluginPackages(options.isopack, {\n      isopackCache: options.isopackCache,\n      uses: architecture.uses\n    });\n\n    _.each(activePluginPackages, function (otherPkg) {\n      otherPkg.ensurePluginsInitialized();\n\n      _.each(otherPkg.sourceProcessors.minifier.allSourceProcessors, (sp) => {\n        minifiers.push(sp);\n      });\n    });\n  });\n\n  minifiers = _.uniq(minifiers);\n  // check for extension-wise uniqness\n  _.each(['js', 'css'], function (ext) {\n    var plugins = _.filter(minifiers, function (plugin) {\n      return _.contains(plugin.extensions, ext);\n    });\n\n    if (plugins.length > 1) {\n      var packages = _.map(plugins, function (p) { return p.isopack.name; });\n      buildmessage.error(packages.join(', ') + ': multiple packages registered minifiers for extension \"' + ext + '\".');\n    }\n  });\n\n  return minifiers;\n};\n\nfunction getLinterSourceProcessorSet({isopack, activePluginPackages}) {\n  buildmessage.assertInJob();\n\n  const sourceProcessorSet = new SourceProcessorSet(\n    isopack.displayName, { allowConflicts: true });\n\n  _.each(activePluginPackages, function (otherPkg) {\n    otherPkg.ensurePluginsInitialized();\n\n    sourceProcessorSet.merge(otherPkg.sourceProcessors.linter);\n  });\n\n  return sourceProcessorSet;\n}\n\nvar lintUnibuild = function ({isopack, isopackCache, sourceArch}) {\n  // Note: the buildmessage context of compiler.lint and lintUnibuild is a\n  // normal error message context (eg, there might be errors from initializing\n  // plugins in getLinterSourceProcessorSet).  We return the linter warnings as\n  // our return value.\n  buildmessage.assertInJob();\n\n  var activePluginPackages = getActivePluginPackages(\n    isopack, {\n      isopackCache,\n      uses: sourceArch.uses\n    });\n\n  const sourceProcessorSet =\n          getLinterSourceProcessorSet({isopack, activePluginPackages});\n  // bail out early if we had trouble loading plugins or if we're not\n  // going to lint anything\n  if (buildmessage.jobHasMessages() || sourceProcessorSet.isEmpty()) {\n    return null;\n  }\n\n  const unibuild = _.findWhere(isopack.unibuilds, {arch: sourceArch.arch});\n  if (! unibuild) {\n    throw Error(`No ${ sourceArch.arch } unibuild for ${ isopack.name }!`);\n  }\n\n  const {sources} = sourceArch.getFiles(sourceProcessorSet, unibuild.watchSet);\n\n  const linterMessages = buildmessage.capture(() => {\n    runLinters({\n      isopackCache,\n      sources,\n      sourceProcessorSet,\n      inputSourceArch: sourceArch,\n      watchSet: unibuild.watchSet\n    });\n  });\n  return linterMessages;\n};\n\n// options.sourceArch is a SourceArch to compile.  Process all source files\n// through the appropriate legacy handlers. Create a new Unibuild and add it to\n// options.isopack.\n//\n// Returns a list of source files that were used in the compilation.\nvar compileUnibuild = function (options) {\n  buildmessage.assertInCapture();\n\n  const isopk = options.isopack;\n  const inputSourceArch = options.sourceArch;\n  const isopackCache = options.isopackCache;\n  const nodeModulesPath = options.nodeModulesPath;\n  const isPortable = options.isPortable;\n  const noLineNumbers = options.noLineNumbers;\n\n  const isApp = ! inputSourceArch.pkg.name;\n  const resources = [];\n  const pluginProviderPackageNames = {};\n  const watchSet = inputSourceArch.watchSet.clone();\n\n  // *** Determine and load active plugins\n  const activePluginPackages = getActivePluginPackages(isopk, {\n    uses: inputSourceArch.uses,\n    isopackCache: isopackCache,\n    // If other package is built from source, then we need to rebuild this\n    // package if any file in the other package that could define a plugin\n    // changes.  getActivePluginPackages will add entries to this WatchSet.\n    pluginProviderWatchSet: watchSet,\n    pluginProviderPackageNames\n  });\n\n  // *** Assemble the SourceProcessorSet from the plugins. This data\n  // structure lets us decide what to do with each file: which plugin\n  // should process it in what method.\n  //\n  // We also build a SourceProcessorSet for this package's linters even\n  // though we're not linting right now. This is so we can tell the\n  // difference between an file added to a package as a linter config\n  // file (not handled by any compiler), and a file that's truly not\n  // handled by anything (which is an error unless explicitly declared\n  // as a static asset).\n  let sourceProcessorSet, linterSourceProcessorSet;\n  buildmessage.enterJob(\"determining active plugins\", () => {\n    sourceProcessorSet = new SourceProcessorSet(\n      isopk.displayName(), { hardcodeJs: true});\n\n    activePluginPackages.forEach((otherPkg) => {\n      otherPkg.ensurePluginsInitialized();\n\n      // Note that this may log a buildmessage if there are conflicts.\n      sourceProcessorSet.merge(otherPkg.sourceProcessors.compiler);\n    });\n\n    // Used to excuse functions from the \"undeclared static asset\" check.\n    linterSourceProcessorSet = getLinterSourceProcessorSet({\n      activePluginPackages,\n      isopack: isopk\n    });\n    if (buildmessage.jobHasMessages()) {\n      // Recover by not calling getFiles and pretending there are no\n      // items.\n      sourceProcessorSet = null;\n    }\n  });\n\n  // *** Determine source files\n  // Note: the getFiles function isn't expected to add its\n  // source files to watchSet; rather, the watchSet is for other\n  // things that the getFiles consulted (such as directory\n  // listings or, in some hypothetical universe, control files) to\n  // determine its source files.\n  const {\n    sources = [],\n    assets = []\n  } = sourceProcessorSet ?\n    inputSourceArch.getFiles(sourceProcessorSet, watchSet) : {};\n\n  if (nodeModulesPath) {\n    // If this slice has node modules, we should consider the shrinkwrap file\n    // to be part of its inputs. (This is a little racy because there's no\n    // guarantee that what we read here is precisely the version that's used,\n    // but it's better than nothing at all.)\n    //\n    // Note that this also means that npm modules used by plugins will get\n    // this npm-shrinkwrap.json in their pluginDependencies (including for all\n    // packages that depend on us)!  This is good: this means that a tweak to\n    // an indirect dependency of the coffee-script npm module used by the\n    // coffeescript package will correctly cause packages with *.coffee files\n    // to be rebuilt.\n    const shrinkwrapPath = nodeModulesPath.replace(\n        /node_modules$/, 'npm-shrinkwrap.json');\n    watch.readAndWatchFile(watchSet, shrinkwrapPath);\n  }\n\n  // This function needs to be factored out to support legacy handlers later on\n  // in the compilation process\n  function addAsset(contents, relPath, hash) {\n    // XXX hack to strip out private and public directory names from app asset\n    // paths\n    if (! inputSourceArch.pkg.name) {\n      relPath = relPath.replace(/^(private|public)\\//, '');\n    }\n\n    resources.push({\n      type: \"asset\",\n      data: contents,\n      path: relPath,\n      servePath: colonConverter.convert(\n        files.pathJoin(inputSourceArch.pkg.serveRoot, relPath)),\n      hash: hash\n    });\n  }\n\n  // Add all assets\n  _.values(assets).forEach((asset) => {\n    const relPath = asset.relPath;\n    const absPath = files.pathResolve(inputSourceArch.pkg.sourceRoot, relPath);\n\n    // readAndWatchFileWithHash returns an object carrying a buffer with the\n    // file-contents. The buffer contains the original data of the file (no EOL\n    // transforms from the tools/files.js part).\n    const file = watch.readAndWatchFileWithHash(watchSet, absPath);\n    const hash = file.hash;\n    const contents = file.contents;\n\n    addAsset(contents, relPath, hash);\n  });\n\n  // Add and compile all source files\n  _.values(sources).forEach((source) => {\n    const relPath = source.relPath;\n    const fileOptions = _.clone(source.fileOptions) || {};\n    const absPath = files.pathResolve(inputSourceArch.pkg.sourceRoot, relPath);\n    const filename = files.pathBasename(relPath);\n\n    // Find the handler for source files with this extension\n    let classification = null;\n    classification = sourceProcessorSet.classifyFilename(\n      filename, inputSourceArch.arch);\n\n    if (classification.type === 'wrong-arch') {\n      // This file is for a compiler plugin but not for this arch. Skip it,\n      // and don't even watch it.  (eg, skip CSS preprocessor files on the\n      // server.)  This `return` skips this source file and goes on to the next\n      // one.\n      return;\n    }\n\n    if (classification.type === 'unmatched') {\n      // This is not matched by any compiler plugin or legacy source handler,\n      // but it was added as a source file.\n      //\n      // Prior to the batch-plugins project, these would be implicitly treated\n      // as static assets. Now we consider this to be an error; you need to\n      // explicitly tell that you want something to be a static asset by calling\n      // addAssets or putting it in the public/private directories in an app.\n      //\n      // This is a backwards-incompatible change, but it doesn't affect\n      // previously-published packages (because the check is occuring in the\n      // compiler), and it doesn't affect apps (where random files outside of\n      // private/public never end up in the source list anyway).\n      //\n      // As one special case, if a file is unmatched by the compiler\n      // SourceProcessorSet but is matched by the linter SourceProcessorSet (ie,\n      // a linter config file), we don't report an error; this is so that you\n      // can run `api.addFiles('.jshintrc')` and have it work.  (This is only\n      // relevant for packages.)  We don't put these files in the WatchSet,\n      // though; that happens via compiler.lint.\n\n      if (isApp) {\n        // This shouldn't happen, because initFromAppDir's getFiles\n        // should only return assets or sources which match\n        // sourceProcessorSet.\n        throw Error(\"app contains non-asset files without plugin? \" +\n                    relPath + \" - \" + filename);\n      }\n\n      const linterClassification = linterSourceProcessorSet.classifyFilename(\n        filename, inputSourceArch.arch);\n      if (linterClassification.type !== 'unmatched') {\n        // The linter knows about this, so we'll just ignore it instead of\n        // throwing an error.\n        return;\n      }\n\n      buildmessage.error(\n        `No plugin known to handle file '${ relPath }'. If you want this \\\nfile to be a static asset, use addAssets instead of addFiles; eg, \\\napi.addAssets('${relPath}', 'client').`);\n      // recover by ignoring\n      return;\n    }\n\n    // readAndWatchFileWithHash returns an object carrying a buffer with the\n    // file-contents. The buffer contains the original data of the file (no EOL\n    // transforms from the tools/files.js part).\n    const file = watch.readAndWatchFileWithHash(watchSet, absPath);\n    const hash = file.hash;\n    const contents = file.contents;\n\n    Console.nudge(true);\n\n    if (contents === null) {\n      // It really sucks to put this check here, since this isn't publish\n      // code...\n      // XXX We think this code can probably be deleted at this point because\n      // people probably aren't trying to use files with colons in them any\n      // more.\n      if (source.relPath.match(/:/)) {\n        buildmessage.error(\n          \"Couldn't build this package on Windows due to the following file \" +\n          \"with a colon -- \" + source.relPath + \". Please rename and \" +\n          \"and re-publish the package.\");\n      } else {\n        buildmessage.error(\"File not found: \" + source.relPath);\n      }\n\n      // recover by ignoring (but still watching the file)\n      return;\n    }\n\n    if (classification.isNonLegacySource()) {\n      // This is source used by a new-style compiler plugin; it will be fully\n      // processed later in the bundler.\n      resources.push({\n        type: \"source\",\n        extension: classification.extension || null,\n        usesDefaultSourceProcessor:\n          !! classification.usesDefaultSourceProcessor,\n        data: contents,\n        path: relPath,\n        hash: hash,\n        fileOptions: fileOptions\n      });\n      return;\n    }\n\n    if (classification.type !== 'legacy-handler') {\n      throw Error(\"unhandled type: \" + classification.type);\n    }\n\n    // OK, time to handle legacy handlers.\n    var compileStep = compileStepModule.makeCompileStep(\n      source, file, inputSourceArch, {\n        resources: resources,\n        addAsset: addAsset\n      });\n\n    try {\n      (buildmessage.markBoundary(classification.legacyHandler))(compileStep);\n    } catch (e) {\n      e.message = e.message + \" (compiling \" + relPath + \")\";\n      buildmessage.exception(e);\n\n      // Recover by ignoring this source file (as best we can -- the\n      // handler might already have emitted resources)\n    }\n  });\n\n  // *** Determine captured variables\n  var declaredExports = _.map(inputSourceArch.declaredExports, function (symbol) {\n    return _.pick(symbol, ['name', 'testOnly']);\n  });\n\n  // *** Consider npm dependencies and portability\n  var arch = inputSourceArch.arch;\n  if (arch === \"os\" && ! isPortable) {\n    // Contains non-portable compiled npm modules, so set arch correctly\n    arch = archinfo.host();\n  }\n\n  let nodeModulesPathOrUndefined = nodeModulesPath;\n  if (! archinfo.matches(arch, \"os\")) {\n    // npm modules only work on server architectures\n    nodeModulesPathOrUndefined = undefined;\n  }\n\n  // *** Output unibuild object\n  isopk.addUnibuild({\n    kind: inputSourceArch.kind,\n    arch: arch,\n    uses: inputSourceArch.uses,\n    implies: inputSourceArch.implies,\n    watchSet: watchSet,\n    nodeModulesPath: nodeModulesPathOrUndefined,\n    declaredExports: declaredExports,\n    resources: resources\n  });\n\n  return {\n    pluginProviderPackageNames: pluginProviderPackageNames\n  };\n};\n\nfunction runLinters({inputSourceArch, isopackCache, sources,\n                     sourceProcessorSet, watchSet}) {\n  // The buildmessage context here is for linter warnings only! runLinters\n  // should not do anything that can have a real build failure.\n  buildmessage.assertInCapture();\n\n  if (sourceProcessorSet.isEmpty()) {\n    return;\n  }\n\n  // First we calculate the symbols imported into the current package by\n  // packages we depend on. This is because most JS linters are going to want to\n  // warn about the use of unknown global variables, and the linker import\n  // system works by doing something that looks a whole lot like using\n  // undeclared globals!  That said, we don't actually know the imports that\n  // will be active when an app is built if the versions of the imported\n  // packages differ from those available at package lint time. But it's a good\n  // heuristic, at least. (If we transition from linker to ES2015 modules, we\n  // won't have the issue any more.)\n\n  // We want to look at the arch of the used packages that matches the arch\n  // we're compiling.  Normally when we call compiler.eachUsedUnibuild, we're\n  // either specifically looking at archinfo.host() because we're doing\n  // something related to plugins (which always run in the host environment), or\n  // we're in the process of building a bundler Target (a program), which has a\n  // specific arch which is never 'os'.  In this odd case, though, we're trying\n  // to run eachUsedUnibuild at package-compile time (not bundle time), so the\n  // only 'arch' we've heard of might be 'os', if we're building a portable\n  // unibuild.  In that case, we should look for imports in the host arch if it\n  // exists instead of failing because a dependency does not have an 'os'\n  // unibuild.\n  const whichArch = inputSourceArch.arch === 'os'\n          ? archinfo.host() : inputSourceArch.arch;\n\n  // For linters, figure out what are the global imports from other packages\n  // that we use directly, or are implied.\n  const globalImports = ['Package'];\n\n  if (archinfo.matches(inputSourceArch.arch, \"os\")) {\n    globalImports.push('Npm', 'Assets');\n  }\n\n  compiler.eachUsedUnibuild({\n    dependencies: inputSourceArch.uses,\n    arch: whichArch,\n    isopackCache: isopackCache,\n    skipUnordered: true,\n    // don't import symbols from debugOnly and prodOnly packages, because\n    // if the package is not linked it will cause a runtime error.\n    // the code must access them with `Package[\"my-package\"].MySymbol`.\n    skipDebugOnly: true,\n    skipProdOnly: true,\n    // We only care about getting exports here, so it's OK if we get the Mac\n    // version when we're bundling for Linux.\n    allowWrongPlatform: true,\n  }, (unibuild) => {\n    if (unibuild.pkg.name === inputSourceArch.pkg.name)\n      return;\n    _.each(unibuild.declaredExports, (symbol) => {\n      if (! symbol.testOnly || inputSourceArch.isTest) {\n        globalImports.push(symbol.name);\n      }\n    });\n  });\n\n  // sourceProcessor.id -> {sourceProcessor, sources: [WrappedSourceItem]}\n  const sourceItemsForLinter = {};\n  _.values(sources).forEach((sourceItem) => {\n    const { relPath } = sourceItem;\n    const classification = sourceProcessorSet.classifyFilename(\n      files.pathBasename(relPath), inputSourceArch.arch);\n\n    // If we don't have a linter for this file (or we do but it's only on\n    // another arch), skip without even reading the file into a WatchSet.\n    if (classification.type === 'wrong-arch' ||\n        classification.type === 'unmatched')\n      return;\n    // We shouldn't ever add a legacy handler and we're not hardcoding JS for\n    // linters, so we should always have SourceProcessor if anything matches.\n    if (! classification.sourceProcessors) {\n      throw Error(\n        `Unexpected classification for ${ relPath }: ${ classification.type }`);\n    }\n\n    // Read the file and add it to the WatchSet.\n    const {hash, contents} = watch.readAndWatchFileWithHash(\n      watchSet,\n      files.pathResolve(inputSourceArch.pkg.sourceRoot, relPath));\n    const wrappedSource = {\n      relPath, contents, hash,\n      arch: inputSourceArch.arch,\n      'package': inputSourceArch.pkg.name\n    };\n\n    // There can be multiple linters on a file.\n    classification.sourceProcessors.forEach((sourceProcessor) => {\n      if (! sourceItemsForLinter.hasOwnProperty(sourceProcessor.id)) {\n        sourceItemsForLinter[sourceProcessor.id] = {\n          sourceProcessor,\n          sources: []\n        };\n      }\n      sourceItemsForLinter[sourceProcessor.id].sources.push(wrappedSource);\n    });\n  });\n\n  // Run linters on files. This skips linters that don't have any files.\n  _.each(sourceItemsForLinter, ({sourceProcessor, sources}) => {\n    const sourcesToLint = sources.map(\n      wrappedSource => new linterPluginModule.LintingFile(wrappedSource)\n    );\n\n    const linter = sourceProcessor.userPlugin.processFilesForPackage;\n\n    function archToString(arch) {\n      if (arch.match(/web\\.cordova/))\n        return \"Cordova\";\n      if (arch.match(/web\\..*/))\n        return \"Client\";\n      if (arch.match(/os.*/))\n        return \"Server\";\n      throw new Error(\"Don't know how to display the arch: \" + arch);\n    }\n\n    buildmessage.enterJob({\n      title: \"linting files with \" +\n        sourceProcessor.isopack.name +\n        \" for \" +\n        inputSourceArch.pkg.displayName() +\n        \" (\" + archToString(inputSourceArch.arch) + \")\"\n    }, () => {\n      try {\n        var markedLinter = buildmessage.markBoundary(linter.bind(\n          sourceProcessor.userPlugin));\n        markedLinter(sourcesToLint, { globals: globalImports });\n      } catch (e) {\n        buildmessage.exception(e);\n      }\n    });\n  });\n};\n\n// takes an isopack and returns a list of packages isopack depends on,\n// containing at least one plugin\nexport function getActivePluginPackages(isopk, {\n  uses,\n  isopackCache,\n  pluginProviderPackageNames,\n  pluginProviderWatchSet\n}) {\n  // XXX we used to include our own plugins only if we were the\n  // \"use\" role. now we include them everywhere because we don't have\n  // a special \"use\" role anymore. it's not totally clear to me what\n  // the correct behavior should be -- we need to resolve whether we\n  // think about plugins as being global to a package or particular\n  // to a unibuild.\n\n  // (there's also some weirdness here with handling implies, because\n  // the implies field is on the target unibuild, but we really only care\n  // about packages.)\n  var activePluginPackages = [isopk];\n  if (pluginProviderPackageNames)\n    pluginProviderPackageNames[isopk.name] = true;\n\n  // We don't use plugins from weak dependencies, because the ability\n  // to compile a certain type of file shouldn't depend on whether or\n  // not some unrelated package in the target has a dependency. And we\n  // skip unordered dependencies, because it's not going to work to\n  // have circular build-time dependencies.\n  //\n  // eachUsedUnibuild takes care of pulling in implied dependencies for us (eg,\n  // templating from standard-app-packages).\n  //\n  // We pass archinfo.host here, not self.arch, because it may be more specific,\n  // and because plugins always have to run on the host architecture.\n  compiler.eachUsedUnibuild({\n    dependencies: uses,\n    arch: archinfo.host(),\n    isopackCache: isopackCache,\n    skipUnordered: true\n    // implicitly skip weak deps by not specifying acceptableWeakPackages option\n  }, function (unibuild) {\n    if (unibuild.pkg.name === isopk.name)\n      return;\n    if (pluginProviderPackageNames) {\n      pluginProviderPackageNames[unibuild.pkg.name] = true;\n    }\n    if (pluginProviderWatchSet) {\n      pluginProviderWatchSet.merge(unibuild.pkg.pluginWatchSet);\n    }\n    if (_.isEmpty(unibuild.pkg.plugins))\n      return;\n    activePluginPackages.push(unibuild.pkg);\n  });\n\n  activePluginPackages = _.uniq(activePluginPackages);\n  return activePluginPackages;\n}\n\n// Iterates over each in options.dependencies as well as unibuilds implied by\n// them. The packages in question need to already be built and in\n// options.isopackCache.\n//\n// Skips isobuild:* pseudo-packages.\ncompiler.eachUsedUnibuild = function (\n  options, callback) {\n  buildmessage.assertInCapture();\n  var dependencies = options.dependencies;\n  var arch = options.arch;\n  var isopackCache = options.isopackCache;\n  const allowWrongPlatform = options.allowWrongPlatform;\n\n  var acceptableWeakPackages = options.acceptableWeakPackages || {};\n\n  var processedUnibuildId = {};\n  var usesToProcess = [];\n  _.each(dependencies, function (use) {\n    if (options.skipUnordered && use.unordered)\n      return;\n    if (use.weak && !_.has(acceptableWeakPackages, use.package))\n      return;\n    usesToProcess.push(use);\n  });\n\n  while (! _.isEmpty(usesToProcess)) {\n    var use = usesToProcess.shift();\n\n    // We only care about real packages, not isobuild:* psuedo-packages.\n    if (isIsobuildFeaturePackage(use.package))\n      continue;\n\n    var usedPackage = isopackCache.getIsopack(use.package);\n\n    // Ignore this package if we were told to skip debug-only packages and it is\n    // debug-only.\n    if (usedPackage.debugOnly && options.skipDebugOnly)\n      continue;\n    // Ditto prodOnly.\n    if (usedPackage.prodOnly && options.skipProdOnly)\n      continue;\n\n    var unibuild = usedPackage.getUnibuildAtArch(arch, {allowWrongPlatform});\n    if (!unibuild) {\n      // The package exists but there's no unibuild for us. A buildmessage has\n      // already been issued. Recover by skipping.\n      continue;\n    }\n\n    if (_.has(processedUnibuildId, unibuild.id))\n      continue;\n    processedUnibuildId[unibuild.id] = true;\n\n    callback(unibuild, {\n      unordered: !!use.unordered,\n      weak: !!use.weak\n    });\n\n    _.each(unibuild.implies, function (implied) {\n      usesToProcess.push(implied);\n    });\n  }\n};\n\n// Note: this code is duplicated in packages/constraint-solver/solver.js\nexport function isIsobuildFeaturePackage(packageName) {\n  return packageName.startsWith('isobuild:');\n}\n\n// If you update this data structure to add more feature packages, you should\n// update the wiki page here:\n// https://github.com/meteor/meteor/wiki/Isobuild-Feature-Packages\nexport const KNOWN_ISOBUILD_FEATURE_PACKAGES = {\n  // This package directly calls Plugin.registerCompiler. Package authors\n  // must explicitly depend on this feature package to use the API.\n  'isobuild:compiler-plugin': ['1.0.0'],\n\n  // This package directly calls Plugin.registerMinifier. Package authors\n  // must explicitly depend on this feature package to use the API.\n  'isobuild:minifier-plugin': ['1.0.0'],\n\n  // This package directly calls Plugin.registerLinter. Package authors\n  // must explicitly depend on this feature package to use the API.\n  'isobuild:linter-plugin': ['1.0.0'],\n\n  // This package is only published in the isopack-2 format, not isopack-1 or\n  // older. ie, it contains \"source\" files for compiler plugins, not just\n  // JS/CSS/static assets/head/body.\n  // This is implicitly added at publish time to any such package; package\n  // authors don't have to add it explicitly. It isn't relevant for local\n  // packages, which can be rebuilt if possible by the older tool.\n  //\n  // Specifically, this is to avoid the case where a package is published with a\n  // dependency like `api.use('less@1.0.0 || 2.0.0')` and the publication\n  // selects the newer compiler plugin version to generate the isopack. The\n  // published package (if this feature package wasn't implicitly included)\n  // could still be selected by the Version Solver to be used with an old\n  // Isobuild... just because less@2.0.0 depends on isobuild:compiler-plugin\n  // doesn't mean it couldn't choose less@1.0.0, which is not actually\n  // compatible with this published package.  (Constraints of the form described\n  // above are not very helpful, but at least we can prevent old Isobuilds from\n  // choking on confusing packages.)\n  //\n  // (Why not isobuild:isopack@2.0.0? Well, that would imply that Version Solver\n  // would have to choose only one isobuild:isopack feature version, which\n  // doesn't make sense here.)\n  'isobuild:isopack-2': ['1.0.0'],\n\n  // This package uses the `prodOnly` metadata flag, which causes it to\n  // automatically depend on the `isobuild:prod-only` feature package.\n  'isobuild:prod-only': ['1.0.0'],\n\n  // This package depends on a specific version of Cordova. Package authors must\n  // explicitly depend on this feature package to indicate that they are not\n  // compatible with earlier Cordova versions, which is most likely a result of\n  // the Cordova plugins they depend on.\n  // A common scenario is a package depending on a Cordova plugin or version\n  // that is only available on npm, which means downloading the plugin is not\n  // supported on versions of Cordova below 5.0.0.\n  'isobuild:cordova': ['5.2.0']\n};\n"]}