{"version":3,"sources":["/tools/isobuild/package-api.js"],"names":[],"mappings":"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","file":"tools/isobuild/package-api.js.map","sourcesContent":["var assert = require(\"assert\");\nvar _ = require(\"underscore\");\nvar buildmessage = require('../utils/buildmessage.js');\nvar utils = require('../utils/utils.js');\nvar compiler = require('./compiler.js');\nvar archinfo = require('../utils/archinfo.js');\nvar files = require('../fs/files.js');\nvar catalog = require('../packaging/catalog/catalog.js');\n\nfunction toArray (x) {\n  if (_.isArray(x))\n    return x;\n  return x ? [x] : [];\n}\n\nfunction toArchArray (arch) {\n  if (! _.isArray(arch)) {\n    arch = arch ? [arch] : compiler.ALL_ARCHES;\n  }\n  arch = _.uniq(arch);\n  arch = _.map(arch, mapWhereToArch);\n\n  // avoid using _.each so as to not add more frames to skip\n  for (var i = 0; i < arch.length; ++i) {\n    var inputArch = arch[i];\n    var isMatch = _.any(_.map(compiler.ALL_ARCHES, function (actualArch) {\n      return archinfo.matches(actualArch, inputArch);\n    }));\n    if (! isMatch) {\n      buildmessage.error(\n        \"Invalid 'where' argument: '\" + inputArch + \"'\",\n        // skip toArchArray in addition to the actual API function\n        {useMyCaller: 1});\n    }\n  }\n  return arch;\n}\n\n// We currently have a 1 to 1 mapping between 'where' and 'arch'.\n// 'client' -> 'web'\n// 'server' -> 'os'\n// '*' -> '*'\nfunction mapWhereToArch (where) {\n  if (where === 'server') {\n    return 'os';\n  } else if (where === 'client') {\n    return 'web';\n  } else {\n    return where;\n  }\n}\n\n// Iterates over the list of target archs and calls f(arch) for all archs\n// that match an element of self.allarchs.\nfunction forAllMatchingArchs (archs, f) {\n  _.each(archs, function (arch) {\n    _.each(compiler.ALL_ARCHES, function (matchArch) {\n      if (archinfo.matches(matchArch, arch)) {\n        f(matchArch);\n      }\n    });\n  });\n}\n\n/**\n * @name  PackageAPI\n * @class PackageAPI\n * @instanceName api\n * @global\n * @summary Type of the API object passed into the `Package.onUse` function.\n */\nfunction PackageAPI (options) {\n  var self = this;\n  assert.ok(self instanceof PackageAPI);\n\n  options = options || {};\n\n  self.buildingIsopackets = !!options.buildingIsopackets;\n\n  // source files used.\n  // It's a multi-level map structured as:\n  //   arch -> sources|assets -> relPath -> {relPath, fileOptions}\n  self.files = {};\n\n  // symbols exported\n  self.exports = {};\n\n  // packages used and implied (keys are 'package', 'unordered', and\n  // 'weak').  an \"implied\" package is a package that will be used by a unibuild\n  // which uses us.\n  self.uses = {};\n  self.implies = {};\n\n  _.each(compiler.ALL_ARCHES, function (arch) {\n    self.files[arch] = {\n      assets: [],\n      sources: []\n    };\n\n    self.exports[arch] = [];\n    self.uses[arch] = [];\n    self.implies[arch] = [];\n  });\n\n  self.releaseRecords = [];\n}\n\n_.extend(PackageAPI.prototype, {\n  // Called when this package wants to make another package be\n  // used. Can also take literal package objects, if you have\n  // anonymous packages you want to use (eg, app packages)\n  //\n  // @param arch 'web', 'web.browser', 'web.cordova', 'server',\n  // or an array of those.\n  // The default is ['web', 'server'].\n  //\n  // options can include:\n  //\n  // - unordered: if true, don't require this package to load\n  //   before us -- just require it to be loaded anytime. Also\n  //   don't bring this package's imports into our\n  //   namespace. If false, override a true value specified in\n  //   a previous call to use for this package name. (A\n  //   limitation of the current implementation is that this\n  //   flag is not tracked per-environment or per-role.)  This\n  //   option can be used to resolve circular dependencies in\n  //   exceptional circumstances, eg, the 'meteor' package\n  //   depends on 'handlebars', but all packages (including\n  //   'handlebars') have an implicit dependency on\n  //   'meteor'. Internal use only -- future support of this\n  //   is not guaranteed. #UnorderedPackageReferences\n  //\n  // - weak: if true, don't require this package to load at all, but if\n  //   it's going to load, load it before us.  Don't bring this\n  //   package's imports into our namespace and don't allow us to use\n  //   its plugins. (Has the same limitation as \"unordered\" that this\n  //   flag is not tracked per-environment or per-role; this may\n  //   change.)\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Depend on package `packagename`.\n   * @locus package.js\n   * @param {String|String[]} packageNames Packages being depended on.\n   * Package names may be suffixed with an @version tag.\n   *\n   * In general, you must specify a package's version (e.g.,\n   * `'accounts@1.0.0'` to use version 1.0.0 or a higher\n   * compatible version (ex: 1.0.1, 1.5.0, etc.)  of the\n   * `accounts` package). If you are sourcing core\n   * packages from a Meteor release with `versionsFrom`, you may leave\n   * off version names for core packages. You may also specify constraints,\n   * such as `my:forms@=1.0.0` (this package demands `my:forms` at `1.0.0` exactly),\n   * or `my:forms@1.0.0 || =2.0.1` (`my:forms` at `1.x.y`, or exactly `2.0.1`).\n   * @param {String|String[]} [architecture] If you only use the package on the\n   * server (or the client), you can pass in the second argument (e.g.,\n   * `'server'`, `'client'`, `'web.browser'`, `'web.cordova'`) to specify\n   * what architecture the package is used with. You can specify multiple\n   * architectures by passing in an array, for example `['web.cordova', 'os.linux']`.\n   * @param {Object} [options]\n   * @param {Boolean} options.weak Establish a weak dependency on a\n   * package. If package A has a weak dependency on package B, it means\n   * that including A in an app does not force B to be included too — but,\n   * if B is included or by another package, then B will load before A.\n   * You can use this to make packages that optionally integrate with or\n   * enhance other packages if those packages are present.\n   * When you weakly depend on a package you don't see its exports.\n   * You can detect if the possibly-present weakly-depended-on package\n   * is there by seeing if `Package.foo` exists, and get its exports\n   * from the same place.\n   * @param {Boolean} options.unordered It's okay to load this dependency\n   * after your package. (In general, dependencies specified by `api.use`\n   * are loaded before your package.) You can use this option to break\n   * circular dependencies.\n   */\n  use: function (names, arch, options) {\n    var self = this;\n\n    // Support `api.use(package, {weak: true})` without arch.\n    if (_.isObject(arch) && !_.isArray(arch) && !options) {\n      options = arch;\n      arch = null;\n    }\n    options = options || {};\n\n    names = toArray(names);\n    arch = toArchArray(arch);\n\n    // A normal dependency creates an ordering constraint and a \"if I'm\n    // used, use that\" constraint. Unordered dependencies lack the\n    // former; weak dependencies lack the latter. There's no point to a\n    // dependency that lacks both!\n    if (options.unordered && options.weak) {\n      buildmessage.error(\n        \"A dependency may not be both unordered and weak.\",\n        { useMyCaller: true });\n      // recover by ignoring\n      return;\n    }\n\n    // using for loop rather than underscore to help with useMyCaller\n    for (var i = 0; i < names.length; ++i) {\n      var name = names[i];\n      try {\n        var parsed = utils.parsePackageConstraint(name);\n      } catch (e) {\n        if (!e.versionParserError)\n          throw e;\n        buildmessage.error(e.message, {useMyCaller: true});\n        // recover by ignoring\n        continue;\n      }\n\n      forAllMatchingArchs(arch, function (a) {\n        self.uses[a].push({\n          package: parsed.package,\n          constraint: parsed.constraintString,\n          unordered: options.unordered || false,\n          weak: options.weak || false\n        });\n      });\n    }\n  },\n\n  // Called when this package wants packages using it to also use\n  // another package.  eg, for umbrella packages which want packages\n  // using them to also get symbols or plugins from their components.\n\n  /**\n   *\n   * @memberOf PackageAPI\n   * @summary Give users of this package access to another package (by passing\n   * in the string `packagename`) or a collection of packages (by passing in\n   * an array of strings [`packagename1`, `packagename2`]\n   * @locus package.js\n   * @instance\n   * @param {String|String[]} packageNames Name of a package, or array of\n   * package names, with an optional @version component for each.\n   * @param {String|String[]} [architecture] If you only use the package on\n   * the server (or the client), you can pass in the second argument (e.g.,\n   * `'server'`, `'client'`, `'web.browser'`, `'web.cordova'`) to specify what\n   * architecture the package is used with. You can specify multiple\n   * architectures by passing in an array, for example `['web.cordova',\n   * 'os.linux']`.\n   */\n  imply: function (names, arch) {\n    var self = this;\n\n    // We currently disallow build plugins in debugOnly packages; but if\n    // you could use imply in a debugOnly package, you could pull in the\n    // build plugin from an implied package, which would have the same\n    // problem as allowing build plugins directly in the package. So no\n    // imply either!\n    if (self.debugOnly) {\n      buildmessage.error(\"can't use imply in debugOnly packages\");\n      // recover by ignoring\n      return;\n    }\n\n    names = toArray(names);\n    arch = toArchArray(arch);\n\n    // using for loop rather than underscore to help with useMyCaller\n    for (var i = 0; i < names.length; ++i) {\n      var name = names[i];\n      try {\n        var parsed = utils.parsePackageConstraint(name);\n      } catch (e) {\n        if (!e.versionParserError)\n          throw e;\n        buildmessage.error(e.message, {useMyCaller: true});\n        // recover by ignoring\n        continue;\n      }\n\n      // api.imply('isobuild:compiler-plugin') doesn't really make any sense. If\n      // we change our mind and think it makes sense, we can always implement it\n      // later...\n      if (compiler.isIsobuildFeaturePackage(parsed.package)) {\n        buildmessage.error(\n          `to declare that your package requires the build tool feature ` +\n            `'{parsed.package}', use 'api.use', not 'api.imply'`);\n        // recover by ignoring\n        continue;\n      }\n\n      forAllMatchingArchs(arch, function (a) {\n        // We don't allow weak or unordered implies, since the main\n        // purpose of imply is to provide imports and plugins.\n        self.implies[a].push({\n          package: parsed.package,\n          constraint: parsed.constraintString\n        });\n      });\n    }\n  },\n\n  // Top-level call to add a source file to a package. It will\n  // be processed according to its extension (eg, *.coffee\n  // files will be compiled to JavaScript).\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Specify source code files for your package.\n   * @locus package.js\n   * @param {String|String[]} filenames Paths to the source files.\n   * @param {String|String[]} [architecture] If you only want to use the file\n   * on the server (or the client), you can pass this argument\n   * (e.g., 'server', 'client', 'web.browser', 'web.cordova') to specify\n   * what architecture the file is used with. You can specify multiple\n   * architectures by passing in an array, for example\n   * `['web.cordova', 'os.linux']`. By default, the file will be loaded on both\n   * server and client.\n   * @param {Object} [options] Options that will be passed to build\n   * plugins.\n   * @param {Boolean} [options.bare] If this file is JavaScript code or will\n   * be compiled into JavaScript code by a build plugin, don't wrap the\n   * resulting file in a closure. Has the same effect as putting a file into the\n   * `client/compatibility` directory in an app.\n   */\n  addFiles: function (paths, arch, fileOptions) {\n    if (fileOptions && fileOptions.isAsset) {\n      // XXX it would be great to print a warning here, see the issue:\n      // https://github.com/meteor/meteor/issues/5495\n      this._addFiles(\"assets\", paths, arch);\n      return;\n    }\n\n    // Watch out - we rely on the levels of stack traces inside this\n    // function so don't wrap it in another function without changing that logic\n    this._addFiles(\"sources\", paths, arch, fileOptions);\n  },\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Specify asset files for your package. They can be accessed via\n   * the [Assets API](#assets) from the server, or at the URL\n   * `/packages/username_package-name/file-name` from the client, depending on the\n   * architecture passed.\n   * @locus package.js\n   * @param {String|String[]} filenames Paths to the asset files.\n   * @param {String|String[]} architecture Specify where this asset should be\n   * available (e.g., 'server', 'client', 'web.browser', 'web.cordova'). You can\n   * specify multiple architectures by passing in an array, for example\n   * `['web.cordova', 'os.linux']`.\n   */\n  addAssets(paths, arch) {\n    if(!arch) {\n      buildmessage.error('addAssets requires a second argument specifying ' +\n        'where the asset should be available. For example: \"client\", ' +\n        '\"server\", or [\"client\", \"server\"].', { useMyCaller: true });\n      return;\n    }\n\n    // Watch out - we rely on the levels of stack traces inside this\n    // function so don't wrap it in another function without changing that logic\n    this._addFiles(\"assets\", paths, arch);\n  },\n\n  /**\n   * Internal method used by addFiles and addAssets.\n   */\n  _addFiles(type, paths, arch, fileOptions) {\n    if (type !== \"sources\" && type !== \"assets\") {\n      throw new Error(`Can only handle sources and assets, not '${type}'.`);\n    }\n\n    var self = this;\n\n    paths = toArray(paths);\n    arch = toArchArray(arch);\n\n    // Convert Dos-style paths to Unix-style paths.\n    // XXX it is possible to convert an already Unix-style path by mistake\n    // and break it. e.g.: 'some\\folder/anotherFolder' is a valid path\n    // consisting of two components. #WindowsPathApi\n    paths = _.map(paths, function (p) {\n      if (p.indexOf('/') !== -1) {\n        // it is already a Unix-style path most likely\n        return p;\n      }\n      return files.convertToPosixPath(p, true);\n    });\n\n    var errors = [];\n    _.each(paths, function (path) {\n      forAllMatchingArchs(arch, function (a) {\n        const filesOfType = self.files[a][type];\n\n        // Check if we have already added a file at this path\n        if (_.has(filesOfType, path)) {\n          // We want the singular form of the file type\n          const typeName = {\n            sources: 'source',\n            assets: 'asset'\n          }[type];\n\n          errors.push(`Duplicate ${typeName} file: ${path}`);\n          return;\n        }\n\n        const source = {\n          relPath: path\n        };\n\n        if (fileOptions) {\n          source.fileOptions = fileOptions;\n        }\n\n        filesOfType[path] = source;\n      });\n    });\n\n    // Spit out all the errors at the end, where the number of stack frames to\n    // skip is just 2 (this function and its callers) instead of something like\n    // 7 from forAllMatchingArchs and _.each.  Avoid using _.each here to keep\n    // stack predictable.\n    for (var i = 0; i < errors.length; ++i) {\n      buildmessage.error(errors[i], { useMyCaller: 1 });\n    }\n  },\n\n  // Use this release to resolve unclear dependencies for this package. If\n  // you don't fill in dependencies for some of your implies/uses, we will\n  // look at the packages listed in the release to figure that out.\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Use versions of core packages from a release. Unless provided,\n   * all packages will default to the versions released along with\n   * `meteorRelease`. This will save you from having to figure out the exact\n   * versions of the core packages you want to use. For example, if the newest\n   * release of meteor is `METEOR@0.9.0` and it includes `jquery@1.0.0`, you\n   * can write `api.versionsFrom('METEOR@0.9.0')` in your package, and when you\n   * later write `api.use('jquery')`, it will be equivalent to\n   * `api.use('jquery@1.0.0')`. You may specify an array of multiple releases,\n   * in which case the default value for constraints will be the \"or\" of the\n   * versions from each release: `api.versionsFrom(['METEOR@0.9.0',\n   * 'METEOR@0.9.5'])` may cause `api.use('jquery')` to be interpreted as\n   * `api.use('jquery@1.0.0 || 2.0.0')`.\n   * @locus package.js\n   * @param {String | String[]} meteorRelease Specification of a release:\n   * track@version. Just 'version' (e.g. `\"0.9.0\"`) is sufficient if using the\n   * default release track `METEOR`. Can be an array of specifications.\n   */\n  versionsFrom: function (releases) {\n    var self = this;\n\n    // Packages in isopackets really ought to be in the core release, by\n    // definition, so saying that they should use versions from another\n    // release doesn't make sense. Moreover, if we're running from a\n    // checkout, we build isopackets before we initialize catalog.official\n    // (since we may need the ddp isopacket to refresh catalog.official),\n    // so we wouldn't actually be able to interpret the release name\n    // anyway.\n    if (self.buildingIsopackets) {\n      buildmessage.error(\n        \"packages in isopackets may not use versionsFrom\");\n      // recover by ignoring\n      return;\n    }\n\n    releases = toArray(releases);\n\n    // using for loop rather than underscore to help with useMyCaller\n    for (var i = 0; i < releases.length; ++i) {\n      var release = releases[i];\n\n      // If you don't specify a track, use our default.\n      if (release.indexOf('@') === -1) {\n        release = catalog.DEFAULT_TRACK + \"@\" + release;\n      }\n\n      var relInf = release.split('@');\n      if (relInf.length !== 2) {\n        buildmessage.error(\"Release names in versionsFrom may not contain '@'.\",\n                           { useMyCaller: true });\n        return;\n      }\n      var releaseRecord = catalog.official.getReleaseVersion(\n        relInf[0], relInf[1]);\n      if (!releaseRecord) {\n        buildmessage.error(\"Unknown release \"+ release,\n                           { tags: { refreshCouldHelp: true } });\n      } else {\n        self.releaseRecords.push(releaseRecord);\n      }\n    }\n  },\n\n  // Export symbols from this package.\n  //\n  // @param symbols String (eg \"Foo\") or array of String\n  // @param arch 'web', 'server', 'web.browser', 'web.cordova'\n  // or an array of those.\n  // The default is ['web', 'server'].\n  // @param options 'testOnly', boolean.\n\n  /**\n   *\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Export package-level variables in your package. The specified\n   * variables (declared without `var` in the source code) will be available\n   * to packages that use your package. If your package sets the `debugOnly`\n   * or `prodOnly` options to `true` when it calls `Package.describe()`, then\n   * packages that use your package will need to use\n   * `Package[\"package-name\"].ExportedVariableName` to access the value of an\n   * exported variable.\n   * @locus package.js\n   * @param {String|String[]} exportedObjects Name of the object to export, or\n   * an array of object names.\n   * @param {String|String[]} [architecture] If you only want to export the\n   * object on the server (or the client), you can pass in the second argument\n   * (e.g., 'server', 'client', 'web.browser', 'web.cordova') to specify what\n   * architecture the export is used with. You can specify multiple\n   * architectures by passing in an array, for example `['web.cordova',\n   * 'os.linux']`.\n   * @param {Object} [exportOptions]\n   * @param {Boolean} exportOptions.testOnly If true, this symbol will only be\n   * exported when running tests for this package.\n   */\n  export: function (symbols, arch, options) {\n    var self = this;\n\n    // Support `api.export(\"FooTest\", {testOnly: true})` without\n    // arch.\n    if (_.isObject(arch) && !_.isArray(arch) && !options) {\n      options = arch;\n      arch = null;\n    }\n    options = options || {};\n\n    symbols = toArray(symbols);\n    arch = toArchArray(arch);\n\n    _.each(symbols, function (symbol) {\n      // XXX be unicode-friendlier\n      if (!symbol.match(/^([_$a-zA-Z][_$a-zA-Z0-9]*)$/)) {\n        buildmessage.error(\"Bad exported symbol: \" + symbol,\n                           { useMyCaller: true });\n        // recover by ignoring\n        return;\n      }\n      forAllMatchingArchs(arch, function (w) {\n        self.exports[w].push({name: symbol, testOnly: !!options.testOnly});\n      });\n    });\n  }\n});\n\n// XXX COMPAT WITH 0.8.x\nPackageAPI.prototype.add_files = PackageAPI.prototype.addFiles;\n\nexports.PackageAPI = PackageAPI;\n"]}