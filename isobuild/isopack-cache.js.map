{"version":3,"sources":["/tools/isobuild/isopack-cache.js"],"names":[],"mappings":"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","file":"tools/isobuild/isopack-cache.js.map","sourcesContent":["var _ = require('underscore');\n\nvar buildmessage = require('../utils/buildmessage.js');\nvar compiler = require('./compiler.js');\nvar files = require('../fs/files.js');\nvar isopackModule = require('./isopack.js');\nvar watch = require('../fs/watch.js');\nvar colonConverter = require('../utils/colon-converter.js');\n\nexports.IsopackCache = function (options) {\n  var self = this;\n  options = options || {};\n\n  // cacheDir may be null; in this case, we just don't ever save things to disk.\n  self.cacheDir = options.cacheDir;\n\n  // Root directory for caches used by build plugins.  Can be null, in which\n  // case we never give the build plugins a cache.  The directory structure is:\n  // <pluginCacheDirRoot>/<escapedPackageName>/<version>, where <version> is\n  // either the package's version if it's a versioned package, or \"local\" if\n  // it's a local package.  In the latter case, we make sure to empty it any\n  // time we rebuild the package.\n  self._pluginCacheDirRoot = options.pluginCacheDirRoot;\n\n  // This is a bit of a hack, but basically: we really don't want to spend time\n  // building web.cordova unibuilds in a project that doesn't have any Cordova\n  // platforms. (Note that we need to be careful with 'meteor publish' to still\n  // publish a web.cordova unibuild!)\n  self._includeCordovaUnibuild = !! options.includeCordovaUnibuild;\n\n  // Defines the versions of packages that we build. Must be set.\n  self._packageMap = options.packageMap;\n\n  // tropohouse may be null; in this case, we can't load versioned packages.\n  // eg, for building isopackets.\n  self._tropohouse = options.tropohouse;\n\n  // If provided, this is another IsopackCache for the same cache dir; when\n  // loading Isopacks, if they are definitely unchanged we can load the\n  // in-memory objects from this cache instead of recompiling.\n  self._previousIsopackCache = options.previousIsopackCache;\n  if (self._previousIsopackCache &&\n      self._previousIsopackCache.cacheDir !== self.cacheDir) {\n    throw Error(\"previousIsopackCache has different cacheDir!\");\n  }\n\n  // Map from package name to Isopack.\n  self._isopacks = {};\n\n  self._noLineNumbers = !! options.noLineNumbers;\n\n  self._lintLocalPackages = !! options.lintLocalPackages;\n  self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n  self.allLoadedLocalPackagesWatchSet = new watch.WatchSet;\n};\n\n_.extend(exports.IsopackCache.prototype, {\n  buildLocalPackages: function (rootPackageNames) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    if (self.cacheDir)\n      files.mkdir_p(self.cacheDir);\n\n    var onStack = {};\n    if (rootPackageNames) {\n      _.each(rootPackageNames, function (name) {\n        self._ensurePackageLoaded(name, onStack);\n      });\n    } else {\n      self._packageMap.eachPackage(function (name, packageInfo) {\n        self._ensurePackageLoaded(name, onStack);\n      });\n    }\n  },\n\n  wipeCachedPackages: function (packages) {\n    var self = this;\n    if (packages) {\n      // Wipe specific packages.\n      _.each(packages, function (packageName) {\n        if (self.cacheDir) {\n          files.rm_recursive(self._isopackDir(packageName));\n        }\n        if (self._pluginCacheDirRoot) {\n          files.rm_recursive(self._pluginCacheDirForPackage(packageName));\n        }\n      });\n    } else {\n      // Wipe all packages.\n      if (self.cacheDir) {\n        files.rm_recursive(self.cacheDir);\n      }\n      if (self._pluginCacheDirRoot) {\n        files.rm_recursive(self._pluginCacheDirRoot);\n      }\n    }\n  },\n\n  // Returns the isopack (already loaded in memory) for a given name. It is an\n  // error to call this if it's not already loaded! So it should only be called\n  // after buildLocalPackages has returned, or in the process of building a\n  // package whose dependencies have all already been built.\n  getIsopack: function (name) {\n    var self = this;\n    if (! _.has(self._isopacks, name))\n      throw Error(\"isopack \" + name + \" not yet loaded?\");\n    return self._isopacks[name];\n  },\n\n  eachBuiltIsopack: function (iterator) {\n    var self = this;\n    _.each(self._isopacks, function (isopack, packageName) {\n      iterator(packageName, isopack);\n    });\n  },\n\n  _ensurePackageLoaded: function (name, onStack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (_.has(self._isopacks, name))\n      return;\n\n    var ensureLoaded = function (depName) {\n      if (_.has(onStack, depName)) {\n        buildmessage.error(\"circular dependency between packages \" +\n                           name + \" and \" + depName);\n        // recover by not enforcing one of the dependencies\n        return;\n      }\n      onStack[depName] = true;\n      self._ensurePackageLoaded(depName, onStack);\n      delete onStack[depName];\n    };\n\n    var packageInfo = self._packageMap.getInfo(name);\n    if (! packageInfo)\n      throw Error(\"Depend on unknown package \" + name + \"?\");\n    var previousIsopack = null;\n    if (self._previousIsopackCache &&\n        _.has(self._previousIsopackCache._isopacks, name)) {\n      var previousInfo = self._previousIsopackCache._packageMap.getInfo(name);\n      if ((packageInfo.kind === 'versioned' &&\n           previousInfo.kind === 'versioned' &&\n           packageInfo.version === previousInfo.version) ||\n          (packageInfo.kind === 'local' &&\n           previousInfo.kind === 'local' &&\n           (packageInfo.packageSource.sourceRoot ===\n            previousInfo.packageSource.sourceRoot))) {\n        previousIsopack = self._previousIsopackCache._isopacks[name];\n      }\n    }\n\n    if (packageInfo.kind === 'local') {\n      var packageNames =\n            packageInfo.packageSource.getPackagesToLoadFirst(self._packageMap);\n      buildmessage.enterJob(\"preparing to build package \" + name, function () {\n        _.each(packageNames, function (depName) {\n          ensureLoaded(depName);\n        });\n        // If we failed to load something that this package depends on, don't\n        // load it.\n        if (buildmessage.jobHasMessages())\n          return;\n        self._loadLocalPackage(name, packageInfo, previousIsopack);\n      });\n    } else if (packageInfo.kind === 'versioned') {\n      // We don't have to build this package, and we don't have to build its\n      // dependencies either! Just load it from disk.\n\n      if (!self._tropohouse) {\n        throw Error(\"Can't load versioned packages without a tropohouse!\");\n      }\n\n      var isopack = null, packagesToLoad = [];\n      if (previousIsopack) {\n        // We can always reuse a previous Isopack for a versioned package, since\n        // we assume that it never changes.  (Admittedly, this means we won't\n        // notice if we download an additional build for the package.)\n        isopack = previousIsopack;\n        packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n      }\n      if (! isopack) {\n        // Load the isopack from disk.\n        buildmessage.enterJob(\n          \"loading package \" + name + \"@\" + packageInfo.version,\n          function () {\n            var pluginCacheDir;\n            if (self._pluginCacheDirRoot) {\n              pluginCacheDir = self._pluginCacheDirForVersion(\n                name, packageInfo.version);\n              files.mkdir_p(pluginCacheDir);\n            }\n            var isopackPath = self._tropohouse.packagePath(\n              name, packageInfo.version);\n\n            var Isopack = isopackModule.Isopack;\n            isopack = new Isopack();\n            isopack.initFromPath(name, isopackPath, {\n              pluginCacheDir: pluginCacheDir\n            });\n            // If loading the isopack fails, then we don't need to look for more\n            // packages to load, but we should still recover by putting it in\n            // self._isopacks.\n            if (buildmessage.jobHasMessages())\n              return;\n            packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n          });\n      }\n\n      self._isopacks[name] = isopack;\n      // Also load its dependencies. This is so that if this package is being\n      // built as part of a plugin, all the transitive dependencies of the\n      // plugin are loaded.\n      _.each(packagesToLoad, function (packageToLoad) {\n        ensureLoaded(packageToLoad);\n      });\n    } else {\n      throw Error(\"unknown packageInfo kind?\");\n    }\n  },\n\n  _loadLocalPackage: function (name, packageInfo, previousIsopack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    buildmessage.enterJob(\"building package \" + name, function () {\n      var isopack;\n      if (previousIsopack && self._checkUpToDatePreloaded(previousIsopack)) {\n        isopack = previousIsopack;\n        // We don't need to call self._lintLocalPackage here, because\n        // lintingMessages is saved on the isopack.\n      } else {\n        var pluginCacheDir;\n        if (self._pluginCacheDirRoot) {\n          pluginCacheDir = self._pluginCacheDirForLocal(name);\n        }\n\n        // Do we have an up-to-date package on disk?\n        var isopackBuildInfoJson = self.cacheDir && files.readJSONOrNull(\n          self._isopackBuildInfoPath(name));\n        var upToDate = self._checkUpToDate(isopackBuildInfoJson);\n\n        if (upToDate) {\n          // Reuse existing plugin cache dir\n          pluginCacheDir && files.mkdir_p(pluginCacheDir);\n\n          isopack = new isopackModule.Isopack();\n          isopack.initFromPath(name, self._isopackDir(name), {\n            isopackBuildInfoJson: isopackBuildInfoJson,\n            pluginCacheDir: pluginCacheDir\n          });\n          // _checkUpToDate already verified that\n          // isopackBuildInfoJson.pluginProviderPackageMap is a subset of\n          // self._packageMap, so this operation is correct. (It can't be done\n          // by isopack.initFromPath, because Isopack doesn't have access to the\n          // PackageMap, and specifically to the local catalog it knows about.)\n          isopack.setPluginProviderPackageMap(\n            self._packageMap.makeSubsetMap(\n              _.keys(isopackBuildInfoJson.pluginProviderPackageMap)));\n          // Because we don't save linter messages to disk, we have to relint\n          // this package.\n          // XXX save linter messages to disk?\n          self._lintLocalPackage(packageInfo.packageSource, isopack);\n        } else {\n          // Nope! Compile it again. Give it a fresh plugin cache.\n          if (pluginCacheDir) {\n            files.rm_recursive(pluginCacheDir);\n            files.mkdir_p(pluginCacheDir);\n          }\n          isopack = compiler.compile(packageInfo.packageSource, {\n            packageMap: self._packageMap,\n            isopackCache: self,\n            noLineNumbers: self._noLineNumbers,\n            includeCordovaUnibuild: self._includeCordovaUnibuild,\n            includePluginProviderPackageMap: true,\n            pluginCacheDir: pluginCacheDir\n          });\n          // Accept the compiler's result, even if there were errors (since it\n          // at least will have a useful WatchSet and will allow us to keep\n          // going and compile other packages that depend on this one). However,\n          // only lint it and save it to disk if there were no errors.\n          if (! buildmessage.jobHasMessages()) {\n            // Lint the package. We do this before saving so that the linter can\n            // augment the saved-to-disk WatchSet with linter-specific files.\n            self._lintLocalPackage(packageInfo.packageSource, isopack);\n            if (self.cacheDir) {\n              // Save to disk, for next time!\n              isopack.saveToPath(self._isopackDir(name), {\n                includeIsopackBuildInfo: true\n              });\n            }\n          }\n        }\n      }\n\n      self.allLoadedLocalPackagesWatchSet.merge(isopack.getMergedWatchSet());\n      self._isopacks[name] = isopack;\n    });\n  },\n\n  // Runs appropriate linters on a package. It also augments their unibuilds'\n  // WatchSets with files used by the linter.\n  _lintLocalPackage(packageSource, isopack) {\n    buildmessage.assertInJob();\n    if (!this._shouldLintPackage(packageSource)) {\n      return;\n    }\n    const {warnings, linted} = compiler.lint(packageSource, {\n      isopackCache: this,\n      isopack: isopack,\n      includeCordovaUnibuild: this._includeCordovaUnibuild\n    });\n    // Empty lintingMessages means we ran linters and everything was OK.\n    // lintingMessages left null means there were no linters to run.\n    if (linted) {\n      isopack.lintingMessages = warnings;\n    }\n  },\n\n  _checkUpToDate: function (isopackBuildInfoJson) {\n    var self = this;\n    // If there isn't an isopack-buildinfo.json file, then we definitely aren't\n    // up to date!\n    if (! isopackBuildInfoJson)\n      return false;\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !==\n        isopackBuildInfoJson.includeCordovaUnibuild) {\n      return false;\n    }\n\n    // Was the package built by a different compiler version?\n    if (isopackBuildInfoJson.builtBy !== compiler.BUILT_BY) {\n      return false;\n    }\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      isopackBuildInfoJson.pluginProviderPackageMap)) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = watch.WatchSet.fromJSON(\n      isopackBuildInfoJson.pluginDependencies);\n\n    _.each(isopackBuildInfoJson.unibuildDependencies, function (deps) {\n      watchSet.merge(watch.WatchSet.fromJSON(deps));\n    });\n    return watch.isUpToDate(watchSet);\n  },\n\n  _checkUpToDatePreloaded: function (previousIsopack) {\n    var self = this;\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !== previousIsopack.hasCordovaUnibuild()) {\n      return false;\n    }\n\n    // We don't have to check builtBy because we don't change BUILT_BY without\n    // restarting the process.\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      previousIsopack.pluginProviderPackageMap.toJSON())) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = previousIsopack.getMergedWatchSet();\n    return watch.isUpToDate(watchSet);\n  },\n\n  _isopackDir: function (packageName) {\n    var self = this;\n    return files.pathJoin(self.cacheDir, colonConverter.convert(packageName));\n  },\n\n  _pluginCacheDirForPackage: function (packageName) {\n    var self = this;\n    return files.pathJoin(self._pluginCacheDirRoot,\n                          colonConverter.convert(packageName));\n  },\n\n  _pluginCacheDirForVersion: function (packageName, version) {\n    var self = this;\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), version);\n  },\n\n  _pluginCacheDirForLocal: function (packageName) {\n    var self = this;\n    // assumes that `local` is not a valid package version.\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), 'local');\n  },\n\n  _isopackBuildInfoPath: function (packageName) {\n    var self = this;\n    return files.pathJoin(\n      self._isopackDir(packageName), 'isopack-buildinfo.json');\n  },\n\n  forgetPreviousIsopackCache: function () {\n    var self = this;\n    self._previousIsopackCache = null;\n  },\n\n  _shouldLintPackage(packageSource) {\n    if (this._lintLocalPackages)\n      return true;\n    if (! this._lintPackageWithSourceRoot)\n      return false;\n    return this._lintPackageWithSourceRoot === packageSource.sourceRoot;\n  },\n\n  getLintingMessagesForLocalPackages: function () {\n    const messages = new buildmessage._MessageSet();\n    let anyLinters = false;\n\n    this._packageMap.eachPackage((name, packageInfo) => {\n      const isopack = this._isopacks[name];\n      if (packageInfo.kind === 'local') {\n        if (!this._shouldLintPackage(packageInfo.packageSource)) {\n          return;\n        }\n        const isopackMessages = isopack.lintingMessages;\n        if (isopackMessages) {\n          anyLinters = true;\n          messages.merge(isopackMessages);\n        }\n      }\n    });\n\n    // return null if no linters were ever run\n    if (! anyLinters) { return null; }\n\n    return messages;\n  }\n});\n"]}