{"version":3,"sources":["/tools/isobuild/build-plugin.js"],"names":[],"mappings":";;4BAIkB,mBAAmB;;;;AAJrC,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC/C,IAAI,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AACvD,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACtC,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAG9B,IAAI,MAAM,GAAG,CAAC,CAAC;;AAEf,OAAO,CAAC,eAAe,GAAG,UAAU,OAAO,EAAE;AAC3C,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC/B,MAAI,CAAC,UAAU,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAA,CAAE,KAAK,EAAE,CAAC;AACrD,MAAI,CAAC,SAAS,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAA,CAAE,KAAK,EAAE,CAAC;AACnD,MAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;AACzC,MAAI,CAAC,UAAU,GAAG,CAAC,CAAE,OAAO,CAAC,UAAU,CAAC;AACxC,MAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;AAC/C,MAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACrC,MAAI,CAAC,EAAE,GAAO,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,SAAM,MAAM,EAAE,AAAG,CAAC;AAC7D,MAAI,CAAC,UAAU,GAAG,IAAI,CAAC;CACxB,CAAC;AACF,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE;;;;;;;AAO1C,mBAAiB,EAAE,YAAY;AAC7B,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,gBAAY,CAAC,eAAe,EAAE,CAAC;AAC/B,QAAI,IAAI,CAAC,UAAU,EAAE;AACnB,YAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;KAChD;AACD,gBAAY,CAAC,QAAQ,CACnB,aAAW,IAAI,CAAC,UAAU,6BACxB,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAC5B,YAAM;AACJ,UAAI;AACF,YAAI,CAAC,UAAU,GAAG,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAC9D,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEd,YAAI,IAAI,CAAC,OAAO,CAAC,cAAc,IAC3B,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE;AACzC,sBAAY,CAAC,YAAY,CAAC,YAAY;AACpC,gBAAI,CAAC,UAAU,CAAC,qBAAqB,CACnC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CACnD,CAAC;WACH,CAAC,EAAE,CAAC;SACN;OACF,CAAC,OAAO,CAAC,EAAE;AACV,oBAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;OAC3B;KACF,CACF,CAAC;GACH;AACD,iBAAe,EAAE,UAAU,IAAI,EAAE;AAC/B,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,WAAO,CAAE,IAAI,CAAC,YAAY,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;GACzE;CACF,CAAC,CAAC;;;;;IAIU,kBAAkB;AAClB,WADA,kBAAkB,CACjB,oBAAoB,EAIxB;qEAAJ,EAAE;;QAHJ,UAAU,QAAV,UAAU;QACV,aAAa,QAAb,aAAa;QACb,cAAc,QAAd,cAAc;sCAJL,kBAAkB;;;AAO3B,QAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;;;AAGlD,QAAI,CAAC,cAAc,GAAG,aAAa,CAAC;;;AAGpC,QAAI,CAAC,WAAW,GAAG,CAAC,CAAE,UAAU,CAAC;;;AAGjC,QAAI,CAAC,eAAe,GAAG,CAAC,CAAE,cAAc,CAAC;;;AAGzC,QAAI,CAAC,YAAY,GAAG,EAAE,CAAC;;AAEvB,QAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;;AAGtB,QAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;;AAE9B,QAAI,CAAC,eAAe,GAAG,EAAE,CAAC;GAC3B;;AA3BU,oBAAkB,WA6B7B,cAAc,GAAA,wBAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC3C,QAAI,IAAI,CAAC,cAAc,EAAE;AACvB,kBAAY,CAAC,KAAK,CAChB,wBAAuB,IAAI,CAAC,qBAAqB,4CAC9B,QAAQ,CAAG,CAAC,CAAC;KACnC,MAAM;AACL,kBAAY,CAAC,KAAK,CAChB,wCAAuC,IAAI,CAAC,qBAAqB,gBAC1D,QAAQ,aAAU,QAAQ,kCAA+B,GAC9D,QAAQ,CAAC,CAAC;KACf;GACF;;AAxCU,oBAAkB,WA0C7B,kBAAkB,GAAA,4BAAC,EAAE,EAAE;AACrB,gBAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,QAAI,CAAC,yBAAyB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC3E,QAAI,CAAC,yBAAyB,CAAC,EAAE,EAAE,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;;;;AAIvE,QAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GACnC;;AAlDU,oBAAkB,WAmD7B,yBAAyB,GAAA,mCAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE;;;AAC1D,gBAAY,CAAC,WAAW,EAAE,CAAC;;AAE3B,UAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAK;AACxB,UAAI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AACjC,YAAI,MAAK,eAAe,EAAE;AACxB,iBAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACzB,MAAM;AACL,gBAAK,cAAc,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,EACxB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EACvC,WAAW,GAAG,KAAK,CAAC,CAAC;;SAE1C;OACF,MAAM;AACL,iBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACvB;KACF,CAAC,CAAC;GACJ;;AApEU,oBAAkB,WAsE7B,gBAAgB,GAAA,0BAAC,KACgB,EAAE;QADhB,SAAS,GAAX,KACgB,CADd,SAAS;QAAE,OAAO,GAApB,KACgB,CADH,OAAO;QAAE,kBAAkB,GAAxC,KACgB,CADM,kBAAkB;QAAE,UAAU,GAApD,KACgB,CAD0B,UAAU;QAClD,YAAY,GADd,KACgB,CAAd,YAAY;;AAC7B,QAAI,IAAI,CAAC,eAAe,EACtB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;;AAEjD,QAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AAC/C,UAAI,CAAC,cAAc,CAAC,kBAAkB,EAClB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EAClD,IAAI,GAAG,SAAS,CAAC,CAAC;;AAEtC,aAAO;KACR;AACD,QAAI,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AAClD,UAAI,CAAC,cAAc,CAAC,kBAAkB,EAClB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,kBAAkB,EAClD,IAAI,GAAG,SAAS,CAAC,CAAC;;AAEtC,aAAO;KACR;AACD,QAAI,CAAC,eAAe,CAAC,SAAS,CAAC,GAC7B,EAAC,OAAO,EAAP,OAAO,EAAE,kBAAkB,EAAlB,kBAAkB,EAAE,UAAU,EAAV,UAAU,EAAE,YAAY,EAAZ,YAAY,EAAC,CAAC;GAC3D;;;;;;;AA3FU,oBAAkB,WAiG7B,KAAK,GAAA,eAAC,QAAQ,EAAgB;;;QAAd,OAAO,yDAAG,EAAE;QAClB,IAAI,GAAK,OAAO,CAAhB,IAAI;;AACZ,gBAAY,CAAC,WAAW,EAAE,CAAC;AAC3B,YAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAC,eAAe,EAAK;AACxD,UAAI,CAAE,IAAI,IAAI,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AACnD,eAAK,kBAAkB,CAAC,eAAe,CAAC,CAAC;OAC1C;KACF,CAAC,CAAC;AACH,KAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAC,IAAI,EAAE,SAAS,EAAK;UAC5C,OAAO,GAAmD,IAAI,CAA9D,OAAO;UAAE,kBAAkB,GAA+B,IAAI,CAArD,kBAAkB;UAAE,UAAU,GAAmB,IAAI,CAAjC,UAAU;UAAE,YAAY,GAAK,IAAI,CAArB,YAAY;;AAC7D,aAAK,gBAAgB,CACnB,EAAC,SAAS,EAAT,SAAS,EAAE,OAAO,EAAP,OAAO,EAAE,kBAAkB,EAAlB,kBAAkB,EAAE,UAAU,EAAV,UAAU,EAAE,YAAY,EAAZ,YAAY,EAAC,CAAC,CAAC;KACvE,CAAC,CAAC;GACJ;;;;AA9GU,oBAAkB,WAiH7B,cAAc,GAAA,wBAAC,SAAS,EAAE;AACxB,QAAI,IAAI,CAAC,eAAe,EACtB,MAAM,KAAK,CAAC,uCAAuC,CAAC,CAAC;;AAEvD,QAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AAC/C,aAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxC;AACD,WAAO,IAAI,CAAC;GACb;;;;AAzHU,oBAAkB,WA4H7B,aAAa,GAAA,uBAAC,QAAQ,EAAE;AACtB,QAAI,IAAI,CAAC,eAAe,EACtB,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;;AAEtD,QAAI,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAC7C,aAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;KACtC;AACD,WAAO,IAAI,CAAC;GACb;;;;AApIU,oBAAkB,WAuI7B,gBAAgB,GAAA,0BAAC,QAAQ,EAAE,IAAI,EAAE;;AAE/B,QAAI,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAC7C,aAAO,IAAI,oBAAoB,CAAC,UAAU,EAAE;AAC1C,YAAI,EAAJ,IAAI;AACJ,wBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE;OACrD,CAAC,CAAC;KACJ;;;;AAID,QAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAElC,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,UAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAE3C,UAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AAC/C,eAAO,IAAI,oBAAoB,CAAC,WAAW,EAAE;AAC3C,cAAI,EAAJ,IAAI;AACJ,mBAAS,EAAT,SAAS;AACT,0BAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;SAC/C,CAAC,CAAC;OACJ;;AAED,UAAI,IAAI,CAAC,WAAW,IAAI,SAAS,KAAK,IAAI,EAAE;;;;AAI1C,eAAO,IAAI,oBAAoB,CAAC,WAAW,EAAE;AAC3C,mBAAS,EAAT,SAAS;AACT,oCAA0B,EAAE,IAAI;SACjC,CAAC,CAAC;OACJ;;AAED,UAAI,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AAClD,YAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAI,MAAM,CAAC,YAAY,IACnB,CAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC,EAAE;AACjD,iBAAO,IAAI,oBAAoB,CAAC,YAAY,CAAC,CAAC;SAC/C;AACD,eAAO,IAAI,oBAAoB,CAAC,gBAAgB,EAAE;AAChD,mBAAS,EAAT,SAAS;AACT,uBAAa,EAAE,MAAM,CAAC,OAAO;AAC7B,0BAAgB,EAAE,MAAM,CAAC,UAAU;SACpC,CAAC,CAAC;OACJ;KACF;;;AAGD,WAAO,IAAI,oBAAoB,CAAC,WAAW,CAAC,CAAC;GAC9C;;AAzLU,oBAAkB,WA2L7B,OAAO,GAAA,mBAAG;AACR,WAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,IAChE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;GACnC;;;;;;AA9LU,oBAAkB,WAmM7B,uBAAuB,GAAA,iCAAC,IAAI,EAAE;AAC5B,QAAM,OAAO,GAAG,EAAE,CAAC;AACnB,QAAM,KAAK,GAAG,EAAE,CAAC;AACjB,QAAI,OAAO,GAAG,KAAK,CAAC;;AAEpB,aAAS,YAAY,CAAC,GAAG,EAAE;AACzB,aAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,KAAK,GAAG,0BAAM,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC7D,UAAI,GAAG,KAAK,IAAI,EAAE;AAChB,eAAO,GAAG,IAAI,CAAC;OAChB;KACF;;AAED,KAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,UAAC,gBAAgB,EAAE,GAAG,EAAK;AACnD,UAAI,gBAAgB,CAAC,IAAI,CAAC,UAAA,EAAE;eAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;OAAA,CAAC,EAAE;AACzD,oBAAY,CAAC,GAAG,CAAC,CAAC;OACnB;KACF,CAAC,CAAC;AACH,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;;AAExD,QAAI,IAAI,CAAC,WAAW,IAAI,CAAE,OAAO,EAAE;;;;AAIjC,kBAAY,CAAC,IAAI,CAAC,CAAC;KACpB;;AAED,KAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,gBAAgB,EAAE,QAAQ,EAAK;AACvD,UAAI,gBAAgB,CAAC,IAAI,CAAC,UAAA,EAAE;eAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;OAAA,CAAC,EAAE;AACzD,aAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OACtB;KACF,CAAC,CAAC;AACH,WAAO,EAAC,OAAO,EAAP,OAAO,EAAE,KAAK,EAAL,KAAK,EAAE,OAAO,EAAE,EAAE,EAAC,CAAC;GACtC;;SAnOU,kBAAkB;;;;;IAsOzB,oBAAoB;AACb,WADP,oBAAoB,CACZ,IAAI,EAOR;sEAAJ,EAAE;;QANJ,aAAa,SAAb,aAAa;QACb,SAAS,SAAT,SAAS;QACT,gBAAgB,SAAhB,gBAAgB;QAChB,0BAA0B,SAA1B,0BAA0B;QAC1B,gBAAgB,SAAhB,gBAAgB;QAChB,IAAI,SAAJ,IAAI;sCAPF,oBAAoB;;AAStB,QAAM,UAAU,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,gBAAgB,EAAE,YAAY,EACvD,WAAW,CAAC,CAAC;AACjC,QAAI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACnC,YAAM,KAAK,wCAAuC,IAAI,CAAI,CAAC;KAC5D;;;AAGD,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;AAEjB,QAAI,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,UAAU,EAAE;AAC/C,UAAI,gBAAgB,EAAE;AACpB,YAAI,CAAE,IAAI,EAAE;AACV,gBAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAC9C;;;;;;;;;;AAUD,YAAM,wBAAwB,GAAG,gBAAgB,CAAC,MAAM,CACtD,UAAC,eAAe;iBAAK,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC;SAAA,CAC3D,CAAC;AACF,YAAI,CAAE,wBAAwB,CAAC,MAAM,EAAE;;;AAGrC,cAAI,CAAC,IAAI,GAAG,YAAY,CAAC;AACzB,iBAAO;SACR;;AAED,YAAI,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;OAClD,MAAM,IAAI,EAAE,IAAI,KAAK,WAAW,IAAI,SAAS,KAAK,IAAI,CAAA,AAAC,EAAE;;;AAGxD,cAAM,KAAK,mCAAkC,IAAI,OAAK,CAAC;OACxD;KACF;;AAED,QAAI,IAAI,KAAK,gBAAgB,EAAE;AAC7B,UAAI,CAAE,aAAa,EAAE;AACnB,cAAM,KAAK,CAAC,2CAA2C,CAAC,CAAC;OAC1D;AACD,UAAI,gBAAgB,KAAK,SAAS,EAAE;AAClC,cAAM,KAAK,CAAC,8CAA8C,CAAC,CAAC;OAC7D;AACD,UAAI,CAAC,aAAa,GAAG,aAAa,CAAC;AACnC,UAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC1C;;AAED,QAAI,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,gBAAgB,EAAE;AACrD,UAAI,CAAE,SAAS,EAAE;AACf,cAAM,KAAK,CAAC,iDAAiD,CAAC,CAAC;OAChE;AACD,UAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;;AAED,QAAI,0BAA0B,EAAE;AAC9B,UAAI,IAAI,CAAC,SAAS,KAAK,IAAI,IACvB,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE;;;;;AAK5B,cAAM,KAAK,CAAC,sDAAsD,CAAC,CAAC;OACrE;AACD,UAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;KACxC,MAAM;AACL,UAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;KACzC;GACF;;;;AAjFG,sBAAoB,WAmFxB,iBAAiB,GAAA,6BAAG;AAClB,WAAO,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC;GAC9D;;SArFG,oBAAoB;;;AA2F1B,OAAO,CAAC,SAAS,GAAG,UAAU,YAAY,EAAE,EAC3C,CAAC;AACF,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE;;;;;;AAMpC,qBAAmB,EAAE,YAAY;AAC/B,UAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;GACpC;;;;;;;AAOD,gBAAc,EAAE,YAAY;AAC1B,UAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;GACpC;;;;;;;AAOD,kBAAgB,EAAE,YAAY;AAC5B,UAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;GACpC;;;;;;;AAOD,eAAa,EAAE,YAAY;AACzB,UAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;GACpC;;;;;;;AAOD,SAAO,EAAE,YAAY;AACnB,UAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;GACpC;;;;;;;AAOD,qBAAmB,EAAE,YAAY;AAC/B,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,WAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;GACpD;;;;;;AAMD,aAAW,EAAE,YAAY;AACvB,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,WAAO,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;GACpD;;;;;;;AAOD,YAAU,EAAE,YAAY;AACtB,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,WAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;GACnD;;;;;;;;;;;AAWD,OAAK,EAAE,UAAU,OAAO,EAAE;AACxB,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACnC,QAAI,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACxC,QAAI,WAAW,EAAE;AACf,UAAI,GAAG,WAAW,GAAG,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC;KAC/C;;AAED,gBAAY,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,IAAK,iBAAiB,GAAG,IAAI,AAAC,EAAE;AAChE,UAAI,EAAE,OAAO,CAAC,UAAU,IAAI,IAAI;AAChC,UAAI,EAAE,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,SAAS;AAC7C,YAAM,EAAE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS;AACnD,UAAI,EAAE,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,SAAS;KAC9C,CAAC,CAAC;GACJ;CACF,CAAC,CAAC","file":"tools/isobuild/build-plugin.js.map","sourcesContent":["var archinfo = require('../utils/archinfo.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar files = require('../fs/files.js');\nvar _ = require('underscore');\nimport utils from '../utils/utils.js';\n\nlet nextId = 1;\n\nexports.SourceProcessor = function (options) {\n  var self = this;\n  self.isopack = options.isopack;\n  self.extensions = (options.extensions || []).slice();\n  self.filenames = (options.filenames || []).slice();\n  self.archMatching = options.archMatching;\n  self.isTemplate = !! options.isTemplate;\n  self.factoryFunction = options.factoryFunction;\n  self.methodName = options.methodName;\n  self.id = `${ options.isopack.displayName() }#${ nextId++ }`;\n  self.userPlugin = null;\n};\n_.extend(exports.SourceProcessor.prototype, {\n  // Call the user's factory function to get the actual build plugin object.\n  // Note that we're supposed to have one userPlugin per project, so this\n  // assumes that each Isopack object is specific to a project.  We don't run\n  // this immediately on evaluating Plugin.registerCompiler; we instead wait\n  // until the whole plugin file has been evaluated (so that it can use things\n  // defined later in the file).\n  instantiatePlugin: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (self.userPlugin) {\n      throw Error(\"Called instantiatePlugin twice?\");\n    }\n    buildmessage.enterJob(\n      `running ${self.methodName} callback in package ` +\n        self.isopack.displayName(),\n      () => {\n        try {\n          self.userPlugin = buildmessage.markBoundary(self.factoryFunction)\n            .call(null);\n          // If we have a disk cache directory and the plugin wants it, use it.\n          if (self.isopack.pluginCacheDir &&\n              self.userPlugin.setDiskCacheDirectory) {\n            buildmessage.markBoundary(function () {\n              self.userPlugin.setDiskCacheDirectory(\n                files.convertToOSPath(self.isopack.pluginCacheDir)\n              );\n            })();\n          }\n        } catch (e) {\n          buildmessage.exception(e);\n        }\n      }\n    );\n  },\n  relevantForArch: function (arch) {\n    var self = this;\n    return ! self.archMatching || archinfo.matches(arch, self.archMatching);\n  }\n});\n\n// Represents a set of SourceProcessors available in a given package. They may\n// not have conflicting extensions or filenames.\nexport class SourceProcessorSet {\n  constructor(myPackageDisplayName, {\n    hardcodeJs,\n    singlePackage,\n    allowConflicts,\n  } = {}) {\n    // For error messages only.\n    this._myPackageDisplayName = myPackageDisplayName;\n    // If this represents the SourceProcessors *registered* by a single package\n    // (vs those *available* to a package), use different error messages.\n    this._singlePackage = singlePackage;\n    // If this is being used for *compilers*, we hardcode *.js. If it is being\n    // used for linters, we don't.\n    this._hardcodeJs = !! hardcodeJs;\n    // Multiple linters may be registered on the same extension or filename, but\n    // not compilers.\n    this._allowConflicts = !! allowConflicts;\n\n    // Map from extension -> [SourceProcessor]\n    this._byExtension = {};\n    // Map from basename -> [SourceProcessor]\n    this._byFilename = {};\n    // This is just an duplicate-free list of all SourceProcessors in\n    // byExtension or byFilename.\n    this.allSourceProcessors = [];\n    // extension -> { handler, packageDisplayName, isTemplate, archMatching }\n    this._legacyHandlers = {};\n  }\n\n  _conflictError(package1, package2, conflict) {\n    if (this._singlePackage) {\n      buildmessage.error(\n        `plugins in package ${ this._myPackageDisplayName } define multiple ` +\n          `handlers for ${ conflict }`);\n    } else {\n      buildmessage.error(\n        `conflict: two packages included in ${ this._myPackageDisplayName } ` +\n          `(${ package1 } and ${ package2 }) are both trying to handle ` +\n          conflict);\n    }\n  }\n\n  addSourceProcessor(sp) {\n    buildmessage.assertInJob();\n    this._addSourceProcessorHelper(sp, sp.extensions, this._byExtension, '*.');\n    this._addSourceProcessorHelper(sp, sp.filenames, this._byFilename, '');\n    // If everything conflicted, then the SourceProcessors will be in\n    // allSourceProcessors but not any of the data structures, but in that case\n    // the caller should be checking for errors anyway.\n    this.allSourceProcessors.push(sp);\n  }\n  _addSourceProcessorHelper(sp, things, byThing, errorPrefix) {\n    buildmessage.assertInJob();\n\n    things.forEach((thing) => {\n      if (byThing.hasOwnProperty(thing)) {\n        if (this._allowConflicts) {\n          byThing[thing].push(sp);\n        } else {\n          this._conflictError(sp.isopack.displayName(),\n                              byThing[thing][0].isopack.displayName(),\n                              errorPrefix + thing);\n          // recover by ignoring this one\n        }\n      } else {\n        byThing[thing] = [sp];\n      }\n    });\n  }\n\n  addLegacyHandler({ extension, handler, packageDisplayName, isTemplate,\n                     archMatching }) {\n    if (this._allowConflicts)\n      throw Error(\"linters have no legacy handlers\");\n\n    if (this._byExtension.hasOwnProperty(extension)) {\n      this._conflictError(packageDisplayName,\n                          this._byExtension[extension].isopack.displayName(),\n                          '*.' + extension);\n      // recover by ignoring\n      return;\n    }\n    if (this._legacyHandlers.hasOwnProperty(extension)) {\n      this._conflictError(packageDisplayName,\n                          this._legacyHandlers[extension].packageDisplayName,\n                          '*.' + extension);\n      // recover by ignoring\n      return;\n    }\n    this._legacyHandlers[extension] =\n      {handler, packageDisplayName, isTemplate, archMatching};\n  }\n\n  // Adds all the source processors (and legacy handlers) from the other set to\n  // this one. Logs buildmessage errors on conflict.  Ignores packageDisplayName\n  // and singlePackage.  If arch is set, skips SourceProcessors that\n  // don't match it.\n  merge(otherSet, options = {}) {\n    const { arch } = options;\n    buildmessage.assertInJob();\n    otherSet.allSourceProcessors.forEach((sourceProcessor) => {\n      if (! arch || sourceProcessor.relevantForArch(arch)) {\n        this.addSourceProcessor(sourceProcessor);\n      }\n    });\n    _.each(otherSet._legacyHandlers, (info, extension) => {\n      const { handler, packageDisplayName, isTemplate, archMatching } = info;\n      this.addLegacyHandler(\n        {extension, handler, packageDisplayName, isTemplate, archMatching});\n    });\n  }\n\n  // Note: Only returns SourceProcessors, not legacy handlers.\n  getByExtension(extension) {\n    if (this._allowConflicts)\n      throw Error(\"Can't call getByExtension for linters\");\n\n    if (this._byExtension.hasOwnProperty(extension)) {\n      return this._byExtension[extension][0];\n    }\n    return null;\n  }\n\n  // Note: Only returns SourceProcessors, not legacy handlers.\n  getByFilename(filename) {\n    if (this._allowConflicts)\n      throw Error(\"Can't call getByFilename for linters\");\n\n    if (this._byFilename.hasOwnProperty(filename)) {\n      return this._byFilename[filename][0];\n    }\n    return null;\n  }\n\n  // filename, arch -> SourceClassification\n  classifyFilename(filename, arch) {\n    // First check to see if a plugin registered for this exact filename.\n    if (this._byFilename.hasOwnProperty(filename)) {\n      return new SourceClassification('filename', {\n        arch,\n        sourceProcessors: this._byFilename[filename].slice()\n      });\n    }\n\n    // Now check to see if a plugin registered for an extension. We prefer\n    // longer extensions.\n    const parts = filename.split('.');\n    // don't use iteration functions, so we can return (and start at #1)\n    for (let i = 1; i < parts.length; i++) {\n      const extension = parts.slice(i).join('.');\n\n      if (this._byExtension.hasOwnProperty(extension)) {\n        return new SourceClassification('extension', {\n          arch,\n          extension,\n          sourceProcessors: this._byExtension[extension]\n        });\n      }\n\n      if (this._hardcodeJs && extension === 'js') {\n        // If there is no special sourceProcessor for handling a .js file,\n        // we can still classify it as extension/js, only without any\n        // source processors. #HardcodeJs\n        return new SourceClassification('extension', {\n          extension,\n          usesDefaultSourceProcessor: true\n        });\n      }\n\n      if (this._legacyHandlers.hasOwnProperty(extension)) {\n        const legacy = this._legacyHandlers[extension];\n        if (legacy.archMatching &&\n            ! archinfo.matches(arch, legacy.archMatching)) {\n          return new SourceClassification('wrong-arch');\n        }\n        return new SourceClassification('legacy-handler', {\n          extension,\n          legacyHandler: legacy.handler,\n          legacyIsTemplate: legacy.isTemplate\n        });\n      }\n    }\n\n    // Nothing matches; it must be a static asset (or a non-linted file).\n    return new SourceClassification('unmatched');\n  }\n\n  isEmpty() {\n    return _.isEmpty(this._byFilename) && _.isEmpty(this._byExtension) &&\n      _.isEmpty(this._legacyHandlers);\n  }\n\n  // Returns an options object suitable for passing to\n  // `watch.readAndWatchDirectory` to find source files processed by this\n  // SourceProcessorSet.\n  appReadDirectoryOptions(arch) {\n    const include = [];\n    const names = [];\n    let addedJs = false;\n\n    function addExtension(ext) {\n      include.push(new RegExp('\\\\.' + utils.quotemeta(ext) + '$'));\n      if (ext === 'js') {\n        addedJs = true;\n      }\n    }\n\n    _.each(this._byExtension, (sourceProcessors, ext) => {\n      if (sourceProcessors.some(sp => sp.relevantForArch(arch))) {\n        addExtension(ext);\n      }\n    });\n    Object.keys(this._legacyHandlers).forEach(addExtension);\n\n    if (this._hardcodeJs && ! addedJs) {\n      // If there is no sourceProcessor for handling .js files, we still\n      // want to make sure they get picked up when we're reading the\n      // contents of app directories. #HardcodeJs\n      addExtension('js');\n    }\n\n    _.each(this._byFilename, (sourceProcessors, filename) => {\n      if (sourceProcessors.some(sp => sp.relevantForArch(arch))) {\n        names.push(filename);\n      }\n    });\n    return {include, names, exclude: []};\n  }\n}\n\nclass SourceClassification {\n  constructor(type, {\n    legacyHandler,\n    extension,\n    sourceProcessors,\n    usesDefaultSourceProcessor,\n    legacyIsTemplate,\n    arch,\n  } = {}) {\n    const knownTypes = ['extension', 'filename', 'legacy-handler', 'wrong-arch',\n                        'unmatched'];\n    if (knownTypes.indexOf(type) === -1) {\n      throw Error(`Unknown SourceClassification type ${ type }`);\n    }\n    // This is the only thing we can write to `this` before checking for\n    // wrong-arch.\n    this.type = type;\n\n    if (type === 'extension' || type === 'filename') {\n      if (sourceProcessors) {\n        if (! arch) {\n          throw Error(\"need to filter based on arch!\");\n        }\n\n        // If there's a SourceProcessor (or legacy handler) registered for this\n        // file but not for this arch, we want to ignore it instead of\n        // processing it or treating it as a static asset. (Note that prior to\n        // the batch-plugins project, files added in a package with\n        // `api.addFiles('foo.bar')` where *.bar is a web-specific legacy\n        // handler (eg) would end up adding 'foo.bar' as a static asset on\n        // non-web programs, which was unintended. This didn't happen in apps\n        // because initFromAppDir's getFiles never added them.)\n        const filteredSourceProcessors = sourceProcessors.filter(\n          (sourceProcessor) => sourceProcessor.relevantForArch(arch)\n        );\n        if (! filteredSourceProcessors.length) {\n          // Wrong architecture! Rewrite this.type and return.  (Note that we\n          // haven't written anything else to `this` so far.)\n          this.type = 'wrong-arch';\n          return;\n        }\n\n        this.sourceProcessors = filteredSourceProcessors;\n      } else if (!(type === 'extension' && extension === 'js')) {\n        // 'extension' and 'filename' classifications need to have at least one\n        // SourceProcessor, unless it's the #HardcodeJs special case.\n        throw Error(`missing sourceProcessors for ${ type }!`);\n      }\n    }\n\n    if (type === 'legacy-handler') {\n      if (! legacyHandler) {\n        throw Error('SourceClassification needs legacyHandler!');\n      }\n      if (legacyIsTemplate === undefined) {\n        throw Error('SourceClassification needs legacyIsTemplate!');\n      }\n      this.legacyHandler = legacyHandler;\n      this.legacyIsTemplate = legacyIsTemplate;\n    }\n\n    if (type === 'extension' || type === 'legacy-handler') {\n      if (! extension) {\n        throw Error('extension SourceClassification needs extension!');\n      }\n      this.extension = extension;\n    }\n\n    if (usesDefaultSourceProcessor) {\n      if (this.extension !== 'js' &&\n          this.extension !== 'css') {\n        // We only currently hard-code support for processing .js files\n        // when no source processor is registered (#HardcodeJs). Default\n        // support could conceivably be extended to .css files too, but\n        // anything else is almost certainly a mistake.\n        throw Error('non-JS/CSS file relying on default source processor?');\n      }\n      this.usesDefaultSourceProcessor = true;\n    } else {\n      this.usesDefaultSourceProcessor = false;\n    }\n  }\n\n  isNonLegacySource() {\n    return this.type === 'extension' || this.type === 'filename';\n  }\n}\n\n\n\n// This is the base class of the object presented to the user's plugin code.\nexports.InputFile = function (resourceSlot) {\n};\n_.extend(exports.InputFile.prototype, {\n  /**\n   * @summary Returns the full contents of the file as a buffer.\n   * @memberof InputFile\n   * @returns {Buffer}\n   */\n  getContentsAsBuffer: function () {\n    throw new Error(\"Not Implemented\");\n  },\n  /**\n   * @summary Returns the name of the package or `null` if the file is not in a\n   * package.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getPackageName: function () {\n    throw new Error(\"Not Implemented\");\n  },\n  /**\n   * @summary Returns the relative path of file to the package or app root\n   * directory. The returned path always uses forward slashes.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getPathInPackage: function () {\n    throw new Error(\"Not Implemented\");\n  },\n  /**\n   * @summary Returns a hash string for the file that can be used to implement\n   * caching.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getSourceHash: function () {\n    throw new Error(\"Not Implemented\");\n  },\n  /**\n   * @summary Returns the architecture that is targeted while processing this\n   * file.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getArch: function () {\n    throw new Error(\"Not Implemented\");\n  },\n\n  /**\n   * @summary Returns the full contents of the file as a string.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getContentsAsString: function () {\n    var self = this;\n    return self.getContentsAsBuffer().toString('utf8');\n  },\n  /**\n   * @summary Returns the filename of the file.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getBasename: function () {\n    var self = this;\n    return files.pathBasename(self.getPathInPackage());\n  },\n  /**\n   * @summary Returns the directory path relative to the package or app root.\n   * The returned path always uses forward slashes.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getDirname: function () {\n    var self = this;\n    return files.pathDirname(self.getPathInPackage());\n  },\n  /**\n   * @summary Call this method to raise a compilation or linting error for the\n   * file.\n   * @param {Object} options\n   * @param {String} options.message The error message to display.\n   * @param {String} [options.sourcePath] The path to display in the error message.\n   * @param {Integer} options.line The line number to display in the error message.\n   * @param {String} options.func The function name to display in the error message.\n   * @memberof InputFile\n   */\n  error: function (options) {\n    var self = this;\n    var path = self.getPathInPackage();\n    var packageName = self.getPackageName();\n    if (packageName) {\n      path = \"packages/\" + packageName + \"/\" + path;\n    }\n\n    buildmessage.error(options.message || (\"error building \" + path), {\n      file: options.sourcePath || path,\n      line: options.line ? options.line : undefined,\n      column: options.column ? options.column : undefined,\n      func: options.func ? options.func : undefined\n    });\n  }\n});\n"]}