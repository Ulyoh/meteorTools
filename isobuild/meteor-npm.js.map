{"version":3,"sources":["/tools/isobuild/meteor-npm.js"],"names":[],"mappings":"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","file":"tools/isobuild/meteor-npm.js.map","sourcesContent":["/// Implements the process of managing a package's .npm directory,\n/// in which we call `npm install` to install npm dependencies,\n/// and a variety of related commands. Notably, we use `npm shrinkwrap`\n/// to ensure we get consistent versions of npm sub-dependencies.\nvar Future = require('fibers/future');\n\nvar cleanup = require('../tool-env/cleanup.js');\nvar files = require('../fs/files.js');\nvar os = require('os');\nvar _ = require('underscore');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar utils = require('../utils/utils.js');\nvar runLog = require('../runners/run-log.js');\n\nvar meteorNpm = exports;\n\n// if a user exits meteor while we're trying to create a .npm\n// directory, we will have temporary directories that we clean up\nvar tmpDirs = [];\ncleanup.onExit(function () {\n  _.each(tmpDirs, function (dir) {\n    if (files.exists(dir))\n      files.rm_recursive(dir);\n  });\n});\n\n// Exception used internally to gracefully bail out of a npm run if\n// something goes wrong\nvar NpmFailure = function () {};\n\n// Creates a temporary directory in which the new contents of the\n// package's .npm directory will be assembled. If all is successful,\n// renames that directory back to .npm. Returns true if there are NPM\n// dependencies and they are installed without error.\n//\n// @param npmDependencies {Object} dependencies that should be\n//     installed, eg {tar: '0.1.6', gcd: '0.0.0'}. If falsey or empty,\n//     will remove the .npm directory instead.\nmeteorNpm.updateDependencies = function (packageName,\n                                         packageNpmDir,\n                                         npmDependencies,\n                                         quiet) {\n  // we make sure to put it beside the original package dir so that\n  // we can then atomically rename it. we also make sure to\n  // randomize the name, in case we're bundling this package\n  // multiple times in parallel.\n  var newPackageNpmDir = packageNpmDir + '-new-' + utils.randomToken();\n\n  if (! npmDependencies || _.isEmpty(npmDependencies)) {\n    // No NPM dependencies? Delete the .npm directory if it exists (because,\n    // eg, we used to have NPM dependencies but don't any more).  We'd like to\n    // do this in as atomic a way as possible in case multiple meteor\n    // instances are trying to make this update in parallel, so we rename the\n    // directory to something before doing the rm -rf.\n    try {\n      files.rename(packageNpmDir, newPackageNpmDir);\n    } catch (e) {\n      if (e.code !== 'ENOENT')\n        throw e;\n      // It didn't exist, which is exactly what we wanted.\n      return false;\n    }\n    files.rm_recursive(newPackageNpmDir);\n    return false;\n  }\n\n  try {\n    // v0.6.0 had a bug that could cause .npm directories to be\n    // created without npm-shrinkwrap.json\n    // (https://github.com/meteor/meteor/pull/927). Running your app\n    // in that state causes consistent \"Corrupted .npm directory\"\n    // errors.\n    //\n    // If you've reached that state, delete the empty directory and\n    // proceed.\n    if (files.exists(packageNpmDir) &&\n        ! files.exists(files.pathJoin(packageNpmDir, 'npm-shrinkwrap.json'))) {\n      files.rm_recursive(packageNpmDir);\n    }\n\n    if (files.exists(packageNpmDir)) {\n      // we already nave a .npm directory. update it appropriately with some\n      // ceremony involving:\n      // `npm install`, `npm install name@version`, `npm shrinkwrap`\n      updateExistingNpmDirectory(\n        packageName, newPackageNpmDir, packageNpmDir, npmDependencies, quiet);\n    } else {\n      // create a fresh .npm directory with `npm install\n      // name@version` and `npm shrinkwrap`\n      createFreshNpmDirectory(\n        packageName, newPackageNpmDir, packageNpmDir, npmDependencies, quiet);\n    }\n  } catch (e) {\n    if (e instanceof NpmFailure) {\n      // Something happened that was out of our control, but wasn't\n      // exactly unexpected (eg, no such npm package, no internet\n      // connection). Handle it gracefully.\n      return false;\n    }\n\n    // Some other exception -- let it propagate.\n    throw e;\n  } finally {\n    if (files.exists(newPackageNpmDir))\n      files.rm_recursive(newPackageNpmDir);\n    tmpDirs = _.without(tmpDirs, newPackageNpmDir);\n  }\n\n  return true;\n};\n\n// Return true if all of a package's npm dependencies are portable\n// (that is, if the node_modules can be copied anywhere and we'd\n// expect it to work, rather than containing native extensions that\n// were built just for our architecture), else\n// false. updateDependencies should first be used to bring\n// packageNpmDir up to date.\nmeteorNpm.dependenciesArePortable = function (packageNpmDir) {\n  // We use a simple heuristic: we check to see if a package (or any\n  // of its transitive depedencies) contains any *.node files. .node\n  // is the extension that signals to Node that it should load a file\n  // as a shared object rather than as JavaScript, so this should work\n  // in the vast majority of cases.\n\n  var search = function (dir) {\n    return _.find(files.readdir(dir), function (itemName) {\n      if (itemName.match(/\\.node$/))\n        return true;\n      var item = files.pathJoin(dir, itemName);\n      if (files.lstat(item).isDirectory())\n        return search(item);\n    }) || false;\n  };\n\n  return ! search(files.pathJoin(packageNpmDir, 'node_modules'));\n};\n\nvar makeNewPackageNpmDir = function (newPackageNpmDir) {\n  // keep track so that we can remove them on process exit\n  tmpDirs.push(newPackageNpmDir);\n  files.mkdir_p(newPackageNpmDir);\n\n  // create node_modules -- prevent npm install from installing\n  // to an existing node_modules dir higher up in the filesystem\n  files.mkdir(files.pathJoin(newPackageNpmDir, 'node_modules'));\n\n  // create .gitignore -- node_modules shouldn't be in git since we\n  // recreate it as needed by using `npm install`. since we use `npm\n  // shrinkwrap` we're guaranteed to have the same version installed\n  // each time.\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, '.gitignore'),\n    ['node_modules',\n     ''/*git diff complains without trailing newline*/].join('\\n'));\n};\n\nvar updateExistingNpmDirectory = function (packageName, newPackageNpmDir,\n                                           packageNpmDir, npmDependencies,\n                                           quiet) {\n  // sanity check on contents of .npm directory\n  if (!files.stat(packageNpmDir).isDirectory())\n    throw new Error(\"Corrupted .npm directory -- should be a directory: \" +\n                    packageNpmDir);\n  if (!files.exists(files.pathJoin(packageNpmDir, 'npm-shrinkwrap.json')))\n    throw new Error(\n      \"Corrupted .npm directory -- can't find npm-shrinkwrap.json in \" +\n        packageNpmDir);\n\n  // We need to rebuild all node modules when the Node version\n  // changes, in case there are some binary ones. Technically this is\n  // racey, but it shouldn't fail very often.\n  var nodeModulesDir = files.pathJoin(packageNpmDir, 'node_modules');\n  if (files.exists(nodeModulesDir)) {\n    var oldNodeVersion;\n    try {\n      oldNodeVersion = files.readFile(\n        files.pathJoin(packageNpmDir, 'node_modules', '.node_version'), 'utf8');\n    } catch (e) {\n      if (e.code !== 'ENOENT')\n        throw e;\n      // Use the Node version from the last release where we didn't\n      // drop this file.\n      oldNodeVersion = 'v0.8.24';\n    }\n\n    if (oldNodeVersion !== currentNodeCompatibilityVersion())\n      files.rm_recursive(nodeModulesDir);\n  }\n\n  // If the node modules directory exists but doesn't have .package.json and\n  // .npm-shrinkwrap.json, recreate.  This is to ensure that\n  // providePackageJSONForUnavailableBinaryDeps works.\n  if (files.exists(nodeModulesDir) &&\n      (!files.exists(files.pathJoin(nodeModulesDir, '.package.json')) ||\n       !files.exists(files.pathJoin(nodeModulesDir, '.npm-shrinkwrap.json')))) {\n    files.rm_recursive(nodeModulesDir);\n  }\n\n  // Make sure node_modules is present (fix for #1761). Prevents npm install\n  // from installing to an existing node_modules dir higher up in the\n  // filesystem.  node_modules may be absent due to a change in Node version or\n  // when `meteor add`ing a cloned package for the first time (node_modules is\n  // excluded by .gitignore)\n  if (! files.exists(nodeModulesDir))\n    files.mkdir(nodeModulesDir);\n\n  var installedDependenciesTree = getInstalledDependenciesTree(packageNpmDir);\n  var installedDependencies = treeToDependencies(installedDependenciesTree);\n  var shrinkwrappedDependenciesTree =\n    getShrinkwrappedDependenciesTree(packageNpmDir);\n  var shrinkwrappedDependencies = treeToDependencies(\n    shrinkwrappedDependenciesTree);\n\n  // If we already have the right things installed, life is good.\n  // XXX this check is wrong: what if we just pulled a commit that\n  //     changes a sub-module in npm-shrinkwrap.json? See #1648 But\n  //     while it might be \"correct\" to just drop this check we should\n  //     be careful not to make the common case of no changes too\n  //     slow.\n  if (_.isEqual(installedDependencies, npmDependencies)) {\n    // OK, so what we have installed matches the top-level dependencies\n    // specified in `Npm.depends`. But what if we just pulled a change in\n    // npm-shrinkwrap.json to an indirectly used module version? We'll have to\n    // compare more carefully.  First, normalize the tree (strip irrelevant\n    // fields and normalize to 'version').\n    var minimizedInstalled = minimizeDependencyTree(installedDependenciesTree);\n    // If what we have installed is the same as what we have shrinkwrapped, then\n    // we're done.\n    if (_.isEqual(minimizedInstalled, shrinkwrappedDependenciesTree)) {\n      return;\n    }\n  }\n\n  if (! quiet)\n    logUpdateDependencies(packageName, npmDependencies);\n\n  var preservedShrinkwrap = {dependencies: {}};\n  _.each(shrinkwrappedDependencies, function (version, name) {\n    if (npmDependencies[name] === version) {\n      // We're not changing this dependency, so copy over its shrinkwrap.\n      preservedShrinkwrap.dependencies[name] =\n        shrinkwrappedDependenciesTree.dependencies[name];\n    }\n  });\n\n  makeNewPackageNpmDir(newPackageNpmDir);\n\n  if (!_.isEmpty(preservedShrinkwrap.dependencies)) {\n    // There are some unchanged packages here. Install from shrinkwrap.\n    files.writeFile(files.pathJoin(newPackageNpmDir, 'npm-shrinkwrap.json'),\n                     JSON.stringify(preservedShrinkwrap, null, /*legible*/2));\n\n    // construct a matching package.json to make `npm install` happy\n    constructPackageJson(packageName, newPackageNpmDir,\n                         treeToDependencies(preservedShrinkwrap));\n\n    // `npm install`\n    installFromShrinkwrap(newPackageNpmDir);\n\n    // delete package.json and npm-shrinkwrap.json\n    files.unlink(files.pathJoin(newPackageNpmDir, 'package.json'));\n    files.unlink(files.pathJoin(newPackageNpmDir, 'npm-shrinkwrap.json'));\n  }\n\n  // we may have just installed the shrinkwrapped packages. but let's not\n  // trust that it actually worked: let's do the rest based on what we\n  // actually have installed now.\n  var newInstalledDependencies = getInstalledDependencies(newPackageNpmDir);\n\n  // `npm install name@version` for modules that need updating\n  _.each(npmDependencies, function (version, name) {\n    if (newInstalledDependencies[name] !== version) {\n      installNpmModule(name, version, newPackageNpmDir);\n    }\n  });\n\n  completeNpmDirectory(packageName, newPackageNpmDir, packageNpmDir,\n                       npmDependencies);\n};\n\nvar createFreshNpmDirectory = function (packageName, newPackageNpmDir,\n                                        packageNpmDir, npmDependencies, quiet) {\n  if (! quiet)\n    logUpdateDependencies(packageName, npmDependencies);\n\n  makeNewPackageNpmDir(newPackageNpmDir);\n  // install dependencies\n  _.each(npmDependencies, function (version, name) {\n    installNpmModule(name, version, newPackageNpmDir);\n  });\n\n  completeNpmDirectory(packageName, newPackageNpmDir, packageNpmDir,\n                       npmDependencies);\n};\n\n// Shared code for updateExistingNpmDirectory and createFreshNpmDirectory.\nvar completeNpmDirectory = function (packageName, newPackageNpmDir,\n                                     packageNpmDir, npmDependencies) {\n  // temporarily construct a matching package.json to make `npm\n  // shrinkwrap` happy\n  constructPackageJson(packageName, newPackageNpmDir, npmDependencies);\n\n  // Create a shrinkwrap file.\n  shrinkwrap(newPackageNpmDir);\n\n  // now get package.json out of the way, but put it somewhere where the\n  // providePackageJSONForUnavailableBinaryDeps code can find it\n  files.rename(\n    files.pathJoin(newPackageNpmDir, 'package.json'),\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.package.json'));\n  // And stow a copy of npm-shrinkwrap too.\n  files.copyFile(\n    files.pathJoin(newPackageNpmDir, 'npm-shrinkwrap.json'),\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.npm-shrinkwrap.json'));\n\n  createReadme(newPackageNpmDir);\n  createNodeVersion(newPackageNpmDir);\n  files.renameDirAlmostAtomically(newPackageNpmDir, packageNpmDir);\n};\n\nvar createReadme = function (newPackageNpmDir) {\n  // This file gets checked in to version control by users, so resist the\n  // temptation to make unnecessary tweaks to it.\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, 'README'),\n\"This directory and the files immediately inside it are automatically generated\\n\" +\n\"when you change this package's NPM dependencies. Commit the files in this\\n\" +\n\"directory (npm-shrinkwrap.json, .gitignore, and this README) to source control\\n\" +\n\"so that others run the same versions of sub-dependencies.\\n\" +\n\"\\n\" +\n\"You should NOT check in the node_modules directory that Meteor automatically\\n\" +\n\"creates; if you are using git, the .gitignore file tells git to ignore it.\\n\"\n  );\n};\n\nvar createNodeVersion = function (newPackageNpmDir) {\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.node_version'),\n    currentNodeCompatibilityVersion());\n};\n\n// This value should change whenever we think that the Node C ABI has changed\n// (ie, when we need to be sure to reinstall npm packages because they might\n// have native components that need to be rebuilt). It does not need to change\n// for every patch release of Node! Notably, it needed to change between 0.8.*\n// and 0.10.*.  If Node does make a patch release of 0.10 that breaks\n// compatibility, you can just change this from \"0.10.*\" to \"0.10.35\" or\n// whatever.\nvar currentNodeCompatibilityVersion = function () {\n  var version = process.version;\n  version = version.replace(/\\.(\\d+)$/, '.*');\n  return version + '\\n';\n};\n\nvar runNpmCommand = function (args, cwd) {\n  const nodeBinDir = files.getCurrentNodeBinDir();\n  var npmPath;\n\n  if (os.platform() === \"win32\") {\n    npmPath = files.convertToOSPath(\n      files.pathJoin(nodeBinDir, \"npm.cmd\"));\n  } else {\n    npmPath = files.pathJoin(nodeBinDir, \"npm\");\n  }\n\n  if (meteorNpm._printNpmCalls) // only used by test-bundler.js\n    process.stdout.write('cd ' + cwd + ' && ' + npmPath + ' ' +\n                         args.join(' ') + ' ...\\n');\n\n  if (cwd)\n    cwd = files.convertToOSPath(cwd);\n\n  // It looks like some npm commands (such as build commands, specifically on\n  // Windows) rely on having a global node binary present.\n  // Sometimes users have a global node installed, so it is not\n  // a problem, but a) it can be outdated and b) it can not be installed.\n  // To solve this problem, we set the PATH env variable to have the path\n  // containing the node binary we are running in right now as the highest\n  // priority.\n  // This hack is confusing as npm is supposed to do it already.\n  const env = files.currentEnvWithPathsAdded(nodeBinDir);\n\n  var opts = { cwd: cwd, env: env, maxBuffer: 10 * 1024 * 1024 };\n\n  var future = new Future;\n  var child_process = require('child_process');\n  child_process.execFile(\n    npmPath, args, opts, function (err, stdout, stderr) {\n    if (meteorNpm._printNpmCalls)\n      process.stdout.write(err ? 'failed\\n' : 'done\\n');\n\n    future.return({\n      success: ! err,\n      error: (err ? `${err.message}${stderr}` : stderr),\n      stdout: stdout,\n      stderr: stderr\n    });\n  });\n\n  return future.wait();\n}\n\nvar constructPackageJson = function (packageName, newPackageNpmDir,\n                                     npmDependencies) {\n  var packageJsonContents = JSON.stringify({\n    // name and version are unimportant but required for `npm install`.\n    name: 'packages-for-meteor-' + packageName.replace(/:/g, '-'),\n    version: '0.0.0',\n    dependencies: npmDependencies\n  });\n  var packageJsonPath = files.pathJoin(newPackageNpmDir, 'package.json');\n  files.writeFile(packageJsonPath, packageJsonContents);\n};\n\n// Gets a JSON object from `npm ls --json` (getInstalledDependenciesTree) or\n// `npm-shrinkwrap.json` (getShrinkwrappedDependenciesTree).\n//\n// @returns {Object} eg {\n//   \"name\": \"packages\",\n//   \"version\": \"0.0.0\",\n//   \"dependencies\": {\n//     \"sockjs\": {\n//       \"version\": \"0.3.4\",\n//       \"dependencies\": {\n//         \"node-uuid\": {\n//           \"version\": \"1.3.3\"\n//         }\n//       }\n//     }\n//   }\n// }\nvar getInstalledDependenciesTree = function (dir) {\n  var result = runNpmCommand([\"ls\", \"--json\"], dir);\n\n  if (result.success)\n    return JSON.parse(result.stdout);\n\n  buildmessage.error(`couldn't read npm version lock information: ${result.error}`);\n  // Recover by returning false from updateDependencies\n  throw new NpmFailure;\n};\n\nvar getShrinkwrappedDependenciesTree = function (dir) {\n  var shrinkwrapFile = files.readFile(files.pathJoin(dir, 'npm-shrinkwrap.json'));\n  return JSON.parse(shrinkwrapFile);\n};\n\n// Maps a \"dependency object\" (a thing you find in `npm ls --json` or\n// npm-shrinkwrap.json with keys like \"version\" and \"from\") to the\n// canonical version that matches what users put in the `Npm.depends`\n// clause.  ie, either the version or the tarball URL.\n//\n// If more logic is added here, it should probably go in minimizeModule too.\nvar canonicalVersion = function (depObj) {\n  if (utils.isUrlWithSha(depObj.from))\n    return depObj.from;\n  else\n    return depObj.version;\n};\n\n// map the structure returned from `npm ls` or shrinkwrap.json into\n// the structure of npmDependencies (e.g. {gcd: '0.0.0'}), so that\n// they can be diffed. This only returns top-level dependencies.\nvar treeToDependencies = function (tree) {\n  return _.object(\n    _.map(\n      tree.dependencies, function (properties, name) {\n        return [name, canonicalVersion(properties)];\n      }));\n};\n\nvar getInstalledDependencies = function (dir) {\n  return treeToDependencies(getInstalledDependenciesTree(dir));\n};\n\n// (appears to not be called)\nvar getShrinkwrappedDependencies = function (dir) {\n  return treeToDependencies(getShrinkwrappedDependenciesTree(dir));\n};\n\nvar installNpmModule = function (name, version, dir) {\n  ensureConnected();\n\n  var installArg = utils.isUrlWithSha(version)\n    ? version : (name + \"@\" + version);\n\n  // We don't use npm.commands.install since we couldn't figure out\n  // how to silence all output (specifically the installed tree which\n  // is printed out with `console.log`)\n  //\n  // We used to use --force here, because the NPM cache is broken! See\n  // https://github.com/npm/npm/issues/3265 Basically, switching\n  // back and forth between a tarball fork of version X and the real\n  // version X could confuse NPM. But the main reason to use tarball\n  // URLs is to get a fork of the latest version with some fix, so\n  // it was easy to trigger this!\n  //\n  // We now use a forked version of npm with our PR\n  // https://github.com/npm/npm/pull/5137 to work around this.\n  var result = runNpmCommand([\"install\", installArg], dir);\n\n  if (! result.success) {\n    var pkgNotFound = \"404 '\" + utils.quotemeta(name) +\n          \"' is not in the npm registry\";\n    var versionNotFound = \"version not found: \" + utils.quotemeta(name) +\n          '@' + utils.quotemeta(version);\n    if (result.stderr.match(new RegExp(pkgNotFound))) {\n      buildmessage.error(\"there is no npm package named '\" + name + \"'\");\n    } else if (result.stderr.match(new RegExp(versionNotFound))) {\n      buildmessage.error(name + \" version \" + version + \" \" +\n                         \"is not available in the npm registry\");\n    } else {\n      buildmessage.error(`couldn't install npm package ${name}@${version}: ${result.error}`);\n    }\n\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n\n  if (process.platform !== \"win32\") {\n    // If we are on a unixy file system, we should not build a package that\n    // can't be used on Windows.\n\n    var pathsWithColons = files.findPathsWithRegex(\".\", new RegExp(\":\"),\n      { cwd: files.pathJoin(dir, \"node_modules\") });\n\n    if (pathsWithColons.length) {\n      var firstTen = pathsWithColons.slice(0, 10);\n      if (pathsWithColons.length > 10) {\n        firstTen.push(\"... \" + (pathsWithColons.length - 10) +\n          \" paths omitted.\");\n      }\n\n      buildmessage.error(\n\"Some filenames in your package have invalid characters.\\n\" +\n\"The following file paths in the NPM module '\" + name + \"' have colons, ':', which won't work on Windows:\\n\" +\nfirstTen.join(\"\\n\"));\n\n      throw new NpmFailure;\n    }\n  }\n};\n\nvar installFromShrinkwrap = function (dir) {\n  if (! files.exists(files.pathJoin(dir, \"npm-shrinkwrap.json\")))\n    throw new Error(\n      \"Can't call `npm install` without a npm-shrinkwrap.json file present\");\n\n  ensureConnected();\n\n  // `npm install`, which reads npm-shrinkwrap.json.\n  var result = runNpmCommand([\"install\"], dir);\n\n  if (! result.success) {\n    buildmessage.error(`couldn't install npm packages from npm-shrinkwrap: ${result.error}`);\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n};\n\n// ensure we can reach http://npmjs.org before we try to install\n// dependencies. `npm install` times out after more than a minute.\nvar ensureConnected = function () {\n  try {\n    httpHelpers.getUrl(\"http://registry.npmjs.org\");\n  } catch (e) {\n    buildmessage.error(\"Can't install npm dependencies. \" +\n                       \"Are you connected to the internet?\");\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n};\n\n// `npm shrinkwrap`\nvar shrinkwrap = function (dir) {\n  // We don't use npm.commands.shrinkwrap for two reasons:\n  // 1. As far as we could tell there's no way to completely silence the output\n  //    (the `silent` flag isn't piped in to the call to npm.commands.ls)\n  // 2. In various (non-deterministic?) cases we observed the\n  //    npm-shrinkwrap.json file not being updated\n  var result = runNpmCommand([\"shrinkwrap\"], dir);\n\n  if (! result.success) {\n    buildmessage.error(`couldn't run \\`npm shrinkwrap\\`: ${result.error}`);\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n\n  minimizeShrinkwrap(dir);\n};\n\n// The shrinkwrap file format contains a lot of extra data that can\n// change as you re-run the NPM-update process without actually\n// affecting what is installed. This step trims everything but the\n// most important bits from the file, so that the file doesn't change\n// unnecessary.\n//\n// This is based on an analysis of install.js in the npm module:\n//   https://github.com/isaacs/npm/blob/master/lib/install.js\n// It appears that the only things actually read from a given\n// dependency are its sub-dependencies and a single version, which is\n// read by the readWrap function; and furthermore, we can just put all\n// versions in the \"version\" field.\nvar minimizeShrinkwrap = function (dir) {\n  var topLevel = getShrinkwrappedDependenciesTree(dir);\n  var minimized = minimizeDependencyTree(topLevel);\n\n  files.writeFile(\n    files.pathJoin(dir, 'npm-shrinkwrap.json'),\n    // Matches the formatting done by 'npm shrinkwrap'.\n    JSON.stringify(minimized, null, 2) + '\\n');\n};\n\n// Reduces a dependency tree (as read from a just-made npm-shrinkwrap.json or\n// from npm ls --json) to just the versions we want. Returns an object that does\n// not share state with its input\nvar minimizeDependencyTree = function (tree) {\n  var minimizeModule = function (module) {\n    var version;\n    if (module.resolved &&\n        !module.resolved.match(/^https:\\/\\/registry.npmjs.org\\//)) {\n      version = module.resolved;\n    } else if (utils.isUrlWithSha(module.from)) {\n      version = module.from;\n    } else {\n      version = module.version;\n    }\n    var minimized = {version: version};\n\n    if (module.dependencies) {\n      minimized.dependencies = {};\n      _.each(module.dependencies, function (subModule, name) {\n        minimized.dependencies[name] = minimizeModule(subModule);\n      });\n    }\n    return minimized;\n  };\n\n  var newTopLevelDependencies = {};\n  _.each(tree.dependencies, function (module, name) {\n    newTopLevelDependencies[name] = minimizeModule(module);\n  });\n  return {dependencies: newTopLevelDependencies};\n};\n\nvar logUpdateDependencies = function (packageName, npmDependencies) {\n  runLog.log(packageName + ': updating npm dependencies -- ' +\n             _.keys(npmDependencies).join(', ') + '...');\n};\n\nexports.runNpmCommand = runNpmCommand;\n"]}