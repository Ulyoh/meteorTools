{"version":3,"sources":["/tools/tool-env/install-git-hooks.js"],"names":[],"mappings":";qBAiCwB,eAAe;;yBAjCrB,gBAAgB;;;;AAElC,IAAM,eAAe,GACnB,uBAAM,QAAQ,CAAC,uBAAM,kBAAkB,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;;AAE9D,IAAM,UAAU,GACd,uBAAM,QAAQ,CAAC,uBAAM,kBAAkB,EAAE,EACvC,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;;AAErC,IAAM,gBAAgB,GAAG,CACvB,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,EACjB,YAAY,EACZ,oBAAoB,EACpB,YAAY,EACZ,aAAa,EACb,YAAY,EACZ,eAAe,EACf,YAAY,EACZ,aAAa,EACb,QAAQ,EACR,aAAa,EACb,aAAa,EACb,cAAc,CACf,CAAC;;;AAGF,IAAM,kBAAkB,GAAG,cAAc,CAAC;;;AAG1C,IAAM,sBAAsB,GAAG,iBAAiB,CAAC;;AAElC,SAAS,eAAe,GAAG;;AAExC,MAAI,CAAC,uBAAM,MAAM,CAAC,eAAe,CAAC,EAAE;;;AAGlC,WAAO;GACR;;AAED,kBAAgB,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAK;AACjC,QAAM,QAAQ,GAAG,uBAAM,QAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;AAC3D,QAAM,UAAU,GAAG,uBAAM,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AACxD,QAAM,cAAc,GAAG,QAAQ,GAAG,kBAAkB,CAAC;;AAErD,QAAI,CAAC,uBAAM,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,uBAAM,MAAM,CAAC,QAAQ,CAAC,EAAE;;AAExD,aAAO;KACR;;AAED,QAAI,CAAC,uBAAM,MAAM,CAAC,UAAU,CAAC,EAAE;;;AAG7B,8BAAwB,CAAC,QAAQ,CAAC,CAAC;AACnC,aAAO;KACR;;;AAGD,QAAM,yBAAyB,4BAA0B,QAAQ,GAAG,kBAAkB,kCAA+B,CAAC;;;AAGtH,QAAI,CAAC,uBAAM,MAAM,CAAC,QAAQ,CAAC,EAAE;;;AAG3B,6BAAM,SAAS,CAAC,QAAQ,kBAE5B,yBAAyB,EACnB,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAK,EAAE,CAAC,CAAC;;;AAGrC,6BAAM,SAAS,CAAC,cAAc,EAAE,uBAAM,QAAQ,CAAC,UAAU,CAAC,EACxD,EAAE,IAAI,EAAE,GAAK,EAAE,CAAC,CAAC;AACnB,aAAO;KACR;;;;;AAKD,QAAI,CAAC,uBAAM,MAAM,CAAC,cAAc,CAAC,EAAE;AACjC,6BAAM,UAAU,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC;KACvD;;;AAGD,2BAAM,SAAS,CAAC,cAAc,EAAE,uBAAM,QAAQ,CAAC,UAAU,CAAC,EACxD,EAAE,IAAI,EAAE,GAAK,EAAE,CAAC,CAAC;AACnB,WAAO;GACR,CAAC,CAAC;CACJ;;AAED,SAAS,wBAAwB,CAAC,QAAQ,EAAE;;AAE1C,MAAI;AACF,2BAAM,MAAM,CAAC,QAAQ,GAAG,kBAAkB,CAAC,CAAC;GAC7C,CAAC,OAAO,GAAG,EAAE;;AAEZ,QAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE;AACzB,YAAM,GAAG,CAAC;KACX;GACF;;;AAGD,yBAAM,SAAS,CAAC,QAAQ,EACtB,uBAAM,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,sBAAsB,EAAE,EAAE,CAAC,EACpE,MAAM,CAAC,CAAC;CACX","file":"tools/tool-env/install-git-hooks.js.map","sourcesContent":["import files from '../fs/files.js';\n\nconst hookDestination =\n  files.pathJoin(files.getCurrentToolsDir(), '.git', 'hooks');\n\nconst hookSource =\n  files.pathJoin(files.getCurrentToolsDir(),\n    'scripts', 'admin', 'git-hooks');\n\nconst allPossibleHooks = [\n  'applypatch-msg',\n  'pre-applypatch',\n  'post-applypatch',\n  'pre-commit',\n  'prepare-commit-msg',\n  'commit-msg',\n  'post-commit',\n  'pre-rebase',\n  'post-checkout',\n  'post-merge',\n  'pre-receive',\n  'update',\n  'post-update',\n  'pre-auto-gc',\n  'post-rewrite',\n];\n\n// A suffix that we append to our hook scripts\nconst METEOR_HOOK_SUFFIX = '.meteor-hook';\n\n// Matches the whole line we inject into the user's hook\nconst METEOR_HOOK_LINE_REGEX = /.*meteor-hook.*/;\n\nexport default function installGitHooks() {\n\n  if (!files.exists(hookDestination)) {\n    // Don't do anything if the hook destination does not exist, eg.,\n    // we are not running from a git clone.\n    return;\n  }\n\n  allPossibleHooks.map((hookName) => {\n    const hookFile = files.pathJoin(hookDestination, hookName);\n    const sourceFile = files.pathJoin(hookSource, hookName);\n    const meteorHookFile = hookFile + METEOR_HOOK_SUFFIX;\n\n    if (!files.exists(sourceFile) && !files.exists(hookFile)) {\n      // Don't do anything if this hook isn't in either list\n      return;\n    }\n\n    if (!files.exists(sourceFile)) {\n      // If the user has this hook, but Meteor doesn't, make sure that we remove\n      // any hooks that we added previously\n      removeMeteorInjectedHook(hookFile);\n      return;\n    }\n\n    /* eslint-disable max-len */\n    const METEOR_HOOK_INJECTED_LINE = `exec \"$(dirname $0)/${hookName}${METEOR_HOOK_SUFFIX}\" # Inserted by Meteor tool\\n`;\n    /* eslint-enable */\n\n    if (!files.exists(hookFile)) {\n      // If the user doesn't have this hook, but we want to add it, just insert\n      // a new file and a line that calls it\n      files.writeFile(hookFile,\n        `#!/bin/sh\n${METEOR_HOOK_INJECTED_LINE}`,\n        { encoding: 'utf8', mode: 0o755 });\n\n      // Copy the hook from the scripts dir\n      files.writeFile(meteorHookFile, files.readFile(sourceFile),\n        { mode: 0o755 });\n      return;\n    }\n\n    // Now we have arrived at the case where the user already has a hook\n\n    // Has Meteor already installed a hook here? If not, add a line to the hook\n    if (!files.exists(meteorHookFile)) {\n      files.appendFile(hookFile, METEOR_HOOK_INJECTED_LINE);\n    }\n\n    // Copy the hook from the scripts dir again in case it updated\n    files.writeFile(meteorHookFile, files.readFile(sourceFile),\n      { mode: 0o755 });\n    return;\n  });\n}\n\nfunction removeMeteorInjectedHook(hookFile) {\n  // Remove the script added by Meteor\n  try {\n    files.unlink(hookFile + METEOR_HOOK_SUFFIX);\n  } catch (err) {\n    // Ignore errors about file not found\n    if (err.code !== 'ENOENT') {\n      throw err;\n    }\n  }\n\n  // Remove the line added to the file\n  files.writeFile(hookFile,\n    files.readFile(hookFile, 'utf8').replace(METEOR_HOOK_LINE_REGEX, ''),\n    'utf8');\n}\n"]}