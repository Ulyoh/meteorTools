{"version":3,"sources":["/tools/tool-env/source-map-retriever-stack.js"],"names":[],"mappings":";;;gCAA6B,oBAAoB;;;;;;;;;;;;;;;;;AAejD,IAAM,KAAK,GAAG,EAAE,CAAC;;;;;AAIV,SAAS,IAAI,CAAC,IAAI,EAAE;AACzB,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAClB;;AAED,SAAS,yBAAyB,CAAC,QAAQ,EAAE;AAC3C,OAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1C,QAAM,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;;AAEzC,QAAI,aAAa,EAAE;AACjB,aAAO,aAAa,CAAC;KACtB;GACF;;AAED,SAAO,IAAI,CAAC;CACb;;AAED,SAAS,YAAY,CAAC,cAAc,EAAE;AACpC,MAAM,KAAK,GAAG,8BAAiB,YAAY,CAAC,cAAc,CAAC,CAAC;AAC5D,WAAS,UAAU,CAAC,IAAI,EAAE;AACxB,QAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/B,SAAK,CAAC,IAAI,CAAC,GAAG,UAAS,GAAG,EAAE;;;AAG1B,UAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;AAC/B,UAAI,CAAC,MAAM,EAAE;AACX,eAAO,MAAM,CAAC;OACf;AACD,aAAO,MAAM,CAAC,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;KACzD,CAAC;GACH;AACD,YAAU,CAAC,0BAA0B,CAAC,CAAC;AACvC,YAAU,CAAC,eAAe,CAAC,CAAC;;AAE5B,SAAO,KAAK,CAAC;CACd;;AAGD,8BAAiB,OAAO,CAAC;AACvB,mBAAiB,EAAE,yBAAyB;;;;AAI5C,0BAAwB,EAAE,KAAK;AAC/B,cAAY,EAAZ,YAAY;CACb,CAAC,CAAC;;;;;AAKH,IAAI,CAAC,8BAAiB,iBAAiB,CAAC,CAAC","file":"tools/tool-env/source-map-retriever-stack.js.map","sourcesContent":["import sourceMapSupport from 'source-map-support';\n\n// Why this file exists:\n// We have two places in the tool where we need to do source maps:\n// 1. Loaded isopacks, which use a special custom source map cache\n// 2. Transpiled tool code from Babel\n//\n// In order to avoid crazy bootstrapping, it would be nice to be able to add\n// functions to look for source maps, so that we can call\n// sourceMapSupport.install as early as possible, and not worry about having\n// the right data structures around.\n//\n// This module maintains a stack of source map retrieval functions, which are\n// called in reverse order until one returns a truthy value.\n\nconst stack = [];\n\n// Add a function to locate source maps; all of the functions are executed in\n// reverse order\nexport function push(func) {\n  stack.push(func);\n}\n\nfunction tryAllSourceMapRetrievers(filename) {\n  for (let i = stack.length - 1; i >= 0; i--) {\n    const sourceMapData = stack[i](filename);\n\n    if (sourceMapData) {\n      return sourceMapData;\n    }\n  }\n\n  return null;\n}\n\nfunction wrapCallSite(unwrappedFrame) {\n  const frame = sourceMapSupport.wrapCallSite(unwrappedFrame);\n  function wrapGetter(name) {\n    const origGetter = frame[name];\n    frame[name] = function(arg) {\n      // replace a custom location domain that we set for better UX in Chrome\n      // DevTools (separate domain group) in source maps.\n      const source = origGetter(arg);\n      if (!source) {\n        return source;\n      }\n      return source.replace(/(^|\\()meteor:\\/\\/..app\\//, '$1');\n    };\n  }\n  wrapGetter('getScriptNameOrSourceURL');\n  wrapGetter('getEvalOrigin');\n\n  return frame;\n}\n\n\nsourceMapSupport.install({\n  retrieveSourceMap: tryAllSourceMapRetrievers,\n  // For now, don't fix the source line in uncaught exceptions, because we\n  // haven't fixed handleUncaughtExceptions in source-map-support to properly\n  // locate the source files.\n  handleUncaughtExceptions: false,\n  wrapCallSite\n});\n\n// Default retrievers\n\n// Always fall back to the default in the end\npush(sourceMapSupport.retrieveSourceMap);\n\n/* eslint-disable max-len */\n\n/* eslint-enable max-len */\n"]}