{"version":3,"sources":["/tools/project-context.js"],"names":[],"mappings":"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","file":"tools/project-context.js.map","sourcesContent":["var assert = require(\"assert\");\nvar _ = require('underscore');\n\nvar archinfo = require('./utils/archinfo.js');\nvar buildmessage = require('./utils/buildmessage.js');\nvar catalog = require('./packaging/catalog/catalog.js');\nvar catalogLocal = require('./packaging/catalog/catalog-local.js');\nvar Console = require('./console/console.js').Console;\nvar files = require('./fs/files.js');\nvar isopackCacheModule = require('./isobuild/isopack-cache.js');\nvar isopackets = require('./tool-env/isopackets.js');\nvar packageMapModule = require('./packaging/package-map.js');\nvar release = require('./packaging/release.js');\nvar tropohouse = require('./packaging/tropohouse.js');\nvar utils = require('./utils/utils.js');\nvar watch = require('./fs/watch.js');\nvar Profile = require('./tool-env/profile.js').Profile;\n\n// The ProjectContext represents all the context associated with an app:\n// metadata files in the `.meteor` directory, the choice of package versions\n// used by it, etc.  Any time you want to work with an app, create a\n// ProjectContext and call prepareProjectForBuild on it (in a buildmessage\n// context).\n//\n// Note that this should only be used by parts of the code that truly require a\n// full project to exist; you won't find any reference to ProjectContext in\n// compiler.js or isopack.js, which work on individual files (though they will\n// get references to some of the objects which can be stored in a ProjectContext\n// such as PackageMap and IsopackCache).  Parts of the code that should deal\n// with ProjectContext include command implementations, the parts of bundler.js\n// that deal with creating a full project, PackageSource.initFromAppDir, stats\n// reporting, etc.\n//\n// Classes in this file follow the standard protocol where names beginning with\n// _ should not be externally accessed.\nfunction ProjectContext(options) {\n  var self = this;\n  assert.ok(self instanceof ProjectContext);\n\n  if (!options.projectDir)\n    throw Error(\"missing projectDir!\");\n\n  self.originalOptions = options;\n  self.reset();\n}\nexports.ProjectContext = ProjectContext;\n\n// The value is the name of the method to call to continue.\nvar STAGE = {\n  INITIAL: '_readProjectMetadata',\n  READ_PROJECT_METADATA: '_initializeCatalog',\n  INITIALIZE_CATALOG: '_resolveConstraints',\n  RESOLVE_CONSTRAINTS: '_downloadMissingPackages',\n  DOWNLOAD_MISSING_PACKAGES: '_buildLocalPackages',\n  BUILD_LOCAL_PACKAGES: '_saveChangedMetadata',\n  SAVE_CHANGED_METADATA: 'DONE'\n};\n\n_.extend(ProjectContext.prototype, {\n  reset: function (moreOptions, resetOptions) {\n    var self = this;\n    // Allow overriding some options until the next call to reset; used by\n    // 'meteor update' code to try various values of releaseForConstraints.\n    var options = _.extend({}, self.originalOptions, moreOptions);\n    // This is options that are actually directed at reset itself.\n    resetOptions = resetOptions || {};\n\n    self.projectDir = options.projectDir;\n    self.tropohouse = options.tropohouse || tropohouse.default;\n\n    self._packageMapFilename = options.packageMapFilename ||\n      files.pathJoin(self.projectDir, '.meteor', 'versions');\n\n    self._serverArchitectures = options.serverArchitectures || [];\n    // We always need to download host versions of packages, at least for\n    // plugins.\n    self._serverArchitectures.push(archinfo.host());\n    self._serverArchitectures = _.uniq(self._serverArchitectures);\n\n    // test-packages overrides this to load local packages from your real app\n    // instead of from test-runner-app.\n    self._projectDirForLocalPackages = options.projectDirForLocalPackages ||\n      options.projectDir;\n    self._explicitlyAddedLocalPackageDirs =\n      options.explicitlyAddedLocalPackageDirs;\n\n    // Used by 'meteor rebuild'; true to rebuild all packages, or a list of\n    // package names.  Deletes the isopacks and their plugin caches.\n    self._forceRebuildPackages = options.forceRebuildPackages;\n\n    // Set in a few cases where we really want to only get packages from\n    // checkout.\n    self._ignorePackageDirsEnvVar = options.ignorePackageDirsEnvVar;\n\n    // Set by some tests where we want to pretend that we don't have packages in\n    // the git checkout (because they're using a fake warehouse).\n    self._ignoreCheckoutPackages = options.ignoreCheckoutPackages;\n\n    // Set by some tests to override the official catalog.\n    self._officialCatalog = options.officialCatalog || catalog.official;\n\n    if (options.alwaysWritePackageMap && options.neverWritePackageMap)\n      throw Error(\"always or never?\");\n\n    // Set by 'meteor create' and 'meteor update' to ensure that\n    // .meteor/versions is always written even if release.current does not match\n    // the project's release.\n    self._alwaysWritePackageMap = options.alwaysWritePackageMap;\n\n    // Set by a few special-case commands that call\n    // projectConstraintsFile.addConstraints for internal reasons without\n    // intending to actually write .meteor/packages and .meteor/versions (eg,\n    // 'publish' wants to make sure making sure the test is built, and\n    // --get-ready wants to build every conceivable package).\n    self._neverWriteProjectConstraintsFile =\n      options.neverWriteProjectConstraintsFile;\n    self._neverWritePackageMap = options.neverWritePackageMap;\n\n    // Set by 'meteor update' to specify which packages may be updated. Array of\n    // package names.\n    self._upgradePackageNames = options.upgradePackageNames;\n    // Set by 'meteor update' to mean that we should upgrade the\n    // \"patch\" (and wrapNum, etc.) parts of indirect dependencies.\n    self._upgradeIndirectDepPatchVersions =\n      options.upgradeIndirectDepPatchVersions;\n\n    // Set by publishing commands to ensure that published packages always have\n    // a web.cordova slice (because we aren't yet smart enough to just default\n    // to using the web.browser slice instead or make a common 'web' slice).\n    self._forceIncludeCordovaUnibuild = options.forceIncludeCordovaUnibuild;\n\n    // If explicitly specified as null, use no release for constraints.\n    // If specified non-null, should be a release version catalog record.\n    // If not specified, defaults to release.current.\n    //\n    // Note that NONE of these cases are \"use the release from\n    // self.releaseFile\"; after all, if you are explicitly running `meteor\n    // --release foo` it will override what is found in .meteor/releases.\n    if (_.has(options, 'releaseForConstraints')) {\n      self._releaseForConstraints = options.releaseForConstraints || null;\n    } else if (release.current.isCheckout()) {\n      self._releaseForConstraints = null;\n    } else {\n      self._releaseForConstraints = release.current.getCatalogReleaseData();\n    }\n\n    if (resetOptions.preservePackageMap && self.packageMap) {\n      self._cachedVersionsBeforeReset = self.packageMap.toVersionMap();\n      // packageMapFile should always exist if packageMap does\n      self._oldPackageMapFileHash = self.packageMapFile.fileHash;\n    } else {\n      self._cachedVersionsBeforeReset = null;\n      self._oldPackageMapFileHash = null;\n    }\n\n    // The --allow-incompatible-update command-line switch, which allows\n    // the version solver to choose versions of root dependencies that are\n    // incompatible with the previously chosen versions (i.e. to downgrade\n    // them or change their major version).\n    self._allowIncompatibleUpdate = options.allowIncompatibleUpdate;\n\n    // If set, we run the linter on the app and local packages.  Set by 'meteor\n    // lint', and the runner commands (run/test-packages/debug) when --no-lint\n    // is not passed.\n    self.lintAppAndLocalPackages = options.lintAppAndLocalPackages;\n\n    // If set, we run the linter on just one local package, with this\n    // source root. Set by 'meteor lint' in a package, and 'meteor publish'.\n    self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n    // Initialized by readProjectMetadata.\n    self.releaseFile = null;\n    self.projectConstraintsFile = null;\n    self.packageMapFile = null;\n    self.platformList = null;\n    self.cordovaPluginsFile = null;\n    self.appIdentifier = null;\n    self.finishedUpgraders = null;\n\n    // Initialized by initializeCatalog.\n    self.projectCatalog = null;\n    self.localCatalog = null;\n    // Once the catalog is read and the names of the \"explicitly\n    // added\" packages are determined, they will be listed here.\n    // (See explicitlyAddedLocalPackageDirs.)\n    // \"Explicitly added\" packages are typically present in non-app\n    // projects, like the one created by `meteor publish`.  This list\n    // is used to avoid pinning such packages to their previous\n    // versions when we run the version solver, which prevents an\n    // error telling you to pass `--allow-incompatible-update` when\n    // you publish your package after bumping the major version.\n    self.explicitlyAddedPackageNames = null;\n\n    // Initialized by _resolveConstraints.\n    self.packageMap = null;\n    self.packageMapDelta = null;\n\n    if (resetOptions.softRefreshIsopacks && self.isopackCache) {\n      // Make sure we only hold on to one old isopack cache, not a linked list\n      // of all of them.\n      self.isopackCache.forgetPreviousIsopackCache();\n      self._previousIsopackCache = self.isopackCache;\n    } else {\n      self._previousIsopackCache = null;\n    }\n    // Initialized by _buildLocalPackages.\n    self.isopackCache = null;\n\n    self._completedStage = STAGE.INITIAL;\n\n    // The resolverResultCache is used by the constraint solver; to\n    // us it's just an opaque object.  If we pass it into repeated\n    // calls to the constraint solver, the constraint solver can be\n    // more efficient by caching or memoizing its work.  We choose not\n    // to reset this when reset() is called more than once.\n    self._resolverResultCache = (self._resolverResultCache || {});\n  },\n\n  readProjectMetadata: function () {\n    this._completeStagesThrough(STAGE.READ_PROJECT_METADATA);\n  },\n  initializeCatalog: function () {\n    this._completeStagesThrough(STAGE.INITIALIZE_CATALOG);\n  },\n  resolveConstraints: function () {\n    this._completeStagesThrough(STAGE.RESOLVE_CONSTRAINTS);\n  },\n  downloadMissingPackages: function () {\n    this._completeStagesThrough(STAGE.DOWNLOAD_MISSING_PACKAGES);\n  },\n  buildLocalPackages: function () {\n    this._completeStagesThrough(STAGE.BUILD_LOCAL_PACKAGES);\n  },\n  saveChangedMetadata: function () {\n    this._completeStagesThrough(STAGE.SAVE_CHANGED_METADATA);\n  },\n  prepareProjectForBuild: function () {\n    // This is the same as saveChangedMetadata, but if we insert stages after\n    // that one it will continue to mean \"fully finished\".\n    this.saveChangedMetadata();\n  },\n\n  _completeStagesThrough: function (targetStage) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob('preparing project', function () {\n      while (self._completedStage !== targetStage) {\n        // This error gets thrown if you request to go to a stage that's earlier\n        // than where you started. Note that the error will be mildly confusing\n        // because the key of STAGE does not match the value.\n        if (self.completedStage === STAGE.SAVE_CHANGED_METADATA)\n          throw Error(\"can't find requested stage \" + targetStage);\n\n        // The actual value of STAGE.FOO is the name of the method that takes\n        // you to the next step after FOO.\n        self[self._completedStage]();\n        if (buildmessage.jobHasMessages())\n          return;\n      }\n    });\n  },\n\n  getProjectLocalDirectory: function (subdirectory) {\n    var self = this;\n    return files.pathJoin(self.projectDir, '.meteor', 'local', subdirectory);\n  },\n\n  getMeteorShellDirectory: function(projectDir) {\n    return this.getProjectLocalDirectory(\"shell\");\n  },\n\n  // You can call this manually if you want to do some work before resolving\n  // constraints, or you can let prepareProjectForBuild do it for you.\n  //\n  // This should be pretty fast --- for example, we shouldn't worry about\n  // needing to wait for it to be done before we open the runner proxy.\n  _readProjectMetadata: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob('reading project metadata', function () {\n      // Ensure this is actually a project directory.\n      self._ensureProjectDir();\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/release.\n      self.releaseFile = new exports.ReleaseFile({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/packages.\n      self.projectConstraintsFile = new exports.ProjectConstraintsFile({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/versions.\n      self.packageMapFile = new exports.PackageMapFile({\n        filename: self._packageMapFilename\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/cordova-plugins.\n      self.cordovaPluginsFile = new exports.CordovaPluginsFile({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/platforms, creating it if necessary.\n      self.platformList = new exports.PlatformList({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/.id, creating it if necessary.\n      self._ensureAppIdentifier();\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Set up an object that knows how to read and write\n      // .meteor/.finished-upgraders.\n      self.finishedUpgraders = new exports.FinishedUpgraders({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n    });\n\n    self._completedStage = STAGE.READ_PROJECT_METADATA;\n  },\n\n  _ensureProjectDir: function () {\n    var self = this;\n    files.mkdir_p(files.pathJoin(self.projectDir, '.meteor'));\n\n    // This file existing is what makes a project directory a project directory,\n    // so let's make sure it exists!\n    var constraintFilePath = files.pathJoin(self.projectDir, '.meteor', 'packages');\n    if (! files.exists(constraintFilePath)) {\n      files.writeFileAtomically(constraintFilePath, '');\n    }\n\n    // Let's also make sure we have a minimal gitignore.\n    var gitignorePath = files.pathJoin(self.projectDir, '.meteor', '.gitignore');\n    if (! files.exists(gitignorePath)) {\n      files.writeFileAtomically(gitignorePath, 'local\\n');\n    }\n  },\n\n  // This is a WatchSet that ends up being the WatchSet for the app's\n  // initFromAppDir PackageSource. Changes to this will cause the whole app to\n  // be rebuilt (client and server).\n  getProjectWatchSet: function () {\n    // We don't cache a projectWatchSet on this object, since some of the\n    // metadata files can be written by us (eg .meteor/versions\n    // post-constraint-solve).\n    var self = this;\n    var watchSet = new watch.WatchSet;\n    _.each(\n      [self.releaseFile, self.projectConstraintsFile, self.packageMapFile,\n       self.platformList, self.cordovaPluginsFile],\n      function (metadataFile) {\n        metadataFile && watchSet.merge(metadataFile.watchSet);\n      });\n\n    if (self.localCatalog) {\n      watchSet.merge(self.localCatalog.packageLocationWatchSet);\n    }\n\n    return watchSet;\n  },\n\n  // This WatchSet encompasses everything that users can change to restart an\n  // app. We only watch this for failed bundles; for successful bundles, we have\n  // more precise server-specific and client-specific WatchSets that add up to\n  // this one.\n  getProjectAndLocalPackagesWatchSet: function () {\n    var self = this;\n    var watchSet = self.getProjectWatchSet();\n\n    // Include the loaded local packages (ie, the non-metadata files) but only\n    // if we've actually gotten to the buildLocalPackages step.\n    if (self.isopackCache) {\n      watchSet.merge(self.isopackCache.allLoadedLocalPackagesWatchSet);\n    }\n    return watchSet;\n  },\n\n  getLintingMessagesForLocalPackages: function () {\n    var self = this;\n    return self.isopackCache.getLintingMessagesForLocalPackages();\n  },\n\n  _ensureAppIdentifier: function () {\n    var self = this;\n    var identifierFile = files.pathJoin(self.projectDir, '.meteor', '.id');\n\n    // Find the first non-empty line, ignoring comments. We intentionally don't\n    // put this in a WatchSet, since changing this doesn't affect the built app\n    // much (and there's no real reason to update it anyway).\n    var lines = files.getLinesOrEmpty(identifierFile);\n    var appId = _.find(_.map(lines, files.trimSpaceAndComments), _.identity);\n\n    // If the file doesn't exist or has no non-empty lines, regenerate the\n    // token.\n    if (!appId) {\n      appId = utils.randomToken() + utils.randomToken() + utils.randomToken();\n\n      var comment = (\n\"# This file contains a token that is unique to your project.\\n\" +\n\"# Check it into your repository along with the rest of this directory.\\n\" +\n\"# It can be used for purposes such as:\\n\" +\n\"#   - ensuring you don't accidentally deploy one app on top of another\\n\" +\n\"#   - providing package authors with aggregated statistics\\n\" +\n\"\\n\");\n      files.writeFileAtomically(identifierFile, comment + appId + '\\n');\n    }\n\n    self.appIdentifier = appId;\n  },\n\n  _resolveConstraints: function () {\n    var self = this;\n    buildmessage.assertInJob();\n\n    var depsAndConstraints = self._getRootDepsAndConstraints();\n    // If this is in the runner and we have reset this ProjectContext for a\n    // rebuild, use the versions we calculated last time in this process (which\n    // may not have been written to disk if our release doesn't match the\n    // project's release on disk)... unless the actual file on disk has changed\n    // out from under us. Otherwise use the versions from .meteor/versions.\n    var cachedVersions;\n    if (self._cachedVersionsBeforeReset &&\n        self._oldPackageMapFileHash === self.packageMapFile.fileHash) {\n      // The file on disk hasn't change; reuse last time's results.\n      cachedVersions = self._cachedVersionsBeforeReset;\n    } else {\n      // We don't have a last time, or the file has changed; use\n      // .meteor/versions.\n      cachedVersions = self.packageMapFile.getCachedVersions();\n    }\n\n    var anticipatedPrereleases = self._getAnticipatedPrereleases(\n      depsAndConstraints.constraints, cachedVersions);\n\n    if (self.explicitlyAddedPackageNames.length) {\n      cachedVersions = _.clone(cachedVersions);\n      _.each(self.explicitlyAddedPackageNames, function (p) {\n        delete cachedVersions[p];\n      });\n    }\n\n    var resolverRunCount = 0;\n\n    // Nothing before this point looked in the official or project catalog!\n    // However, the resolver does, so it gets run in the retry context.\n    catalog.runAndRetryWithRefreshIfHelpful(function (canRetry) {\n      buildmessage.enterJob(\"selecting package versions\", function () {\n        var resolver = self._buildResolver();\n\n        var resolveOptions = {\n          previousSolution: cachedVersions,\n          anticipatedPrereleases: anticipatedPrereleases,\n          allowIncompatibleUpdate: self._allowIncompatibleUpdate,\n          // Not finding an exact match for a previous version in the catalog\n          // is considered an error if we haven't refreshed yet, and will\n          // trigger a refresh and another attempt.  That way, if a previous\n          // version exists, you'll get it, even if we don't have a record\n          // of it yet.  It's not actually fatal, though, for previousSolution\n          // to refer to package versions that we don't have access to or don't\n          // exist.  They'll end up getting changed or removed if possible.\n          missingPreviousVersionIsError: canRetry\n        };\n        if (self._upgradePackageNames) {\n          resolveOptions.upgrade = self._upgradePackageNames;\n        }\n        if (self._upgradeIndirectDepPatchVersions) {\n          resolveOptions.upgradeIndirectDepPatchVersions = true;\n        }\n\n        resolverRunCount++;\n\n        var solution;\n        try {\n          Profile.run(\n            \"Select Package Versions\" +\n              (resolverRunCount > 1 ? (\" (Try \" + resolverRunCount + \")\") : \"\"),\n            function () {\n              solution = resolver.resolve(\n                depsAndConstraints.deps, depsAndConstraints.constraints,\n                resolveOptions);\n            });\n        } catch (e) {\n          if (!e.constraintSolverError && !e.versionParserError)\n            throw e;\n          // If the contraint solver gave us an error, refreshing\n          // might help to get new packages (see the comment on\n          // missingPreviousVersionIsError above).  If it's a\n          // package-version-parser error, print a nice message,\n          // but don't bother refreshing.\n          buildmessage.error(\n            e.message,\n            { tags: { refreshCouldHelp: !!e.constraintSolverError }});\n        }\n\n        if (buildmessage.jobHasMessages())\n          return;\n\n        self.packageMap = new packageMapModule.PackageMap(solution.answer, {\n          localCatalog: self.localCatalog\n        });\n\n        self.packageMapDelta = new packageMapModule.PackageMapDelta({\n          cachedVersions: cachedVersions,\n          packageMap: self.packageMap,\n          usedRCs: solution.usedRCs,\n          neededToUseUnanticipatedPrereleases:\n          solution.neededToUseUnanticipatedPrereleases,\n          anticipatedPrereleases: anticipatedPrereleases\n        });\n\n        self._completedStage = STAGE.RESOLVE_CONSTRAINTS;\n      });\n    });\n  },\n\n  _localPackageSearchDirs: function () {\n    var self = this;\n    var searchDirs = [files.pathJoin(self._projectDirForLocalPackages, 'packages')];\n\n    if (! self._ignorePackageDirsEnvVar && process.env.PACKAGE_DIRS) {\n      // User can provide additional package directories to search in\n      // PACKAGE_DIRS (colon-separated).\n      _.each(process.env.PACKAGE_DIRS.split(':'), function (p) {\n        searchDirs.push(files.pathResolve(p));\n      });\n    }\n\n    if (! self._ignoreCheckoutPackages && files.inCheckout()) {\n      // Running from a checkout, so use the Meteor core packages from the\n      // checkout.\n      searchDirs.push(files.pathJoin(files.getCurrentToolsDir(), 'packages'));\n    }\n    return searchDirs;\n  },\n\n  // Returns a layered catalog with information about the packages that can be\n  // used in this project. Processes the package.js file from all local packages\n  // but does not compile the packages.\n  //\n  // Must be run in a buildmessage context. On build error, returns null.\n  _initializeCatalog: function () {\n    var self = this;\n    buildmessage.assertInJob();\n\n    catalog.runAndRetryWithRefreshIfHelpful(function () {\n      buildmessage.enterJob(\n        \"scanning local packages\",\n        function () {\n          self.localCatalog = new catalogLocal.LocalCatalog;\n          self.projectCatalog = new catalog.LayeredCatalog(\n            self.localCatalog, self._officialCatalog);\n\n          var searchDirs = self._localPackageSearchDirs();\n          self.localCatalog.initialize({\n            localPackageSearchDirs: searchDirs,\n            explicitlyAddedLocalPackageDirs: self._explicitlyAddedLocalPackageDirs\n          });\n\n          if (buildmessage.jobHasMessages()) {\n            // Even if this fails, we want to leave self.localCatalog assigned,\n            // so that it gets counted included in the projectWatchSet.\n            return;\n          }\n\n          self.explicitlyAddedPackageNames = [];\n          _.each(self._explicitlyAddedLocalPackageDirs, function (dir) {\n            var localVersionRecord =\n                  self.localCatalog.getVersionBySourceRoot(dir);\n            if (localVersionRecord) {\n              self.explicitlyAddedPackageNames.push(localVersionRecord.packageName);\n            }\n          });\n\n          self._completedStage = STAGE.INITIALIZE_CATALOG;\n        }\n      );\n    });\n  },\n\n  _getRootDepsAndConstraints: function () {\n    var self = this;\n\n    var depsAndConstraints = {deps: [], constraints: []};\n\n    self._addAppConstraints(depsAndConstraints);\n    self._addLocalPackageConstraints(depsAndConstraints);\n    self._addReleaseConstraints(depsAndConstraints);\n    return depsAndConstraints;\n  },\n\n  _addAppConstraints: function (depsAndConstraints) {\n    var self = this;\n\n    self.projectConstraintsFile.eachConstraint(function (constraint) {\n      // Add a dependency (\"this package must be used\") and a constraint\n      // (\"... at this version (maybe 'any reasonable')\").\n      depsAndConstraints.deps.push(constraint.package);\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _addLocalPackageConstraints: function (depsAndConstraints) {\n    var self = this;\n    _.each(self.localCatalog.getAllPackageNames(), function (packageName) {\n      var versionRecord = self.localCatalog.getLatestVersion(packageName);\n      var constraint = utils.parsePackageConstraint(\n        packageName + \"@=\" + versionRecord.version);\n      // Add a constraint (\"this is the only version available\") but no\n      // dependency (we don't automatically use all local packages!)\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _addReleaseConstraints: function (depsAndConstraints) {\n    var self = this;\n    if (! self._releaseForConstraints)\n      return;\n    _.each(self._releaseForConstraints.packages, function (version, packageName) {\n      var constraint = utils.parsePackageConstraint(\n        packageName + \"@=\" + version);\n      // Add a constraint (\"this is the only version available\") but no\n      // dependency (we don't automatically use all local packages!)\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _getAnticipatedPrereleases: function (rootConstraints, cachedVersions) {\n    var self = this;\n\n    var anticipatedPrereleases = {};\n    var add = function (packageName, version) {\n      if (! /-/.test(version)) {\n        return;\n      }\n      if (! _.has(anticipatedPrereleases, packageName)) {\n        anticipatedPrereleases[packageName] = {};\n      }\n      anticipatedPrereleases[packageName][version] = true;\n    };\n\n    // Pre-release versions that are root constraints (in .meteor/packages, in\n    // the release, or the version of a local package) are anticipated.\n    _.each(rootConstraints, function (constraintObject) {\n      _.each(constraintObject.versionConstraint.alternatives, function (alt) {\n        var version = alt.versionString;\n        version && add(constraintObject.package, version);\n      });\n    });\n\n    // Pre-release versions we decided to use in the past are anticipated.\n    _.each(cachedVersions, function (version, packageName) {\n      add(packageName, version);\n    });\n\n    return anticipatedPrereleases;\n  },\n\n  _buildResolver: function () {\n    var self = this;\n\n    var constraintSolverPackage =\n          isopackets.load('constraint-solver')['constraint-solver'];\n    var resolver =\n          new constraintSolverPackage.ConstraintSolver.PackagesResolver(\n            self.projectCatalog, {\n              nudge: function () {\n                Console.nudge(true);\n              },\n              Profile: Profile,\n              resultCache: self._resolverResultCache\n            });\n    return resolver;\n  },\n\n  _downloadMissingPackages: function () {\n    var self = this;\n    buildmessage.assertInJob();\n    if (!self.packageMap)\n      throw Error(\"which packages to download?\");\n\n    catalog.runAndRetryWithRefreshIfHelpful(function () {\n      buildmessage.enterJob(\"downloading missing packages\", function () {\n        self.tropohouse.downloadPackagesMissingFromMap(self.packageMap, {\n          serverArchitectures: self._serverArchitectures\n        });\n        if (buildmessage.jobHasMessages())\n          return;\n        self._completedStage = STAGE.DOWNLOAD_MISSING_PACKAGES;\n      });\n    });\n  },\n\n  _buildLocalPackages: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.isopackCache = new isopackCacheModule.IsopackCache({\n      packageMap: self.packageMap,\n      includeCordovaUnibuild: (self._forceIncludeCordovaUnibuild\n                               || self.platformList.usesCordova()),\n      cacheDir: self.getProjectLocalDirectory('isopacks'),\n      pluginCacheDirRoot: self.getProjectLocalDirectory('plugin-cache'),\n      tropohouse: self.tropohouse,\n      previousIsopackCache: self._previousIsopackCache,\n      lintLocalPackages: self.lintAppAndLocalPackages,\n      lintPackageWithSourceRoot: self._lintPackageWithSourceRoot\n    });\n\n    if (self._forceRebuildPackages) {\n      self.isopackCache.wipeCachedPackages(\n        self._forceRebuildPackages === true\n          ? null : self._forceRebuildPackages);\n    }\n\n    buildmessage.enterJob('building local packages', function () {\n      self.isopackCache.buildLocalPackages();\n    });\n    self._completedStage = STAGE.BUILD_LOCAL_PACKAGES;\n  },\n\n  _saveChangedMetadata: function () {\n    var self = this;\n\n    // Save any changes to .meteor/packages.\n    if (! self._neverWriteProjectConstraintsFile)\n      self.projectConstraintsFile.writeIfModified();\n\n    // Write .meteor/versions if the command always wants to (create/update),\n    // or if the release of the app matches the release of the process.\n    if (! self._neverWritePackageMap &&\n        (self._alwaysWritePackageMap ||\n         (release.current.isCheckout() && self.releaseFile.isCheckout()) ||\n         (! release.current.isCheckout() &&\n          release.current.name === self.releaseFile.fullReleaseName))) {\n\n      self.packageMapFile.write(self.packageMap);\n    }\n\n    self._completedStage = STAGE.SAVE_CHANGED_METADATA;\n  }\n});\n\n\n// Represents .meteor/packages.\nexports.ProjectConstraintsFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'packages');\n  self.watchSet = null;\n\n  // Have we modified the in-memory representation since reading from disk?\n  self._modified = null;\n  // List of each line in the file; object with keys:\n  // - leadingSpace (string of spaces before the constraint)\n  // - constraint (as returned by utils.parsePackageConstraint)\n  // - trailingSpaceAndComment (string of spaces/comments after the constraint)\n  // This allows us to rewrite the file preserving comments.\n  self._constraintLines = null;\n  // Maps from package name to entry in _constraintLines.\n  self._constraintMap = null;\n  self._readFile();\n};\n\n_.extend(exports.ProjectConstraintsFile.prototype, {\n  _readFile: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.watchSet = new watch.WatchSet;\n    self._modified = false;\n    self._constraintMap = {};\n    self._constraintLines = [];\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n\n    // No .meteor/packages? This isn't a very good project directory. In fact,\n    // that's the definition of a project directory! (And that should have been\n    // fixed by _ensureProjectDir!)\n    if (contents === null)\n      throw Error(\"packages file missing: \" + self.filename);\n\n    var lines = files.splitBufferToLines(contents);\n    // Don't keep a record for the space at the end of the file.\n    if (lines.length && _.last(lines) === '')\n      lines.pop();\n\n    _.each(lines, function (line) {\n      var lineRecord =\n            { leadingSpace: '', constraint: null, trailingSpaceAndComment: '' };\n      self._constraintLines.push(lineRecord);\n      // Strip comment.\n      var match = line.match(/^([^#]*)(#.*)$/);\n      if (match) {\n        line = match[1];\n        lineRecord.trailingSpaceAndComment = match[2];\n      }\n      // Strip trailing space.\n      match = line.match(/^((?:.*\\S)?)(\\s*)$/);\n      line = match[1];\n      lineRecord.trailingSpaceAndComment =\n        match[2] + lineRecord.trailingSpaceAndComment;\n      // Strip leading space.\n      match = line.match(/^(\\s*)((?:\\S.*)?)$/);\n      lineRecord.leadingSpace = match[1];\n      line = match[2];\n\n      // No constraint? Leave lineRecord.constraint null and continue.\n      if (line === '')\n        return;\n      lineRecord.constraint = utils.parsePackageConstraint(line, {\n        useBuildmessage: true,\n        buildmessageFile: self.filename\n      });\n      if (! lineRecord.constraint)\n        return;  // recover by ignoring\n\n      if (_.has(self._constraintMap, lineRecord.constraint.package)) {\n        buildmessage.error(\n          \"Package name appears twice: \" + lineRecord.constraint.package, {\n            // XXX should this be relative?\n            file: self.filename\n          });\n        return;  // recover by ignoring\n      }\n      self._constraintMap[lineRecord.constraint.package] = lineRecord;\n    });\n  },\n\n  writeIfModified: function () {\n    var self = this;\n    self._modified && self._write();\n  },\n\n  _write: function () {\n    var self = this;\n    var lines = _.map(self._constraintLines, function (lineRecord) {\n      var lineParts = [lineRecord.leadingSpace];\n      if (lineRecord.constraint) {\n        lineParts.push(lineRecord.constraint.package);\n        if (lineRecord.constraint.constraintString) {\n          lineParts.push('@', lineRecord.constraint.constraintString);\n        }\n      }\n      lineParts.push(lineRecord.trailingSpaceAndComment, '\\n');\n      return lineParts.join('');\n    });\n    files.writeFileAtomically(self.filename, lines.join(''));\n    var messages = buildmessage.capture(\n      { title: 're-reading .meteor/packages' },\n      function () {\n        self._readFile();\n      });\n    // We shouldn't choke on something we just wrote!\n    if (messages.hasMessages())\n      throw Error(\"wrote bad .meteor/packages: \" + messages.formatMessages());\n  },\n\n  // Iterates over all constraints, in the format returned by\n  // utils.parsePackageConstraint.\n  eachConstraint: function (iterator) {\n    var self = this;\n    _.each(self._constraintLines, function (lineRecord) {\n      if (lineRecord.constraint)\n        iterator(lineRecord.constraint);\n    });\n  },\n\n  // Returns the constraint in the format returned by\n  // utils.parsePackageConstraint, or null.\n  getConstraint: function (name) {\n    var self = this;\n    if (_.has(self._constraintMap, name))\n      return self._constraintMap[name].constraint;\n    return null;\n  },\n\n  // Adds constraints, an array of objects as returned from\n  // utils.parsePackageConstraint.\n  // Does not write to disk immediately; changes are written to disk by\n  // writeIfModified() which is called in the _saveChangedMetadata step\n  // of project preparation.\n  addConstraints: function (constraintsToAdd) {\n    var self = this;\n    _.each(constraintsToAdd, function (constraintToAdd) {\n      if (! constraintToAdd.package) {\n        throw new Error(\"Expected PackageConstraint: \" + constraintToAdd);\n      }\n\n      var lineRecord;\n      if (! _.has(self._constraintMap, constraintToAdd.package)) {\n        lineRecord = {\n          leadingSpace: '',\n          constraint: constraintToAdd,\n          trailingSpaceAndComment: ''\n        };\n        self._constraintLines.push(lineRecord);\n        self._constraintMap[constraintToAdd.package] = lineRecord;\n        self._modified = true;\n        return;\n      }\n      lineRecord = self._constraintMap[constraintToAdd.package];\n      if (_.isEqual(constraintToAdd, lineRecord.constraint))\n        return;  // nothing changed\n      lineRecord.constraint = constraintToAdd;\n      self._modified = true;\n    });\n  },\n\n  // Like addConstraints, but takes an array of package name strings\n  // to add with no version constraint\n  addPackages: function (packagesToAdd) {\n    this.addConstraints(_.map(packagesToAdd, function (packageName) {\n      // make sure packageName is valid (and doesn't, for example,\n      // contain an '@' sign)\n      utils.validatePackageName(packageName);\n      return utils.parsePackageConstraint(packageName);\n    }));\n  },\n\n  // The packages in packagesToRemove are expected to actually be in the file;\n  // if you want to provide different output for packages in the file vs not,\n  // you should have already done that.\n  // Does not write to disk immediately; changes are written to disk by\n  // writeIfModified() which is called in the _saveChangedMetadata step\n  // of project preparation.\n  removePackages: function (packagesToRemove) {\n    var self = this;\n    self._constraintLines = _.filter(\n      self._constraintLines, function (lineRecord) {\n        return ! (lineRecord.constraint &&\n                  _.contains(packagesToRemove, lineRecord.constraint.package));\n      });\n    _.each(packagesToRemove, function (p) {\n      delete self._constraintMap[p];\n    });\n    self._modified = true;\n  },\n\n  // Removes all constraints. Generally this should only be used in situations\n  // where the project is not a real user app: while you can use\n  // removeAllPackages followed by addConstraints to fully replace the\n  // constraints in a project, this will also lose all user comments and\n  // (cosmetic) ordering from the file.\n  removeAllPackages: function () {\n    var self = this;\n    self._constraintLines = [];\n    self._constraintMap = {};\n    self._modified = true;\n  }\n});\n\n\n\n// Represents .meteor/versions.\nexports.PackageMapFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = options.filename;\n  self.watchSet = new watch.WatchSet;\n  self.fileHash = null;\n  self._versions = {};\n\n  self._readFile();\n};\n\n_.extend(exports.PackageMapFile.prototype, {\n  _readFile: function () {\n    var self = this;\n\n    var fileInfo = watch.readAndWatchFileWithHash(self.watchSet, self.filename);\n    var contents = fileInfo.contents;\n    self.fileHash = fileInfo.hash;\n    // No .meteor/versions? That's OK, you just get to start your calculation\n    // from scratch.\n    if (contents === null)\n      return;\n\n    buildmessage.assertInCapture();\n    var lines = files.splitBufferToLines(contents);\n    _.each(lines, function (line) {\n      // We don't allow comments here, since it's cruel to allow comments in a\n      // file when you're going to overwrite them anyway.\n      line = files.trimSpace(line);\n      if (line === '')\n        return;\n      var packageVersion = utils.parsePackageAndVersion(line, {\n        useBuildmessage: true,\n        buildmessageFile: self.filename\n      });\n      if (!packageVersion)\n        return;  // recover by ignoring\n\n      // If a package appears multiple times in .meteor/versions, we just ignore\n      // the second one. This file is more meteor-controlled than\n      // .meteor/packages and people shouldn't be surprised to see it\n      // automatically fixed.\n      if (_.has(self._versions, packageVersion.package))\n        return;\n\n      self._versions[packageVersion.package] = packageVersion.version;\n    });\n  },\n\n  // Note that this is really specific to wanting to know what versions are in\n  // the .meteor/versions file on disk, which is a slightly different question\n  // from \"so, what versions should I be building with?\"  Usually you want the\n  // PackageMap produced by resolving constraints instead! Returns a map from\n  // package name to version.\n  getCachedVersions: function () {\n    var self = this;\n    return _.clone(self._versions);\n  },\n\n  write: function (packageMap) {\n    var self = this;\n    var newVersions = packageMap.toVersionMap();\n\n    // Only write the file if some version changed. (We don't need to do no-op\n    // writes, even if they fix sorting in the file.)\n    if (_.isEqual(self._versions, newVersions))\n      return;\n\n    self._versions = newVersions;\n    var packageNames = _.keys(self._versions);\n    packageNames.sort();\n    var lines = [];\n    _.each(packageNames, function (packageName) {\n      lines.push(packageName + \"@\" + self._versions[packageName] + \"\\n\");\n    });\n    var fileContents = new Buffer(lines.join(''));\n    files.writeFileAtomically(self.filename, fileContents);\n\n    // Replace our watchSet with one for the new contents of the file.\n    var hash = watch.sha1(fileContents);\n    self.watchSet = new watch.WatchSet;\n    self.watchSet.addFile(self.filename, hash);\n  }\n});\n\n\n\n// Represents .meteor/platforms. We take no effort to maintain comments or\n// spacing here.\nexports.PlatformList = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'platforms');\n  self.watchSet = null;\n  self._platforms = null;\n\n  self._readFile();\n};\n\n// These platforms are always present and can be neither added or removed\nexports.PlatformList.DEFAULT_PLATFORMS = ['browser', 'server'];\n\n_.extend(exports.PlatformList.prototype, {\n  _readFile: function () {\n    var self = this;\n\n    // Reset the WatchSet.\n    self.watchSet = new watch.WatchSet;\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n\n    var platforms = contents ? files.splitBufferToLines(contents) : [];\n    // We don't allow comments here, since it's cruel to allow comments in a\n    // file when you're going to overwrite them anyway.\n    platforms = _.uniq(_.compact(_.map(platforms, files.trimSpace)));\n    platforms.sort();\n\n    // Missing some of the default platforms (or the whole file)? Add them and\n    // try again.\n    if (_.difference(exports.PlatformList.DEFAULT_PLATFORMS,\n                     platforms).length) {\n      // Write the platforms to disk (automatically adding DEFAULT_PLATFORMS and\n      // sorting), which automatically calls this function recursively to\n      // re-reads them.\n      self.write(platforms);\n      return;\n    }\n\n    self._platforms = platforms;\n  },\n\n  // Replaces the current platform file with the given list and resets this\n  // object (and its WatchSet) to track the new value.\n  write: function (platforms) {\n    var self = this;\n    self._platforms = null;\n    platforms = _.uniq(\n      platforms.concat(exports.PlatformList.DEFAULT_PLATFORMS));\n    platforms.sort();\n    files.writeFileAtomically(self.filename, platforms.join('\\n') + '\\n');\n    self._readFile();\n  },\n\n  getPlatforms: function () {\n    var self = this;\n    return _.clone(self._platforms);\n  },\n\n  getCordovaPlatforms: function () {\n    var self = this;\n    return _.difference(self._platforms,\n                        exports.PlatformList.DEFAULT_PLATFORMS);\n  },\n\n  usesCordova: function () {\n    var self = this;\n    return ! _.isEmpty(self.getCordovaPlatforms());\n  },\n\n  getWebArchs: function () {\n    var self = this;\n    var archs = [ \"web.browser\" ];\n    if (! _.isEmpty(self.getCordovaPlatforms())) {\n      archs.push(\"web.cordova\");\n    }\n    return archs;\n  }\n});\n\n\n// Represents .meteor/cordova-plugins.\nexports.CordovaPluginsFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'cordova-plugins');\n  self.watchSet = null;\n  // Map from plugin name to version.\n  self._plugins = null;\n\n  self._readFile();\n};\n\n_.extend(exports.CordovaPluginsFile.prototype, {\n  _readFile: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.watchSet = new watch.WatchSet;\n    self._plugins = {};\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n    // No file?  No plugins.\n    if (contents === null)\n      return;\n\n    var lines = files.splitBufferToLines(contents);\n    _.each(lines, function (line) {\n      line = files.trimSpace(line);\n      if (line === '')\n        return;\n\n      // We just do a standard split here, not utils.parsePackageConstraint,\n      // since cordova plugins don't necessary obey the same naming conventions\n      // as Meteor packages.\n      var parts = line.split('@');\n      if (parts.length !== 2) {\n        buildmessage.error(\"Cordova plugin must specify version: \" + line, {\n          // XXX should this be relative?\n          file: self.filename\n        });\n        return;  // recover by ignoring\n      }\n      if (_.has(self._plugins, parts[0])) {\n        buildmessage.error(\"Plugin name appears twice: \" + parts[0], {\n          // XXX should this be relative?\n          file: self.filename\n        });\n        return;  // recover by ignoring\n      }\n      self._plugins[parts[0]] = parts[1];\n    });\n  },\n\n  getPluginVersions: function () {\n    var self = this;\n    return _.clone(self._plugins);\n  },\n\n  write: function (plugins) {\n    var self = this;\n    var pluginNames = _.keys(plugins);\n    pluginNames.sort();\n    var lines = _.map(pluginNames, function (pluginName) {\n      return pluginName + '@' + plugins[pluginName] + '\\n';\n    });\n    files.writeFileAtomically(self.filename, lines.join(''));\n    var messages = buildmessage.capture(\n      { title: 're-reading .meteor/cordova-plugins' },\n      function () {\n        self._readFile();\n      });\n    // We shouldn't choke on something we just wrote!\n    if (messages.hasMessages())\n      throw Error(\"wrote bad .meteor/packages: \" + messages.formatMessages());\n  }\n});\n\n\n\n// Represents .meteor/release.\nexports.ReleaseFile = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'release');\n  self.watchSet = null;\n  // The release name actually written in the file.  Null if no fill.  Empty if\n  // the file is empty.\n  self.unnormalizedReleaseName = null;\n  // The full release name (with METEOR@ if it's missing in\n  // unnormalizedReleaseName).\n  self.fullReleaseName = null;\n  // FOO@bar unless FOO === \"METEOR\" in which case \"Meteor bar\".\n  self.displayReleaseName = null;\n  // Just the track.\n  self.releaseTrack = null;\n  self.releaseVersion = null;\n  self._readFile();\n};\n\n_.extend(exports.ReleaseFile.prototype, {\n  fileMissing: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === null;\n  },\n  noReleaseSpecified: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === '';\n  },\n  isCheckout: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === 'none';\n  },\n  normalReleaseSpecified: function () {\n    var self = this;\n    return ! (self.fileMissing() || self.noReleaseSpecified()\n              || self.isCheckout());\n  },\n\n  _readFile: function () {\n    var self = this;\n\n    // Start a new watchSet, in case we just overwrote this.\n    self.watchSet = new watch.WatchSet;\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n    // If file doesn't exist, leave unnormalizedReleaseName empty; fileMissing\n    // will be true.\n    if (contents === null)\n      return;\n\n    var lines = _.compact(_.map(files.splitBufferToLines(contents),\n                                files.trimSpaceAndComments));\n    // noReleaseSpecified will be true.\n    if (!lines.length) {\n      self.unnormalizedReleaseName = '';\n      return;\n    }\n\n    self.unnormalizedReleaseName = lines[0];\n\n    const catalogUtils = require('./packaging/catalog/catalog-utils.js');\n    var parts = catalogUtils.splitReleaseName(self.unnormalizedReleaseName);\n    self.fullReleaseName = parts[0] + '@' + parts[1];\n    self.displayReleaseName = catalogUtils.displayRelease(parts[0], parts[1]);\n    self.releaseTrack = parts[0];\n    self.releaseVersion = parts[1];\n  },\n\n  write: function (releaseName) {\n    var self = this;\n    files.writeFileAtomically(self.filename, releaseName + '\\n');\n    self._readFile();\n  }\n});\n\n\n// Represents .meteor/.finished-upgraders.\n// This is only used in a few places, so we don't cache its value in memory;\n// we just read it when we need it. There's also no need to add it to a\n// watchSet because we don't need to rebuild when it changes.\nexports.FinishedUpgraders = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(\n    options.projectDir, '.meteor', '.finished-upgraders');\n};\n\n_.extend(exports.FinishedUpgraders.prototype, {\n  readUpgraders: function () {\n    var self = this;\n    var upgraders = [];\n    var lines = files.getLinesOrEmpty(self.filename);\n    _.each(lines, function (line) {\n      line = files.trimSpaceAndComments(line);\n      if (line === '')\n        return;\n      upgraders.push(line);\n    });\n    return upgraders;\n  },\n\n  appendUpgraders: function (upgraders) {\n    var self = this;\n\n    var current = null;\n    try {\n      current = files.readFile(self.filename, 'utf8');\n    } catch (e) {\n      if (e.code !== 'ENOENT')\n        throw e;\n    }\n\n    var appendText = '';\n    if (current === null) {\n      // We're creating this file for the first time. Include a helpful comment.\n      appendText =\n\"# This file contains information which helps Meteor properly upgrade your\\n\" +\n\"# app when you run 'meteor update'. You should check it into version control\\n\" +\n\"# with your project.\\n\" +\n\"\\n\";\n    } else if (current.length && current[current.length - 1] !== '\\n') {\n      // File has an unterminated last line. Let's terminate it.\n      appendText = '\\n';\n    }\n\n    _.each(upgraders, function (upgrader) {\n      appendText += upgrader + '\\n';\n    });\n\n    files.appendFile(self.filename, appendText);\n  }\n});\n"]}