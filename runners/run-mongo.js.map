{"version":3,"sources":["/tools/runners/run-mongo.js"],"names":[],"mappings":"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","file":"tools/runners/run-mongo.js.map","sourcesContent":["var files = require('../fs/files.js');\nvar utils = require('../utils/utils.js');\nvar mongoExitCodes = require('../utils/mongo-exit-codes.js');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar runLog = require('./run-log.js');\nvar child_process = require('child_process');\n\nvar _ = require('underscore');\nvar isopackets = require('../tool-env/isopackets.js');\nvar Future = require('fibers/future');\n\n// Given a Mongo URL, open an interative Mongo shell on this terminal\n// on that database.\nvar runMongoShell = function (url) {\n  var mongoPath = files.pathJoin(files.getDevBundle(), 'mongodb', 'bin', 'mongo');\n  // XXX mongo URLs are not real URLs (notably, the comma-separation for\n  // multiple hosts). We've had a little better luck using the mongodb-uri npm\n  // package.\n  var mongoUrl = require('url').parse(url);\n  var auth = mongoUrl.auth && mongoUrl.auth.split(':');\n  var ssl = require('querystring').parse(mongoUrl.query).ssl === \"true\";\n\n  var args = [];\n  if (ssl) args.push('--ssl');\n  if (auth) args.push('-u', auth[0]);\n  if (auth) args.push('-p', auth[1]);\n  args.push(mongoUrl.hostname + ':' + mongoUrl.port + mongoUrl.pathname);\n\n  child_process.spawn(files.convertToOSPath(mongoPath),\n    args, { stdio: 'inherit' });\n};\n\n// Start mongod with a dummy replSet and wait for it to listen.\nvar spawnMongod = function (mongodPath, port, dbPath, replSetName) {\n  var child_process = require('child_process');\n\n  mongodPath = files.convertToOSPath(mongodPath);\n  dbPath = files.convertToOSPath(dbPath);\n\n  return child_process.spawn(mongodPath, [\n      // nb: cli-test.sh and findMongoPids make strong assumptions about the\n      // order of the arguments! Check them before changing any arguments.\n      '--bind_ip', '127.0.0.1',\n      '--smallfiles',\n      '--port', port,\n      '--dbpath', dbPath,\n      // Use an 8MB oplog rather than 256MB. Uses less space on disk and\n      // initializes faster. (Not recommended for production!)\n      '--oplogSize', '8',\n      '--replSet', replSetName\n  ], {\n    // Apparently in some contexts, Mongo crashes if your locale isn't set up\n    // right. I wasn't able to reproduce it, but many people on #4019\n    // were. Let's default a couple environment variables to English UTF-8 if\n    // they aren't set already. If these few aren't good enough, we'll at least\n    // detect the locale error and print a link to #4019 (look for\n    // `detectedErrors.badLocale` below).\n    env: _.extend({\n      LANG: 'en_US.UTF-8',\n      LC_ALL: 'en_US.UTF-8'\n    }, process.env)\n  });\n};\n\n// Find all running Mongo processes that were started by this program\n// (even by other simultaneous runs of this program). If passed,\n// appDir and port act as filters on the list of running mongos.\n//\n// Yields. Returns an array of objects with keys pid, port, appDir.\nvar findMongoPids;\nif (process.platform === 'win32') {\n  // Windows doesn't have a ps equivalent that (reliably) includes the command\n  // line, so approximate using the combined output of tasklist and netstat.\n  findMongoPids = function (app_dir, port) {\n    var fut = new Future;\n\n    child_process.exec('tasklist /fi \"IMAGENAME eq mongod.exe\"',\n      function (error, stdout, stderr) {\n        if (error) {\n          var additionalInfo = JSON.stringify(error);\n          if (error.code === 'ENOENT') {\n            additionalInfo = \"tasklist wasn't found on your system, it usually can be found at C:\\\\Windows\\\\System32\\\\.\";\n          }\n          fut['throw'](new Error(\"Couldn't run tasklist.exe: \" +\n            additionalInfo));\n          return;\n        } else {\n          // Find the pids of all mongod processes\n          var mongo_pids = [];\n          _.each(stdout.split('\\n'), function (line) {\n            var m = line.match(/^mongod.exe\\s+(\\d+) /);\n            if (m) {\n              mongo_pids[m[1]] = true;\n            }\n          });\n\n          // Now get the corresponding port numbers\n          child_process.exec(\n            'netstat -ano',\n            {maxBuffer: 1024 * 1024 * 10},\n            function (error, stdout, stderr) {\n            if (error) {\n              fut['throw'](new Error(\"Couldn't run netstat -ano: \" +\n                JSON.stringify(error)));\n              return;\n            } else {\n              var pids = [];\n              _.each(stdout.split('\\n'), function (line) {\n                var m = line.match(/^\\s*TCP\\s+\\S+:(\\d+)\\s+\\S+\\s+LISTENING\\s+(\\d+)/);\n                if (m) {\n                  var found_pid =  parseInt(m[2], 10);\n                  var found_port = parseInt(m[1], 10);\n\n                  // We can't check the path app_dir so assume it always matches\n                  if (mongo_pids[found_pid] && (!port || port === found_port)) {\n                    // Note that if the mongo rest interface is enabled the\n                    // initial port + 1000 is also likely to be open.\n                    // So remove the pid so we only match it once.\n                    delete mongo_pids[found_pid];\n                    pids.push({\n                      pid: found_pid,\n                      port: found_port,\n                      app_dir: null});\n                  }\n                }\n              });\n\n              fut['return'](pids);\n            }\n          });\n        }\n      });\n\n    return fut.wait();\n  };\n} else {\n  findMongoPids = function (appDir, port) {\n    var fut = new Future;\n\n    // 'ps ax' should be standard across all MacOS and Linux.\n    // However, ps on OS X corrupts some non-ASCII characters in arguments,\n    // such as т (CYRILLIC SMALL LETTER TE), leading to this function\n    // failing to properly match pathnames with those characters.  #3999\n    //\n    // pgrep appears to do a better job (and has output that is roughly\n    // similar; it lacks a few fields that we don't care about).  Plus,\n    // it can do some of the grepping for us.\n    //\n    // However, 'pgrep' only started shipping with OS X 10.8 (and may be less\n    // common on Linux too), so we check to see if it exists and fall back to\n    // 'ps' if we can't find it.\n    //\n    // We avoid using pgrep on Linux, because some versions of Linux pgrep\n    // require you to pass -a/--list-full to include the arguments in the\n    // output, and other versions fail if you pass that option. We have not\n    // observed the Unicode corruption on Linux, so using ps ax there is fine.\n    var psScript = 'ps ax';\n    if (process.platform === 'darwin') {\n      psScript =\n        'if type pgrep >/dev/null 2>&1; then ' +\n        // -lf means to display and match against full argument lists.\n        // pgrep exits 1 if no processes match the argument; we're OK\n        // considering this as a success, but we don't want other errors\n        // to be ignored.  Note that this is sh not bash, so we can't use\n        // [[.\n        'pgrep -lf mongod; test \"$?\" -eq 0 -o \"$?\" -eq 1;' +\n        'else ps ax; fi';\n    }\n\n    child_process.exec(\n      psScript,\n      // we don't want this to randomly fail just because you're running lots of\n      // processes. 10MB should be more than ps ax will ever spit out; the default\n      // is 200K, which at least one person hit (#2158).\n      {maxBuffer: 1024 * 1024 * 10},\n      function (error, stdout, stderr) {\n        if (error) {\n          fut['throw'](new Error(\"Couldn't run ps ax: \" +\n            JSON.stringify(error) + \"; \" + error.message));\n          return;\n        }\n\n        var ret = [];\n        _.each(stdout.split('\\n'), function (line) {\n          // Matches mongos we start. Note that this matches\n          // 'fake-mongod' (our mongod stub for automated tests) as well\n          // as 'mongod'.\n          var m = line.match(/^\\s*(\\d+).+mongod .+--port (\\d+) --dbpath (.+)(?:\\/|\\\\)\\.meteor(?:\\/|\\\\)local(?:\\/|\\\\)db/);\n          if (m && m.length === 4) {\n            var foundPid =  parseInt(m[1], 10);\n            var foundPort = parseInt(m[2], 10);\n            var foundPath = m[3];\n\n            if ( (! port || port === foundPort) &&\n                 (! appDir || appDir === foundPath)) {\n              ret.push({\n                pid: foundPid,\n                port: foundPort,\n                appDir: foundPath\n              });\n            }\n          }\n        });\n\n        fut['return'](ret);\n      });\n\n    return fut.wait();\n  };\n}\n\n// See if mongo is running already. Yields. Returns the port that\n// mongo is running on or null if mongo is not running.\nvar findMongoPort = function (appDir) {\n  var pids = findMongoPids(appDir);\n\n  if (pids.length !== 1) {\n    return null;\n  }\n\n  var pid = pids[0].pid;\n  try {\n    process.kill(pid, 0); // make sure it is still alive\n  } catch (e) {\n    return null;\n  }\n\n  return pids[0].port;\n};\n\n// XXX actually -- the code below is probably more correct than the code we\n// have above for non-Windows platforms (since that code relies on\n// `findMongoPids`). But changing this a few days before the 1.1 release\n// seemed too bold. But if you're changing code around here, consider using\n// the implementation below on non-Windows platforms as well.\nif (process.platform === 'win32') {\n  // On Windows, finding the Mongo pid, checking it and extracting the port\n  // is often unreliable (XXX reliable in what specific way?). There is an\n  // easier way to find the port of running Mongo: look it up in a METEOR-\n  // PORT file that we generate when running. This may result into problems\n  // where we try to connect to a mongod that is not running, or a wrong\n  // mongod if our current app is not running but there is a left-over file\n  // lying around. This still can be better than always failing to connect.\n  findMongoPort = function (appDir) {\n    var mongoPort = null;\n\n    var portFile = files.pathJoin(appDir, '.meteor/local/db/METEOR-PORT');\n    if (files.exists(portFile)) {\n      mongoPort = files.readFile(portFile, 'utf8').replace(/\\s/g, '');\n    }\n\n    // Now, check if there really is a Mongo server running on this port.\n    // (The METEOR-PORT file may point to an old Mongo server that's now\n    // stopped)\n    var net = require('net');\n    var mongoTestConnectFuture = new Future;\n    var client = net.connect({port: mongoPort}, function() {\n      // The server is running.\n      client.end();\n      mongoTestConnectFuture.isResolved() || mongoTestConnectFuture.return();\n    });\n    client.on('error', function () {\n      mongoPort = null;\n      mongoTestConnectFuture.isResolved() || mongoTestConnectFuture.return();\n    });\n    mongoTestConnectFuture.wait();\n\n    return mongoPort;\n  }\n}\n\n\n// Kill any mongos running on 'port'. Yields, and returns once they\n// are all dead. Throws an exception on failure.\n//\n// This is a big hammer for dealing with still running mongos, but\n// smaller hammers have failed before and it is getting tiresome.\nvar findMongoAndKillItDead = function (port, dbPath) {\n  var pids = findMongoPids(null, port);\n\n  // Go through the list serially. There really should only ever be\n  // at most one but we're not taking any chances.\n  _.each(pids, function (processInfo) {\n    var pid = processInfo.pid;\n\n    // Send kill attempts and wait. First a SIGINT, then if it isn't\n    // dead within 2 sec, SIGKILL. Check every 100ms to see if it's\n    // dead.\n    for (var attempts = 1; attempts <= 40; attempts ++) {\n      var signal = 0;\n      if (attempts === 1)\n        signal = 'SIGINT';\n      else if (attempts === 20 || attempts === 30)\n        signal = 'SIGKILL';\n\n      try {\n        process.kill(pid, signal);\n      } catch (e) {\n        // it's dead. on to the next one\n        return;\n      }\n\n      utils.sleepMs(100);\n    }\n\n    // give up after 4 seconds.\n    // XXX should actually catch this higher up and print a nice\n    // error. foreseeable conditions should never result in exceptions\n    // for the user.\n    throw new Error(\"Can't kill running mongo (pid \" + pid + \").\");\n  });\n\n  // If we had to kill mongod with SIGKILL, or on Windows where all calls to\n  // `process.kill` work like SIGKILL, mongod will not have the opportunity to\n  // close gracefully. Delete a lock file that may have been left over.\n  var mongodLockFile = files.pathJoin(dbPath, \"mongod.lock\");\n  if (files.exists(mongodLockFile)) {\n    files.unlink(mongodLockFile)\n  }\n};\n\nvar StoppedDuringLaunch = function () {};\n\n// Starts a single instance of mongod, and configures it properly as a singleton\n// replica set. Yields.  Returns once the mongod is successfully listening (or\n// the process exited).\n//\n// Takes an onExit handler, which will be invoked when the process exits (which\n// may be before or after this function returns depending on whether or not it\n// ever successfully started).\n//\n// If the 'multiple' option is set, it actually sets up three mongod instances\n// (launching the second and third on the next two ports after the specified\n// port). In this case, if any of the three instances exit for any reason, all\n// are killed (and onExit is then invoked). Also, the entirety of all three\n// databases is deleted before starting up.  This is mode intended for testing\n// mongo failover, not for normal development or production use.\nvar launchMongo = function (options) {\n  var onExit = options.onExit || function () {};\n\n  var noOplog = false;\n  var mongod_path = files.pathJoin(\n    files.getDevBundle(), 'mongodb', 'bin', 'mongod');\n  var replSetName = 'meteor';\n\n  // Automated testing: If this is set, instead of starting mongod, we\n  // start our stub (fake-mongod) which can then be remote-controlled\n  // by the test.\n  if (process.env.METEOR_TEST_FAKE_MONGOD_CONTROL_PORT) {\n    if (options.multiple)\n      throw Error(\"Can't specify multiple with fake mongod\");\n\n    var fakeMongodCommand =\n      process.platform === \"win32\" ? \"fake-mongod.bat\" : \"fake-mongod\";\n    mongod_path = files.pathJoin(\n      files.getCurrentToolsDir(), 'tools',\n      'tests', 'fake-mongod', fakeMongodCommand);\n\n    // oplog support requires sending admin commands to mongod, so\n    // it'd be hard to make fake-mongod support it.\n    noOplog = true;\n  }\n\n  // add .gitignore if needed.\n  files.addToGitignore(files.pathJoin(options.appDir, '.meteor'), 'local');\n\n  var subHandles = [];\n  var stopped = false;\n  var stopFuture = new Future;\n\n  // Like Future.wrap and _.bind in one.\n  var yieldingMethod = function (object, methodName, ...args) {\n    var f = new Future;\n    args.push(f.resolver());\n    object[methodName](...args);\n    return fiberHelpers.waitForOne(stopFuture, f);\n  };\n\n  var handle = {\n    stop: function () {\n      if (stopped)\n        return;\n      stopped = true;\n      _.each(subHandles, function (handle) {\n        handle.stop();\n      });\n\n      stopFuture.throw(new StoppedDuringLaunch);\n    }\n  };\n\n  var launchOneMongoAndWaitForReadyForInitiate = function (dbPath, port,\n                                                           portFile) {\n    files.mkdir_p(dbPath, 0o755);\n\n    var proc = null;\n    var procExitHandler;\n\n    if (options.allowKilling) {\n      findMongoAndKillItDead(port, dbPath);\n    }\n\n    if (options.multiple) {\n      // This is only for testing, so we're OK with incurring the replset\n      // setup on each startup.\n      files.rm_recursive(dbPath);\n      files.mkdir_p(dbPath, 0o755);\n    } else if (portFile) {\n      var portFileExists = false;\n      var matchingPortFileExists = false;\n      try {\n        matchingPortFileExists = +(files.readFile(portFile)) === port;\n        portFileExists = true;\n      } catch (e) {\n        if (!e || e.code !== 'ENOENT')\n          throw e;\n      }\n\n      // If this is the first time we're using this DB, or we changed port since\n      // the last time, then we want to destroy any existing replSet\n      // configuration and create a new one. First we delete the \"local\"\n      // database if it exists. (It's a pain and slow to change the port in an\n      // existing replSet configuration. It's also a little slow to initiate a\n      // new replSet, thus the attempt to not do it unless the port changes.)\n      //\n      // In the \"multiple\" case, we just wipe out the entire database and incur\n      // the cost, because this won't affect normal users running meteor.\n      if (!matchingPortFileExists) {\n        // Delete the port file if it exists, so we don't mistakenly believe\n        // that the DB is still configured.\n        if (portFileExists)\n          files.unlink(portFile);\n\n        try {\n          var dbFiles = files.readdir(dbPath);\n        } catch (e) {\n          if (!e || e.code !== 'ENOENT')\n            throw e;\n        }\n        _.each(dbFiles, function (dbFile) {\n          if (/^local\\./.test(dbFile)) {\n            files.unlink(files.pathJoin(dbPath, dbFile));\n          }\n        });\n      }\n    }\n\n    // Let's not actually start a process if we yielded (eg during\n    // findMongoAndKillItDead) and we decided to stop in the middle (eg, because\n    // we're in multiple mode and another process exited).\n    if (stopped)\n      return;\n\n    proc = spawnMongod(mongod_path, port, dbPath, replSetName);\n\n    subHandles.push({\n      stop: function () {\n        if (proc) {\n          proc.removeListener('exit', procExitHandler);\n          proc.kill('SIGINT');\n          proc = null;\n        }\n      }\n    });\n\n    procExitHandler = fiberHelpers.bindEnvironment(function (code, signal) {\n      // Defang subHandle.stop().\n      proc = null;\n\n      // Kill any other processes too. This will also remove\n      // procExitHandler from the other processes, so onExit will only be called\n      // once.\n      handle.stop();\n\n      // Invoke the outer onExit callback.\n      onExit(code, signal, stderrOutput, detectedErrors);\n    });\n    proc.on('exit', procExitHandler);\n\n    var listening = false;\n    var replSetReadyToBeInitiated = false;\n    var replSetReady = false;\n\n    var readyToTalkFuture = new Future;\n\n    var maybeReadyToTalk = function () {\n      if (readyToTalkFuture.isResolved())\n        return;\n      if (listening && (noOplog || replSetReadyToBeInitiated || replSetReady)) {\n        proc.stdout.removeListener('data', stdoutOnData);\n        readyToTalkFuture.return();\n      }\n    };\n\n    var detectedErrors = {};\n    var stdoutOnData = fiberHelpers.bindEnvironment(function (data) {\n      // note: don't use \"else ifs\" in this, because 'data' can have multiple\n      // lines\n      if (/config from self or any seed \\(EMPTYCONFIG\\)/.test(data)) {\n        replSetReadyToBeInitiated = true;\n        maybeReadyToTalk();\n      }\n\n      if (/ \\[initandlisten\\] waiting for connections on port/.test(data)) {\n        listening = true;\n        maybeReadyToTalk();\n      }\n\n      if (/ \\[rsMgr\\] replSet (PRIMARY|SECONDARY)/.test(data)) {\n        replSetReady = true;\n        maybeReadyToTalk();\n      }\n\n      if (/Insufficient free space/.test(data)) {\n        detectedErrors.freeSpace = true;\n      }\n\n      if (/Invalid or no user locale set/.test(data)) {\n        detectedErrors.badLocale = true;\n      }\n    });\n    proc.stdout.setEncoding('utf8');\n    proc.stdout.on('data', stdoutOnData);\n\n    var stderrOutput = '';\n    proc.stderr.setEncoding('utf8');\n    proc.stderr.on('data', function (data) {\n      stderrOutput += data;\n    });\n\n    fiberHelpers.waitForOne(stopFuture, readyToTalkFuture);\n  };\n\n\n  var initiateReplSetAndWaitForReady = function () {\n    try {\n      // Load mongo so we'll be able to talk to it.\n      var mongoNpmModule =\n            isopackets.load('mongo')['npm-mongo'].NpmModuleMongodb;\n\n      // Connect to the intended primary and start a replset.\n      var db = new mongoNpmModule.Db(\n        'meteor',\n        new mongoNpmModule.Server('127.0.0.1', options.port, {poolSize: 1}),\n        {safe: true});\n      yieldingMethod(db, 'open');\n      if (stopped)\n        return;\n      var configuration = {\n        _id: replSetName,\n        members: [{_id: 0, host: '127.0.0.1:' + options.port, priority: 100}]\n      };\n      if (options.multiple) {\n        // Add two more members: one of which should start as secondary but\n        // could in theory become primary, and one of which can never be\n        // primary.\n        configuration.members.push({\n          _id: 1, host: '127.0.0.1:' + (options.port + 1), priority: 5\n        });\n        configuration.members.push({\n          _id: 2, host: '127.0.0.1:' + (options.port + 2), priority: 0\n        });\n      }\n\n      var initiateResult = yieldingMethod(\n        db.admin(), 'command', {replSetInitiate: configuration});\n      if (stopped)\n        return;\n      // why this isn't in the error is unclear.\n      if (initiateResult && initiateResult.documents\n          && initiateResult.documents[0]\n          && initiateResult.documents[0].errmsg) {\n        var err = initiateResult.documents[0].errmsg;\n        if (err !== \"already initialized\") {\n          throw Error(\"rs.initiate error: \" +\n                      initiateResult.documents[0].errmsg);\n        }\n      }\n      // XXX timeout eventually?\n      while (!stopped) {\n        var status = yieldingMethod(db.admin(), 'command',\n                                    {replSetGetStatus: 1});\n        if (!(status && status.documents && status.documents[0]))\n          throw status;\n        status = status.documents[0];\n        if (!status.ok) {\n          if (status.startupStatus === 6) {  // \"SOON\"\n            utils.sleepMs(20);\n            continue;\n          }\n          throw status.errmsg;\n        }\n        // See http://docs.mongodb.org/manual/reference/replica-states/\n        // for information about the various states.\n\n        // Are any of the members starting up or recovering?\n        if (_.any(status.members, function (member) {\n          return member.stateStr === 'STARTUP' ||\n            member.stateStr === 'STARTUP2' ||\n            member.stateStr === 'RECOVERING';\n        })) {\n          utils.sleepMs(20);\n          continue;\n        }\n\n        // Is the intended primary currently a secondary? (It passes through\n        // that phase briefly.)\n\n        if (status.members[0].stateStr === 'SECONDARY') {\n          utils.sleepMs(20);\n          continue;\n        }\n\n        // Anything else for the intended primary is probably an error.\n        if (status.members[0].stateStr !== 'PRIMARY') {\n          throw Error(\"Unexpected Mongo status: \" + JSON.stringify(status));\n        }\n\n        // Anything but secondary for the other members is probably an error.\n        for (var i = 1; i < status.members.length; ++i) {\n          if (status.members[i].stateStr !== 'SECONDARY') {\n            throw Error(\"Unexpected Mongo secondary status: \" +\n                        JSON.stringify(status));\n          }\n        }\n\n        break;\n      }\n\n      db.close(true /* means \"the app is closing the connection\" */);\n    } catch (e) {\n      // If the process has exited, we're doing another form of error\n      // handling. No need to throw random low-level errors farther.\n      if (!stopped || (e instanceof StoppedDuringLaunch))\n        throw e;\n    }\n  };\n\n  try {\n    if (options.multiple) {\n      var dbBasePath = files.pathJoin(options.appDir, '.meteor', 'local', 'dbs');\n      _.each(_.range(3), function (i) {\n        // Did we get stopped (eg, by one of the processes exiting) by now? Then\n        // don't start anything new.\n        if (stopped)\n          return;\n        var dbPath = files.pathJoin(options.appDir, '.meteor', 'local', 'dbs', ''+i);\n        launchOneMongoAndWaitForReadyForInitiate(dbPath, options.port + i);\n      });\n      if (!stopped) {\n        initiateReplSetAndWaitForReady();\n      }\n    } else {\n      var dbPath = files.pathJoin(options.appDir, '.meteor', 'local', 'db');\n      var portFile = !noOplog && files.pathJoin(dbPath, 'METEOR-PORT');\n      launchOneMongoAndWaitForReadyForInitiate(dbPath, options.port, portFile);\n      if (!stopped && !noOplog) {\n        initiateReplSetAndWaitForReady();\n        if (!stopped) {\n          // Write down that we configured the database properly.\n          files.writeFile(portFile, options.port);\n        }\n      }\n    }\n  } catch (e) {\n    if (!(e instanceof StoppedDuringLaunch))\n      throw e;\n  }\n\n  if (stopped)\n    return null;\n\n  return handle;\n};\n\n// This runs a Mongo process and restarts it whenever it fails. If it\n// restarts too often, we give up on restarting it, diagnostics are\n// logged, and onFailure is called.\n//\n// options: appDir, port, onFailure, multiple\nvar MongoRunner = function (options) {\n  var self = this;\n  self.appDir = options.appDir;\n  self.port = options.port;\n  self.onFailure = options.onFailure;\n  self.multiple = options.multiple;\n\n  self.handle = null;\n  self.shuttingDown = false;\n  self.startupFuture = null;\n\n  self.errorCount = 0;\n  self.errorTimer = null;\n  self.restartTimer = null;\n  self.firstStart = true;\n  self.suppressExitMessage = false;\n};\n\nvar MRp = MongoRunner.prototype;\n\n_.extend(MRp, {\n  // Blocks (yields) until the server has started for the first time and\n  // is accepting connections. (It might subsequently die and be\n  // restarted; we won't tell you about that.)\n  //\n  // If the server fails to start for the first time (after a few\n  // restarts), we'll print a message and give up.\n  start: function () {\n    var self = this;\n\n    if (self.handle)\n      throw new Error(\"already running?\");\n\n    self._startOrRestart();\n\n    // Did we properly start up? Great!\n    if (self.handle)\n      return;\n\n    // Are we shutting down? OK.\n    if (self.shuttingDown)\n      return;\n\n    // Otherwise, wait for a successful _startOrRestart, or a failure.\n    if (!self.startupFuture) {\n      self.startupFuture = new Future;\n      self.startupFuture.wait();\n    }\n  },\n\n  // Tries to launch Mongo once.  It returns when either (a) Mongo is listening\n  // or (b) mongod exited before it got to the point of listening.\n  //\n  // (To be specific: in non-multiple mode, this means that the single mongod is\n  // listening and the primary, or that the single mongod died. In multiple\n  // mode, it means that the first mongod is listening and is primary and the\n  // other mongods are listening and are secondary, or that any mongod died (and\n  // it tried to kill the others).)\n  //\n  // In case (a), self.handle will be the handle returned from launchMongo; in\n  // case (b) self.handle will be null.\n  _startOrRestart: function () {\n    var self = this;\n\n    if (self.handle)\n      throw new Error(\"already running?\");\n\n    var allowKilling = self.multiple || self.firstStart;\n    self.firstStart = false;\n    if (! allowKilling) {\n      // If we're not going to try to kill an existing mongod first, then we\n      // shouldn't annoy the user by telling it that we couldn't start up.\n      self.suppressExitMessage = true;\n    }\n\n    self.handle = launchMongo({\n      appDir: self.appDir,\n      port: self.port,\n      multiple: self.multiple,\n      allowKilling: allowKilling,\n      onExit: _.bind(self._exited, self)\n    });\n\n    // It has successfully started up, so if it exits after this point, that\n    // actually is an interesting fact and we shouldn't suppress it.\n    self.suppressExitMessage = false;\n\n    if (self.handle) {\n      self._allowStartupToReturn();\n    }\n  },\n\n  _exited: function (code, signal, stderr, detectedErrors) {\n    var self = this;\n\n    self.handle = null;\n\n    // If Mongo exited because (or rather, anytime after) we told it\n    // to exit, great, nothing to do. Otherwise, we'll print an error\n    // and try to restart.\n    if (self.shuttingDown)\n      return;\n\n    // Only print an error if we tried to kill Mongo and something went\n    // wrong. If we didn't try to kill Mongo, we'll do that on the next\n    // restart. Not killing it on the first try is important for speed,\n    // since findMongoAndKillItDead is a very slow operation.\n    if (! self.suppressExitMessage) {\n      // Print the last 20 lines of stderr.\n      runLog.log(\n        stderr.split('\\n').slice(-20).join('\\n') +\n          \"Unexpected mongo exit code \" + code +\n          (self.multiple ? \".\" : \". Restarting.\"));\n    }\n\n    // If we're in multiple mode, we never try to restart. That's to keep the\n    // test-only multiple code simple.\n    if (self.multiple) {\n      self._fail();\n      return;\n    }\n\n    // We'll restart it up to 3 times in a row. The counter is reset\n    // when 5 seconds goes without a restart. (Note that by using a\n    // timer instead of looking at the current date, we avoid getting\n    // confused by time changes.)\n    self.errorCount ++;\n    if (self.errorTimer)\n      clearTimeout(self.errorTimer);\n    self.errorTimer = setTimeout(function () {\n      self.errorTimer = null;\n      self.errorCount = 0;\n    }, 5000);\n\n    if (self.errorCount < 3) {\n      // Wait a second, then restart.\n      self.restartTimer = setTimeout(fiberHelpers.bindEnvironment(function () {\n        self.restartTimer = null;\n        self._startOrRestart();\n      }), 1000);\n      return;\n    }\n\n    // Too many restarts, too quicky. It's dead. Print friendly\n    // diagnostics and give up.\n    var explanation = mongoExitCodes.Codes[code];\n    var message = \"Can't start Mongo server.\";\n\n    if (explanation && explanation.symbol === 'EXIT_UNCAUGHT' &&\n        detectedErrors.freeSpace) {\n      message += \"\\n\\n\" +\n        \"Looks like you are out of free disk space under .meteor/local.\";\n    } else if (explanation) {\n      message += \"\\n\" + explanation.longText;\n    }\n\n    if (explanation === mongoExitCodes.EXIT_NET_ERROR) {\n      message += \"\\n\\n\" +\n\"Check for other processes listening on port \" + self.port + \"\\n\" +\n\"or other Meteor instances running in the same project.\";\n    }\n\n    if (! explanation && /GLIBC/i.test(stderr)) {\n      message += \"\\n\\n\" +\n\"Looks like you are trying to run Meteor on an old Linux distribution.\\n\" +\n\"Meteor on Linux requires glibc version 2.9 or above. Try upgrading your\\n\" +\n\"distribution to the latest version.\";\n    }\n\n    if (detectedErrors.badLocale) {\n      message += \"\\n\\n\" +\n\"Looks like MongoDB doesn't understand your locale settings. See\\n\" +\n\"https://github.com/meteor/meteor/issues/4019 for more details.\";\n    }\n\n    runLog.log(message);\n    self._fail();\n  },\n\n  // Idempotent\n  stop: function () {\n    var self = this;\n\n    if (self.shuttingDown)\n      return;\n\n    self.shuttingDown = true;\n\n    self.errorTimer && clearTimeout(self.errorTimer);\n    self.restartTimer && clearTimeout(self.restartTimer);\n\n    if (self.handle) {\n      self.handle.stop();\n      self.handle = null;\n    }\n  },\n\n  _allowStartupToReturn: function () {\n    var self = this;\n    if (self.startupFuture) {\n      var startupFuture = self.startupFuture;\n      self.startupFuture = null;\n      startupFuture.return();\n    }\n  },\n\n  _fail: function () {\n    var self = this;\n    self.stop();\n    self.onFailure && self.onFailure();\n    self._allowStartupToReturn();\n  },\n\n  _mongoHosts: function () {\n    var self = this;\n    var ports = [self.port];\n    if (self.multiple) {\n      ports.push(self.port + 1, self.port + 2);\n    }\n    return _.map(ports, function (port) {\n      return \"127.0.0.1:\" + port;\n    }).join(\",\");\n  },\n\n  mongoUrl: function () {\n    var self = this;\n    return \"mongodb://\" + self._mongoHosts() + \"/meteor\";\n  },\n\n  oplogUrl: function () {\n    var self = this;\n    return \"mongodb://\" + self._mongoHosts() + \"/local\";\n  }\n});\n\n\nexports.runMongoShell = runMongoShell;\nexports.findMongoPort = findMongoPort;\nexports.MongoRunner = MongoRunner;\nexports.findMongoAndKillItDead = findMongoAndKillItDead;\n"]}