{"version":3,"sources":["/tools/runners/run-selenium.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC9B,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC9B,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACtC,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACtC,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACrC,IAAI,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;;;AAGzC,IAAI,QAAQ,GAAG,UAAU,OAAO,EAAE;AAChC,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;AAEnB,MAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC;AAC9C,MAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,wBAAwB,GAAG,IAAI,CAAC,SAAS,CAAC;AACpE,MAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,kBAAkB,CAAC;;AAErE,MAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC7B,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,QAAQ,CAAC;;AAE3C,MAAI,CAAC,UAAU,GAAG,IAAI,CAAC;CACxB,CAAC;;AAEF,IAAI,gBAAgB,GAAG,UAAU,OAAO,EAAE;AACxC,MAAI,GAAG,GAAG,IAAI,MAAM,EAAA,CAAC;AACrB,SAAO,CAAC,IAAI,CAAC,UAAU,MAAM,EAAE;AAC7B,OAAG,CAAC,UAAU,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;GAC3C,EAAE,UAAU,GAAG,EAAE;AAChB,OAAG,CAAC,UAAU,EAAE,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;GACvC,CAAC,CAAC;AACH,SAAO,GAAG,CAAC;CACZ,CAAC;;;;AAKF,IAAI,YAAY,GAAG,mBAAmB,CAAC;;;;;;AAMvC,IAAI,WAAW,GAAG,YAAY,GAAG,cAAc,CAAC;;AAEhD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE;;;;AAI3B,OAAK,EAAE,YAAY;AACjB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,IAAI,CAAC,MAAM,EACb,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;;AAEtC,QAAI,CAAC,UAAU,GAAG,EAAE,CAAC;;AAErB,QAAI,SAAS,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAE9C,QAAI,YAAY,CAAC;AACjB,QAAI,YAAY,CAAC;AACjB,QAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;AAC7B,kBAAY,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;AAC/C,kBAAY,GAAG,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;KACnC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;AACrC,kBAAY,GAAG,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;AAChD,kBAAY,GAAG,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;KACnC,MAAM;AACL,YAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;KACvD;;AAED,QAAI,YAAY,EAAE;AAChB,kBAAY,GAAG,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;KAC/D;;AAED,QAAI,OAAO,GAAG,IAAI,SAAS,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;AACrE,QAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;;AAE9B,QAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;AACrD,OAAG,CAAC,IAAI,EAAE,CAAC;;AAEX,oBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;;AAEnD,SAAK,CAAC,YAAY;AAChB,UAAI;AACF,YAAI,CAAC,SAAS,EAAE,CAAC;OAClB,CAAC,OAAO,GAAG,EAAE;AACZ,cAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,GAAG,CAAC,CAAC;OACvD;KACF,CAAC,CAAC,GAAG,EAAE,CAAC;GACV;;AAED,MAAI,EAAE,YAAY;AAChB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,CAAE,IAAI,CAAC,MAAM,EACf,OAAO;;AAET,oBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;AAC7C,oBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;AAC5C,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;GACpB;;AAED,YAAU,EAAE,YAAY;AACtB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,GAAG,WAAW,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;AACnF,oBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;GAClC;;AAED,UAAQ,EAAE,YAAY;AACpB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACzD,WAAO,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;GACzC;;AAED,eAAa,EAAE,YAAY;AACzB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,IAAI,CAAC,eAAe,EAAE;AACxB,YAAM,CAAC,GAAG,CAAC,2BAA2B,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;AAC/D,WAAK,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACnE;;AAED,QAAI,IAAI,CAAC,MAAM,EAAE;AACf,YAAM,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;AACxD,UAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AACnB,aAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;GACF;;AAED,WAAS,EAAE,UAAU,KAAK,EAAE;AAC1B,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,UAAM,CAAC,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;;AAEhC,QAAI,KAAK,KAAK,MAAM,EAAE;AACpB,UAAI,CAAC,aAAa,EAAE,CAAC;KACtB;GACF;;AAED,cAAY,EAAE,UAAU,QAAQ,EAAE,GAAG,EAAE;AACrC,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,QAAQ,KAAK,OAAO,EAAE;AACxB,UAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC3B,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE;AAC/B,UAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;KACrB,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE;;KAEhC,MAAM;AACL,cAAM,CAAC,GAAG,CAAC,iBAAiB,GAAG,QAAQ,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;OACvD;GACF;;AAED,eAAa,EAAE,YAAY;AACzB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,CAAC,UAAU,EAAE,CAAC;AAClB,QAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3B,KAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE;AAC1B,UAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC;AACtB,UAAI,KAAK,GAAG,6BAA6B,CAAC;AAC1C,UAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5B,UAAI,CAAC,KAAK,EAAE;AACV,cAAM,CAAC,GAAG,CAAC,sCAAsC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AACzE,eAAO;OACR;AACD,SAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACf,UAAI,GAAG,KAAK,WAAW,EAAE,OAAO;AAChC,UAAI,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;AACnC,WAAG,GAAG,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AACzC,YAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACnC,YAAI,UAAU,KAAK,CAAC,CAAC,EAAE;AACrB,cAAI,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;SAC5B,MAAM;AACL,cAAI,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;AAC5C,aAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;AACpC,cAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;SAClC;OACF,MAAM;AACL,cAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;OACjB;KACF,CAAC,CAAC;GACJ;;AAED,WAAS,EAAE,YAAY;AACrB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,WAAO,IAAI,CAAC,MAAM,EAAE;AAClB,UAAI;AACF,YAAI,CAAC,aAAa,EAAE,CAAC;OACtB,CAAC,OAAO,GAAG,EAAE;AACZ,cAAM,CAAC,GAAG,CAAC,6BAA6B,GAAG,GAAG,CAAC,CAAC;OACjD;AACD,WAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACrB;GACF;CACF,CAAC,CAAC;;AAEH,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC","file":"tools/runners/run-selenium.js.map","sourcesContent":["var _ = require('underscore');\nvar Fiber = require('fibers');\nvar Future = require('fibers/future');\nvar files = require('../fs/files.js');\nvar runLog = require('./run-log.js');\nvar utils = require('../utils/utils.js');\n\n// options: runner url browserId xunitOutputFile\nvar Selenium = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.driver = null;\n  self.server = null;\n\n  self.browserId = options.browserId || 'xunit';\n  self.url = options.url || 'http://localhost:3000/' + self.browserId;\n  self.xunitOutputFile = options.xunitOutputFile || 'test-results.xml';\n\n  self.runner = options.runner;\n  self.browser = options.browser || 'chrome';\n\n  self.xunitLines = null;\n};\n\nvar _promiseToFuture = function (promise) {\n  var fut = new Future;\n  promise.then(function (result) {\n    fut.isResolved() || fut['return'](result);\n  }, function (err) {\n    fut.isResolved() || fut['throw'](err);\n  });\n  return fut;\n};\n\n\n// The magic prefix for special log output\n// Must match packages/test-in-console/driver.js\nvar MAGIC_PREFIX = '##_meteor_magic##';\n\n// For some reason, we can't see the console.log output\n// unless we 'flush' it by sending another console.log via execute()\n// Note that this is actually a magic message, so we get it echoed back to us;\n// that's not necessary for this to work, but it keeps the output clean for users.\nvar DUMMY_FLUSH = MAGIC_PREFIX + \"flush: flush\";\n\n_.extend(Selenium.prototype, {\n  // Start the selenium server, block (yield) until it is ready to go\n  // (actively listening on outer and proxying to inner), and then\n  // return.\n  start: function () {\n    var self = this;\n\n    if (self.server)\n      throw new Error(\"already running?\");\n\n    self.xunitLines = [];\n\n    var webdriver = require('selenium-webdriver');\n\n    var capabilities;\n    var loggingPrefs;\n    if (self.browser === 'chrome') {\n      capabilities = webdriver.Capabilities.chrome();\n      loggingPrefs = {'browser': 'ALL'};\n    } else if (self.browser === 'firefox') {\n      capabilities = webdriver.Capabilities.firefox();\n      loggingPrefs = {'browser': 'ALL'};\n    } else {\n      throw new Error(\"Unhandled browser: \" + self.browser);\n    }\n\n    if (loggingPrefs) {\n      capabilities = capabilities.set('loggingPrefs', loggingPrefs);\n    }\n\n    var builder = new webdriver.Builder().withCapabilities(capabilities);\n    self.driver = builder.build();\n\n    var fut = _promiseToFuture(self.driver.getSession());\n    fut.wait();\n\n    _promiseToFuture(self.driver.get(self.url)).wait();\n\n    Fiber(function () {\n      try {\n        self._pollLogs();\n      } catch (err) {\n        runLog.log(\"Log polling exited unexpectedly: \" + err);\n      }\n    }).run();\n  },\n\n  stop: function () {\n    var self = this;\n\n    if (! self.driver)\n      return;\n\n    _promiseToFuture(self.driver.close()).wait();\n    _promiseToFuture(self.driver.quit()).wait();\n    self.driver = null;\n  },\n\n  _flushLogs: function () {\n    var self = this;\n\n    var promise = self.driver.executeScript(\"console.log('\" + DUMMY_FLUSH + \"');\", []);\n    _promiseToFuture(promise).wait();\n  },\n\n  _getLogs: function () {\n    var self = this;\n\n    var promise = self.driver.manage().logs().get('browser');\n    return _promiseToFuture(promise).wait();\n  },\n\n  _gotStateDone: function () {\n    var self = this;\n\n    if (self.xunitOutputFile) {\n      runLog.log(\"Writing xunit output to: \" + self.xunitOutputFile);\n      files.writeFile(self.xunitOutputFile, self.xunitLines.join('\\n'));\n    }\n\n    if (self.runner) {\n      runLog.log(\"Shutting down in response to 'done' state\");\n      self.runner.stop();\n      process.exit(0);\n    }\n  },\n\n  _gotState: function (state) {\n    var self = this;\n\n    runLog.log(\"State -> \" + state);\n\n    if (state === \"done\") {\n      self._gotStateDone();\n    }\n  },\n\n  _gotMagicLog: function (facility, msg) {\n    var self = this;\n\n    if (facility === 'xunit') {\n      self.xunitLines.push(msg);\n    } else if (facility === 'state') {\n      self._gotState(msg);\n    } else if (facility === 'flush') {\n      // Ignore\n    } else {\n      runLog.log(\"Unknown magic: \" + facility + \": \" + msg);\n    }\n  },\n\n  _pollLogsOnce: function () {\n    var self = this;\n\n    self._flushLogs();\n    var logs = self._getLogs();\n    _.each(logs, function (log) {\n      var msg = log.message;\n      var regex = /([^\\s]*)\\s*([^\\s]*)\\s*(.*)/i;\n      var match = regex.exec(msg);\n      if (!match) {\n        runLog.log(\"Unknown console.log message format: \" + JSON.stringify(log));\n        return;\n      }\n      msg = match[3];\n      if (msg === DUMMY_FLUSH) return;\n      if (msg.indexOf(MAGIC_PREFIX) === 0) {\n        msg = msg.substring(MAGIC_PREFIX.length);\n        var colonIndex = msg.indexOf(': ');\n        if (colonIndex === -1) {\n          self._gotMagicLog('', msg);\n        } else {\n          var facility = msg.substring(0, colonIndex);\n          msg = msg.substring(colonIndex + 2);\n          self._gotMagicLog(facility, msg);\n        }\n      } else {\n        runLog.log(msg);\n      }\n    });\n  },\n\n  _pollLogs: function () {\n    var self = this;\n\n    while (self.driver) {\n      try {\n        self._pollLogsOnce();\n      } catch (err) {\n        runLog.log(\"Error reading console log: \" + err);\n      }\n      utils.sleepMs(1000);\n    }\n  },\n});\n\nexports.Selenium = Selenium;\n"]}