{"version":3,"sources":["/tools/runners/run-updater.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC9B,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC9B,IAAI,YAAY,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACxD,IAAI,OAAO,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC;;AAEvD,IAAI,OAAO,GAAG,YAAY;AACxB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,KAAK,GAAG,IAAI,CAAC;CACnB,CAAC;;;;;AAKF,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE;AAC1B,OAAK,EAAE,YAAY;AACjB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,IAAI,CAAC,KAAK,EACZ,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;;;;AAItC,QAAI,CAAC,KAAK,GAAG,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,YAAY;AAC5D,UAAI,CAAC,MAAM,EAAE,CAAC;KACf,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;;;AAIxB,QAAI,KAAK,CAAC,YAAY;AACpB,UAAI,CAAC,MAAM,EAAE,CAAC;KACf,CAAC,CAAC,GAAG,EAAE,CAAC;GACV;;AAED,QAAM,EAAE,YAAY;AAClB,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,OAAO,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACjD,QAAI;AACF,aAAO,CAAC,mBAAmB,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;KACjD,CAAC,OAAO,CAAC,EAAE;;;AAGV,aAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;AACvC,aAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AACvB,aAAO;KACR;GACF;;;;AAID,MAAI,EAAE,YAAY;AAChB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,IAAI,CAAC,KAAK,EACZ,OAAO;AACT,iBAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,QAAI,CAAC,KAAK,GAAG,IAAI,CAAC;GACnB;CACF,CAAC,CAAC;;AAGH,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"tools/runners/run-updater.js.map","sourcesContent":["var _ = require('underscore');\nvar Fiber = require('fibers');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar Console = require('../console/console.js').Console;\n\nvar Updater = function () {\n  var self = this;\n  self.timer = null;\n};\n\n// XXX make it take a runLog?\n// XXX need to deal with updater writing messages (bypassing old\n// stdout interception.. maybe it should be global after all..)\n_.extend(Updater.prototype, {\n  start: function () {\n    var self = this;\n\n    if (self.timer)\n      throw new Error(\"already running?\");\n\n    // Check every 3 hours. (Should not share buildmessage state with\n    // the main fiber.)\n    self.timer = setInterval(fiberHelpers.inBareFiber(function () {\n      self._check();\n    }), 3 * 60 * 60 * 1000);\n\n    // Also start a check now, but don't block on it. (This should\n    // not share buildmessage state with the main fiber.)\n    new Fiber(function () {\n      self._check();\n    }).run();\n  },\n\n  _check: function () {\n    var self = this;\n    var updater = require('../packaging/updater.js');\n    try {\n      updater.tryToDownloadUpdate({showBanner: true});\n    } catch (e) {\n      // oh well, this was the background. Only show errors if we are in debug\n      // mode.\n      Console.debug(\"Error inside updater.\");\n      Console.debug(e.stack);\n      return;\n    }\n  },\n\n  // Returns immediately. However if an update check is currently\n  // running it will complete in the background. Idempotent.\n  stop: function () {\n    var self = this;\n\n    if (self.timer)\n      return;\n    clearInterval(self.timer);\n    self.timer = null;\n  }\n});\n\n\nexports.Updater = Updater;\n"]}