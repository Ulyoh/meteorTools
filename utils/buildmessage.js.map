{"version":3,"sources":["/tools/utils/buildmessage.js"],"names":[],"mappings":"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","file":"tools/utils/buildmessage.js.map","sourcesContent":["var Fiber = require('fibers');\nvar Future = require('fibers/future');\nvar _ = require('underscore');\nvar files = require('../fs/files.js');\nvar parseStack = require('./parse-stack.js');\nvar fiberHelpers = require('./fiber-helpers.js');\nvar Progress = require('../console/progress.js').Progress;\n\nvar debugBuild = !!process.env.METEOR_DEBUG_BUILD;\n\n// A job is something like \"building package foo\". It contains the set\n// of messages generated by tha job. A given build run could contain\n// several jobs. Each job has an (absolute) path associated with\n// it. Filenames in messages within a job are to be interpreted\n// relative to that path.\n//\n// Jobs are used both for error handling (via buildmessage.capture) and to set\n// the progress bar title (via progress.js).\n//\n// Job titles should begin with a lower-case letter (unless they begin with a\n// proper noun), so that they look correct in error messages which say \"While\n// jobbing the job\".  The first letter will be capitalized automatically for the\n// progress bar.\nvar Job = function (options) {\n  var self = this;\n  self.messages = [];\n\n  // Should be something like \"building package 'foo'\"\n  // Should look good in \"While $title:\\n[messages]\"\n  self.title = options.title;\n  self.rootPath = options.rootPath;\n\n  // Array of Job (jobs created inside this job)\n  self.children = [];\n};\n\n_.extend(Job.prototype, {\n  // options may include type (\"error\"), message, func, file, line,\n  // column, stack (in the format returned by parseStack.parse())\n  addMessage: function (options) {\n    var self = this;\n    self.messages.push(options);\n  },\n\n  hasMessages: function () {\n    var self = this;\n    return self.messages.length > 0;\n  },\n\n  hasMessageWithTag: function (tagName) {\n    var self = this;\n    return _.any(self.messages, function (message) {\n      return message.tags && _.has(message.tags, tagName);\n    });\n  },\n\n  // Returns a multi-line string suitable for displaying to the user\n  formatMessages: function (indent) {\n    var self = this;\n    var out = \"\";\n    var already = {};\n    indent = new Array((indent || 0) + 1).join(' ');\n\n    _.each(self.messages, function (message) {\n      var stack = message.stack || [];\n\n      var line = indent;\n      if (message.file) {\n        line+= message.file;\n        if (message.line) {\n          line += \":\" + message.line;\n          if (message.column) {\n            // XXX maybe exclude unless specifically requested (eg,\n            // for an automated tool that's parsing our output?)\n            line += \":\" + message.column;\n          }\n        }\n        line += \": \";\n      } else {\n        // not sure how to display messages without a filenanme.. try this?\n        line += \"error: \";\n      }\n      // XXX line wrapping would be nice..\n      line += message.message;\n      if (message.func && stack.length <= 1) {\n        line += \" (at \" + message.func + \")\";\n      }\n      line += \"\\n\";\n\n      if (stack.length > 1) {\n        _.each(stack, function (frame) {\n          // If a nontrivial stack trace (more than just the file and line\n          // we already complained about), print it.\n          var where = \"\";\n          if (frame.file) {\n            where += frame.file;\n            if (frame.line) {\n              where += \":\" + frame.line;\n              if (frame.column) {\n                where += \":\" + frame.column;\n              }\n            }\n          }\n\n          if (! frame.func && ! where)\n            return; // that's a pretty lame stack frame\n\n          line += \"  at \";\n          if (frame.func)\n            line += frame.func + \" (\" + where + \")\\n\";\n          else\n            line += where + \"\\n\";\n        });\n        line += \"\\n\";\n      }\n\n      // Deduplicate messages (only when exact duplicates, including stack)\n      if (! (line in already)) {\n        out += line;\n        already[line] = true;\n      }\n    });\n\n    return out;\n  }\n\n});\n\n// A MessageSet contains a set of jobs, which in turn each contain a\n// set of messages.\nvar MessageSet = function (messageSet) {\n  var self = this;\n  self.jobs = [];\n\n  if (messageSet) {\n    self.jobs = _.clone(messageSet.jobs);\n  }\n};\n\n_.extend(MessageSet.prototype, {\n  formatMessages: function () {\n    var self = this;\n\n    var jobsWithMessages = _.filter(self.jobs, function (job) {\n      return job.hasMessages();\n    });\n\n    return _.map(jobsWithMessages, function (job) {\n      var out = '';\n      out += \"While \" + job.title + \":\\n\";\n      out += job.formatMessages(0);\n      return out;\n    }).join('\\n'); // blank line between jobs\n  },\n\n  hasMessages: function () {\n    var self = this;\n    return _.any(self.jobs, function (job) {\n      return job.hasMessages();\n    });\n  },\n\n  hasMessageWithTag: function (tagName) {\n    var self = this;\n    return _.any(self.jobs, function (job) {\n      return job.hasMessageWithTag(tagName);\n    });\n  },\n\n  // Copy all of the messages in another MessageSet into this\n  // MessageSet. If the other MessageSet is subsequently mutated,\n  // results are undefined.\n  //\n  // XXX rather than this, the user should be able to create a\n  // MessageSet and pass it into capture(), and functions such as\n  // bundle() should take and mutate, rather than return, a\n  // MessageSet.\n  merge: function (messageSet) {\n    var self = this;\n    _.each(messageSet.jobs, function (j) {\n      self.jobs.push(j);\n    });\n  }\n});\n\nvar spaces = function (n) {\n  return _.times(n, function() { return ' ' }).join('');\n};\n\n// XXX: This is now a little bit silly... ideas:\n// Can we just have one hierarchical state?\n// Can we combined job & messageSet\n// Can we infer nesting level?\nvar currentMessageSet = new fiberHelpers.EnvironmentVariable;\nvar currentJob = new fiberHelpers.EnvironmentVariable;\nvar currentNestingLevel = new fiberHelpers.EnvironmentVariable(0);\nvar currentProgress = new fiberHelpers.EnvironmentVariable;\n\nvar rootProgress = new Progress();\n\nvar getRootProgress = function () {\n  return rootProgress;\n};\n\nvar reportProgress = function (state) {\n  var progress = currentProgress.get();\n  if (progress) {\n    progress.reportProgress(state);\n  }\n};\n\nvar reportProgressDone = function () {\n  var progress = currentProgress.get();\n  if (progress) {\n    progress.reportProgressDone();\n  }\n};\n\nvar getCurrentProgressTracker = function () {\n  var progress = currentProgress.get();\n  return progress ? progress : rootProgress;\n};\n\nvar addChildTracker = function (title) {\n  var options = {};\n  if (title !== undefined)\n    options.title = title;\n  return getCurrentProgressTracker().addChildTask(options);\n};\n\n// Create a new MessageSet, run `f` with that as the current\n// MessageSet for the purpose of accumulating and recovering from\n// errors (see error()), and then discard the return value of `f` and\n// return the MessageSet.\n//\n// Note that you must also create a job (with enterJob) to actually\n// begin capturing errors. Alternately you may pass `options`\n// (otherwise optional) and a job will be created for you based on\n// `options`.\nvar capture = function (options, f) {\n  var messageSet = new MessageSet;\n  var parentMessageSet = currentMessageSet.get();\n\n  var title;\n  if (typeof options === \"object\" && options.title)\n    title = options.title;\n  var progress = addChildTracker(title);\n\n  currentProgress.withValue(progress, function () {\n    currentMessageSet.withValue(messageSet, function () {\n      var job = null;\n      if (typeof options === \"object\") {\n        job = new Job(options);\n        messageSet.jobs.push(job);\n      } else {\n        f = options; // options not actually provided\n      }\n\n      currentJob.withValue(job, function () {\n        var nestingLevel = currentNestingLevel.get();\n        currentNestingLevel.withValue(nestingLevel + 1, function () {\n          var start;\n          if (debugBuild) {\n            start = Date.now();\n            console.log(spaces(nestingLevel * 2), \"START CAPTURE\", nestingLevel, options.title, \"took \" + (end - start));\n          }\n          try {\n            f();\n          } finally {\n            progress.reportProgressDone();\n\n            if (debugBuild) {\n              var end = Date.now();\n              console.log(spaces(nestingLevel * 2), \"END CAPTURE\", nestingLevel, options.title, \"took \" + (end - start));\n            }\n          }\n        });\n      });\n    });\n  });\n  return messageSet;\n};\n\n// Called from inside capture(), creates a new Job inside the current\n// MessageSet and run `f` inside of it, so that any messages emitted\n// by `f` are logged in the Job. Returns the return value of `f`. May\n// be called recursively.\n//\n// Called not from inside capture(), does nothing (except call f).\n//\n// options:\n// - title: a title for the job (required)\n// - rootPath: the absolute path relative to which paths in messages\n//   in this job should be interpreted (omit if there is no way to map\n//   files that this job talks about back to files on disk)\nvar enterJob = function (options, f) {\n  if (typeof options === \"function\") {\n    f = options;\n    options = {};\n  }\n\n  if (typeof options === \"string\") {\n    options = {title: options};\n  }\n\n  var progress;\n  {\n    var progressOptions = {};\n    // XXX: Just pass all the options?\n    if (typeof options === \"object\") {\n      if (options.title) {\n        progressOptions.title = options.title;\n      }\n      if (options.forkJoin) {\n        progressOptions.forkJoin = options.forkJoin;\n      }\n    }\n    progress = getCurrentProgressTracker().addChildTask(progressOptions);\n  }\n\n  return currentProgress.withValue(progress, function () {\n    if (!currentMessageSet.get()) {\n      var nestingLevel = currentNestingLevel.get();\n      var start;\n      if (debugBuild) {\n        start = Date.now();\n        console.log(spaces(nestingLevel * 2), \"START\", nestingLevel, options.title);\n      }\n      try {\n        return currentNestingLevel.withValue(nestingLevel + 1, function () {\n          return f();\n        });\n      } finally {\n        progress.reportProgressDone();\n        if (debugBuild) {\n          var end = Date.now();\n          console.log(spaces(nestingLevel * 2), \"DONE\", nestingLevel, options.title, \"took \" + (end - start));\n        }\n      }\n    }\n\n    var job = new Job(options);\n    var originalJob = currentJob.get();\n    originalJob && originalJob.children.push(job);\n    currentMessageSet.get().jobs.push(job);\n\n    return currentJob.withValue(job, function () {\n      var nestingLevel = currentNestingLevel.get();\n      return currentNestingLevel.withValue(nestingLevel + 1, function () {\n        var start;\n        if (debugBuild) {\n          start = Date.now();\n          console.log(spaces(nestingLevel * 2), \"START\", nestingLevel, options.title);\n        }\n        try {\n          return f();\n        } finally {\n          progress.reportProgressDone();\n          if (debugBuild) {\n            var end = Date.now();\n            console.log(spaces(nestingLevel * 2), \"DONE\", nestingLevel, options.title, \"took \" + (end - start));\n          }\n        }\n      });\n    });\n  });\n};\n\n// If not inside a job, return false. Otherwise, return true if any\n// messages (presumably errors) have been recorded for this job\n// (including subjobs created inside this job), else false.\nvar jobHasMessages = function () {\n  var search = function (job) {\n    if (job.hasMessages())\n      return true;\n    return !! _.find(job.children, search);\n  };\n\n  return currentJob.get() ? search(currentJob.get()) : false;\n};\n\n// Given a function f, return a \"marked\" version of f. The mark\n// indicates that stack traces should stop just above f. So if you\n// mark a user-supplied callback function before calling it, you'll be\n// able to show the user just the \"user portion\" of the stack trace\n// (the part inside their own code, and not all of the innards of the\n// code that called it).\nvar markBoundary = function (f) {\n  return parseStack.markBottom(f);\n};\n\n// Record a build error. If inside a job, add the error to the current\n// job and return (caller should do its best to recover and\n// continue). Otherwise, throws an exception based on the error.\n//\n// options may include\n// - file: the file containing the error, relative to the root of the build\n//   (this must be agreed upon out of band)\n// - line: the (1-indexed) line in the file that contains the error\n// - column: the (1-indexed) column in that line where the error begins\n// - func: the function containing the code that triggered the error\n// - useMyCaller: true to capture information the caller (function\n//   name, file, and line). It captures not the information of the\n//   caller of error(), but that caller's caller. It saves them in\n//   'file', 'line', and 'column' (overwriting any values passed in\n//   for those). It also captures the user portion of the stack,\n//   starting at and including the caller's caller.\n//   If this is a number instead of 'true', skips that many stack frames.\n// - downcase: if true, the first character of `message` will be\n//   converted to lower case.\n// - secondary: ignore this error if there are are already other\n//   errors in this job (the implication is that it's probably\n//   downstream of the other error, ie, a consequence of our attempt\n//   to continue past other errors)\n// - tags: object with other error-specific data; there is a method\n//   on MessageSet which can search for errors with a specific named\n//   tag.\nvar error = function (message, options) {\n  options = options || {};\n\n  if (options.downcase)\n    message = message.slice(0,1).toLowerCase() + message.slice(1);\n\n  if (! currentJob.get())\n    throw new Error(\"Error: \" + message);\n\n  if (options.secondary && jobHasMessages())\n    return; // skip it\n\n  var info = _.extend({\n    message: message\n  }, options);\n\n  if ('useMyCaller' in info) {\n    if (info.useMyCaller) {\n      const {\n        insideFiber,\n        outsideFiber\n      } = parseStack.parse(new Error());\n\n      // Concatenate and get rid of lines about Future and buildmessage\n      info.stack = outsideFiber.concat(insideFiber || []).slice(2);\n      if (typeof info.useMyCaller === 'number') {\n        info.stack = info.stack.slice(info.useMyCaller);\n      }\n      var caller = info.stack[0];\n      info.func = caller.func;\n      info.file = caller.file;\n      info.line = caller.line;\n      info.column = caller.column;\n    }\n    delete info.useMyCaller;\n  }\n\n  currentJob.get().addMessage(info);\n};\n\n// Record an exception. The message as well as any file and line\n// information be read directly out of the exception. If not in a job,\n// throws the exception instead. Also capture the user portion of the stack.\n//\n// There is special handling for files.FancySyntaxError exceptions. We\n// will grab the file and location information where the syntax error\n// actually occurred, rather than the place where the exception was\n// thrown.\nvar exception = function (error) {\n  if (! currentJob.get()) {\n    // XXX this may be the wrong place to do this, but it makes syntax errors in\n    // files loaded via isopack.load have context.\n    if (error instanceof files.FancySyntaxError) {\n      error = new Error(\"Syntax error: \" + error.message + \" at \" +\n        error.file + \":\" + error.line + \":\" + error.column);\n    }\n    throw error;\n  }\n\n  var message = error.message;\n\n  if (error instanceof files.FancySyntaxError) {\n    // No stack, because FancySyntaxError isn't a real Error and has no stack\n    // property!\n    currentJob.get().addMessage({\n      message: message,\n      file: error.file,\n      line: error.line,\n      column: error.column\n    });\n  } else {\n    var parsed = parseStack.parse(error);\n\n    // If there is a part inside the fiber, that's the one we want. Otherwise,\n    // use the one outside.\n    var stack = parsed.insideFiber || parsed.outsideFiber;\n    if (stack && stack.length > 0) {\n      var locus = stack[0];\n      currentJob.get().addMessage({\n        message: message,\n        stack: stack,\n        func: locus.func,\n        file: locus.file,\n        line: locus.line,\n        column: locus.column\n      });\n    } else {\n      currentJob.get().addMessage({\n        message: message\n      });\n    }\n  }\n};\n\nvar assertInJob = function () {\n  if (! currentJob.get())\n    throw new Error(\"Expected to be in a buildmessage job\");\n};\n\nvar assertInCapture = function () {\n  if (! currentMessageSet.get())\n    throw new Error(\"Expected to be in a buildmessage capture\");\n};\n\nvar mergeMessagesIntoCurrentJob = function (innerMessages) {\n  var outerMessages = currentMessageSet.get();\n  if (! outerMessages)\n    throw new Error(\"Expected to be in a buildmessage capture\");\n  var outerJob = currentJob.get();\n  if (! outerJob)\n    throw new Error(\"Expected to be in a buildmessage job\");\n  _.each(innerMessages.jobs, function (j) {\n    outerJob.children.push(j);\n  });\n  outerMessages.merge(innerMessages);\n};\n\n// Like _.each, but runs each operation in a separate job\nvar forkJoin = function (options, iterable, fn) {\n  if (!_.isFunction(fn)) {\n    fn = iterable;\n    iterable = options;\n    options = {};\n  }\n\n  var futures = [];\n  var results = [];\n  // XXX: We could check whether the sub-jobs set estimates, and if not\n  // assume they each take the same amount of time and auto-report their completion\n  var errors = [];\n  var firstError = null;\n\n  options.forkJoin = true;\n\n  enterJob(options, function () {\n    var parallel = (options.parallel !== undefined) ? options.parallel : true;\n    if (parallel) {\n      var runOne = fiberHelpers.bindEnvironment(function (fut, fnArguments) {\n        try {\n          var result = enterJob({title: (options.title || '') + ' child'}, function () {\n            return fn.apply(null, fnArguments);\n          });\n          fut['return'](result);\n        } catch (e) {\n          fut['throw'](e);\n        }\n      });\n\n      _.each(iterable, function (...args) {\n        var fut = new Future();\n        Fiber(function () {\n          runOne(fut, args);\n        }).run();\n        futures.push(fut);\n      });\n\n      _.each(futures, function (future) {\n        try {\n          var result = future.wait();\n          results.push(result);\n          errors.push(null);\n        } catch (e) {\n          results.push(null);\n          errors.push(e);\n\n          if (firstError === null) {\n            firstError = e;\n          }\n        }\n      });\n    } else {\n      // not parallel\n      _.each(iterable, function (...args) {\n        try {\n          var result = fn(...args);\n          results.push(result);\n          errors.push(null);\n        } catch (e) {\n          results.push(null);\n          errors.push(e);\n\n          if (firstError === null) {\n            firstError = e;\n          }\n        }\n      });\n    }\n  });\n\n  if (firstError) {\n    throw firstError;\n  }\n\n  return results;\n};\n\n\nvar buildmessage = exports;\n_.extend(exports, {\n  capture: capture,\n  enterJob: enterJob,\n  markBoundary: markBoundary,\n  error: error,\n  exception: exception,\n  jobHasMessages: jobHasMessages,\n  assertInJob: assertInJob,\n  assertInCapture: assertInCapture,\n  mergeMessagesIntoCurrentJob: mergeMessagesIntoCurrentJob,\n  forkJoin: forkJoin,\n  getRootProgress: getRootProgress,\n  reportProgress: reportProgress,\n  reportProgressDone: reportProgressDone,\n  getCurrentProgressTracker: getCurrentProgressTracker,\n  addChildTracker: addChildTracker,\n  _MessageSet: MessageSet\n});\n"]}