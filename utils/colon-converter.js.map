{"version":3,"sources":["/tools/utils/colon-converter.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;;;;;;;;;;;;;AAe9B,IAAI,eAAe,GAAG,UAAU,GAAG,EAAE,MAAM,EAAE;AAC3C,MAAI,MAAM,KAAK,IAAI,EACjB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KACjB,IAAI,MAAM,KAAK,KAAK,EACvB,OAAO,GAAG,CAAC;;AAEb,MAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AACrB,QAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,YAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACjE;;AAED,QAAI,CAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACpB,YAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,OAAO,GAAG,CAAC,CAAC;KAClE;;AAED,WAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,MAAM,EAAE;AAClC,aAAO,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3C,CAAC,CAAC;GACJ;;AAED,MAAI,CAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EACtB,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,OAAO,MAAM,AAAC,CAAC,CAAC;;AAElE,MAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvB,GAAC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,SAAS,EAAE,GAAG,EAAE;AACvC,QAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EACjB,GAAG,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;GACnD,CAAC,CAAC;;AAEH,SAAO,GAAG,CAAC;CACZ,CAAC;;AAEF,IAAI,OAAO,GAAG,UAAU,IAAI,EAAE;AAC5B,SAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;CAChC,CAAC;;AAEF,IAAI,cAAc,GAAG;AACnB,QAAM,EAAE,CAAC;AACP,QAAI,EAAE,IAAI;GACX,CAAC;AACF,SAAO,EAAE,CAAC;AACR,QAAI,EAAE,IAAI;GACX,CAAC;CACH,CAAC;;AAEF,IAAI,eAAe,GAAG;AACpB,cAAY,EAAE,IAAI;AAClB,WAAS,EAAE,CAAC;AACV,QAAI,EAAE,IAAI;AACV,aAAS,EAAE,IAAI;AACf,aAAS,EAAE,IAAI;GAChB,CAAC;CACH,CAAC;;AAEF,IAAI,uBAAuB,GAAG;AAC5B,MAAI,EAAE,CAAC;AACL,aAAS,EAAE,IAAI;AACf,iBAAa,EAAE,IAAI;AACnB,QAAI,EAAE,IAAI;AACV,gBAAY,EAAE,IAAI;GACnB,CAAC;CACH,CAAC;;AAEF,OAAO,CAAC,cAAc,GAAG,UAAU,IAAI,EAAE;AACvC,SAAO,eAAe,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;CAC9C,CAAC;;AAEF,OAAO,CAAC,eAAe,GAAG,UAAU,IAAI,EAAE;AACxC,SAAO,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;CAC/C,CAAC;;AAEF,OAAO,CAAC,cAAc,GAAG,UAAU,IAAI,EAAE;AACvC,SAAO,eAAe,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;CACvD,CAAC;;AAEF,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"tools/utils/colon-converter.js.map","sourcesContent":["var _ = require('underscore');\n\n// schema - Object, representing paths to correct. Ex.:\n// {\n//   format: false,\n//   arch: false,\n//   load: [\n//     {\n//       node_modulus: true,\n//       sourceMap: true,\n//       sourceMapRoot: true,\n//       path: true\n//     }\n//   ]\n// }\nvar convertBySchema = function (val, schema) {\n  if (schema === true)\n    return convert(val);\n  else if (schema === false)\n    return val;\n\n  if (_.isArray(schema)) {\n    if (schema.length !== 1) {\n      throw new Error(\"Expected an array with one element in schema\");\n    }\n\n    if (! _.isArray(val)) {\n      throw new Error(\"Expected an array in value, got \" + typeof val);\n    }\n\n    return _.map(val, function (subval) {\n      return convertBySchema(subval, schema[0]);\n    });\n  }\n\n  if (! _.isObject(schema))\n    throw new Error(\"Unexpected type of schema: \" + typeof(schema));\n\n  var ret = _.clone(val);\n  _.each(schema, function (subschema, key) {\n    if (_.has(ret, key))\n      ret[key] = convertBySchema(val[key], subschema);\n  });\n\n  return ret;\n};\n\nvar convert = function (path) {\n  return path.replace(/:/g, '_');\n};\n\nvar ISOPACK_SCHEME = {\n  builds: [{\n    path: true\n  }],\n  plugins: [{\n    path: true\n  }]\n};\n\nvar UNIBUILD_SCHEME = {\n  node_modules: true,\n  resources: [{\n    file: true,\n    sourceMap: true,\n    servePath: true\n  }]\n};\n\nvar JAVASCRIPT_IMAGE_SCHEME = {\n  load: [{\n    sourceMap: true,\n    sourceMapRoot: true,\n    path: true,\n    node_modules: true\n  }]\n};\n\nexports.convertIsopack = function (data) {\n  return convertBySchema(data, ISOPACK_SCHEME);\n};\n\nexports.convertUnibuild = function (data) {\n  return convertBySchema(data, UNIBUILD_SCHEME);\n};\n\nexports.convertJSImage = function (data) {\n  return convertBySchema(data, JAVASCRIPT_IMAGE_SCHEME);\n};\n\nexports.convert = convert;\n\n"]}